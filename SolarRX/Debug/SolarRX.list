
SolarRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028ac  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08006588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000584  20000024  080065ac  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005a8  080065ac  000205a8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e3e7  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023b1  00000000  00000000  0002e434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d98  00000000  00000000  000307e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cb8  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006b46  00000000  00000000  00032238  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a09  00000000  00000000  00038d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c787  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000037d0  00000000  00000000  0003c804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cbc 	.word	0x08003cbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08003cbc 	.word	0x08003cbc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2iz>:
 80008e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008e8:	d215      	bcs.n	8000916 <__aeabi_d2iz+0x36>
 80008ea:	d511      	bpl.n	8000910 <__aeabi_d2iz+0x30>
 80008ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f4:	d912      	bls.n	800091c <__aeabi_d2iz+0x3c>
 80008f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000902:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	bf18      	it	ne
 800090c:	4240      	negne	r0, r0
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d105      	bne.n	8000928 <__aeabi_d2iz+0x48>
 800091c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000920:	bf08      	it	eq
 8000922:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <DS1820_Init>:

/**
 * @brief  Initializes the one-wire communication for DS1820
 * @retval None
 */
void DS1820_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_OneWireInitStruct;

	HAL_GPIO_WritePin(DS1820_PORT_WH, DS1820_PIN_WH, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093c:	4811      	ldr	r0, [pc, #68]	; (8000984 <DS1820_Init+0x54>)
 800093e:	f001 fe6c 	bl	800261a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DS1820_PORT_B, DS1820_PIN_B, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000948:	480e      	ldr	r0, [pc, #56]	; (8000984 <DS1820_Init+0x54>)
 800094a:	f001 fe66 	bl	800261a <HAL_GPIO_WritePin>

	GPIO_OneWireInitStruct.Pin = DS1820_PIN_WH;
 800094e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000952:	603b      	str	r3, [r7, #0]
	GPIO_OneWireInitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000954:	2311      	movs	r3, #17
 8000956:	607b      	str	r3, [r7, #4]
	GPIO_OneWireInitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
	GPIO_OneWireInitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DS1820_PORT_WH, &GPIO_OneWireInitStruct);
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4807      	ldr	r0, [pc, #28]	; (8000984 <DS1820_Init+0x54>)
 8000966:	f001 fce7 	bl	8002338 <HAL_GPIO_Init>

	GPIO_OneWireInitStruct.Pin = DS1820_PIN_B;
 800096a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(DS1820_PORT_B, &GPIO_OneWireInitStruct);
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4803      	ldr	r0, [pc, #12]	; (8000984 <DS1820_Init+0x54>)
 8000976:	f001 fcdf 	bl	8002338 <HAL_GPIO_Init>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40010800 	.word	0x40010800

08000988 <OW_ReadTemperature>:
/**
 * @brief  Read current temperature
 * @param tempSensor temperature sensor for measuring
 * @retval Measured temperature
 */
int16_t OW_ReadTemperature(TempSensor_t tempSensor) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
//			uint8_t lsByte;
//			uint8_t msByte;
//		};
//	} temperature;

	switch (tempSensor) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d105      	bne.n	80009a4 <OW_ReadTemperature+0x1c>
	case T_BOILER:
		ow_port = DS1820_PORT_B;
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <OW_ReadTemperature+0x124>)
 800099a:	61fb      	str	r3, [r7, #28]
		ow_pin = DS1820_PIN_B;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	837b      	strh	r3, [r7, #26]
		break;
 80009a2:	e005      	b.n	80009b0 <OW_ReadTemperature+0x28>
	case T_WATER_HEATER:
	default:
		ow_port = DS1820_PORT_WH;
 80009a4:	4b41      	ldr	r3, [pc, #260]	; (8000aac <OW_ReadTemperature+0x124>)
 80009a6:	61fb      	str	r3, [r7, #28]
		ow_pin = DS1820_PIN_WH;
 80009a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ac:	837b      	strh	r3, [r7, #26]
		break;
 80009ae:	bf00      	nop
//	temperature.msByte = OW_readByte(ow_port, ow_pin);
//	OW_reset(ow_port, ow_pin);
//
//	return (int16_t)((float) temperature.word / TEMP_RES);

	uint8_t pad_data[] = {0,0,0,0,0,0,0,0,0}; //9 Byte
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	721a      	strb	r2, [r3, #8]
	reset(ow_port, ow_pin);
 80009bc:	8b7b      	ldrh	r3, [r7, #26]
 80009be:	4619      	mov	r1, r3
 80009c0:	69f8      	ldr	r0, [r7, #28]
 80009c2:	f000 fbc6 	bl	8001152 <reset>
	write_byte(OW_CMD_SKIPROM, ow_port, ow_pin); //Skip ROM [0xCC]
 80009c6:	8b7b      	ldrh	r3, [r7, #26]
 80009c8:	461a      	mov	r2, r3
 80009ca:	69f9      	ldr	r1, [r7, #28]
 80009cc:	20cc      	movs	r0, #204	; 0xcc
 80009ce:	f000 fae5 	bl	8000f9c <write_byte>
	write_byte(OW_CONVERT_TEMPERATURE, ow_port, ow_pin); //Convert Temperature [0x44]
 80009d2:	8b7b      	ldrh	r3, [r7, #26]
 80009d4:	461a      	mov	r2, r3
 80009d6:	69f9      	ldr	r1, [r7, #28]
 80009d8:	2044      	movs	r0, #68	; 0x44
 80009da:	f000 fadf 	bl	8000f9c <write_byte>
	PIN_wait_for_1(20, ow_port, ow_pin);
 80009de:	8b7b      	ldrh	r3, [r7, #26]
 80009e0:	461a      	mov	r2, r3
 80009e2:	69f9      	ldr	r1, [r7, #28]
 80009e4:	2014      	movs	r0, #20
 80009e6:	f000 fb93 	bl	8001110 <PIN_wait_for_1>
	reset(ow_port, ow_pin);
 80009ea:	8b7b      	ldrh	r3, [r7, #26]
 80009ec:	4619      	mov	r1, r3
 80009ee:	69f8      	ldr	r0, [r7, #28]
 80009f0:	f000 fbaf 	bl	8001152 <reset>
	write_byte(OW_CMD_SKIPROM, ow_port, ow_pin); //Skip ROM [0xCC]
 80009f4:	8b7b      	ldrh	r3, [r7, #26]
 80009f6:	461a      	mov	r2, r3
 80009f8:	69f9      	ldr	r1, [r7, #28]
 80009fa:	20cc      	movs	r0, #204	; 0xcc
 80009fc:	f000 face 	bl	8000f9c <write_byte>
	write_byte(OW_READ_SCRATCHPAD, ow_port, ow_pin); //Read Scratchpad [0xBE]
 8000a00:	8b7b      	ldrh	r3, [r7, #26]
 8000a02:	461a      	mov	r2, r3
 8000a04:	69f9      	ldr	r1, [r7, #28]
 8000a06:	20be      	movs	r0, #190	; 0xbe
 8000a08:	f000 fac8 	bl	8000f9c <write_byte>
	for (uint8_t i = 0; i < 9; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	767b      	strb	r3, [r7, #25]
 8000a10:	e00f      	b.n	8000a32 <OW_ReadTemperature+0xaa>
		pad_data[i] = read_byte(ow_port, ow_pin); //factor out 1/16 and remember 1/16 != 1/16.0
 8000a12:	7e7c      	ldrb	r4, [r7, #25]
 8000a14:	8b7b      	ldrh	r3, [r7, #26]
 8000a16:	4619      	mov	r1, r3
 8000a18:	69f8      	ldr	r0, [r7, #28]
 8000a1a:	f000 fb55 	bl	80010c8 <read_byte>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	4423      	add	r3, r4
 8000a28:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (uint8_t i = 0; i < 9; i++)
 8000a2c:	7e7b      	ldrb	r3, [r7, #25]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	767b      	strb	r3, [r7, #25]
 8000a32:	7e7b      	ldrb	r3, [r7, #25]
 8000a34:	2b08      	cmp	r3, #8
 8000a36:	d9ec      	bls.n	8000a12 <OW_ReadTemperature+0x8a>
	uint16_t x = (pad_data[1] << 8) + pad_data[0];
 8000a38:	7b7b      	ldrb	r3, [r7, #13]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	7b3b      	ldrb	r3, [r7, #12]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	4413      	add	r3, r2
 8000a46:	82fb      	strh	r3, [r7, #22]
	if ((pad_data[1] >> 7) == 1 )
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	09db      	lsrs	r3, r3, #7
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d117      	bne.n	8000a82 <OW_ReadTemperature+0xfa>
	{
		x -= 1;
 8000a52:	8afb      	ldrh	r3, [r7, #22]
 8000a54:	3b01      	subs	r3, #1
 8000a56:	82fb      	strh	r3, [r7, #22]
		x = ~x;
 8000a58:	8afb      	ldrh	r3, [r7, #22]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	82fb      	strh	r3, [r7, #22]
		return x / -16.0;
 8000a5e:	8afb      	ldrh	r3, [r7, #22]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fcc5 	bl	80003f0 <__aeabi_i2d>
 8000a66:	f04f 0200 	mov.w	r2, #0
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <OW_ReadTemperature+0x128>)
 8000a6c:	f7ff fe50 	bl	8000710 <__aeabi_ddiv>
 8000a70:	4603      	mov	r3, r0
 8000a72:	460c      	mov	r4, r1
 8000a74:	4618      	mov	r0, r3
 8000a76:	4621      	mov	r1, r4
 8000a78:	f7ff ff32 	bl	80008e0 <__aeabi_d2iz>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	e010      	b.n	8000aa4 <OW_ReadTemperature+0x11c>
	}
	else
	{
		return x / 16.0;
 8000a82:	8afb      	ldrh	r3, [r7, #22]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fcb3 	bl	80003f0 <__aeabi_i2d>
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <OW_ReadTemperature+0x12c>)
 8000a90:	f7ff fe3e 	bl	8000710 <__aeabi_ddiv>
 8000a94:	4603      	mov	r3, r0
 8000a96:	460c      	mov	r4, r1
 8000a98:	4618      	mov	r0, r3
 8000a9a:	4621      	mov	r1, r4
 8000a9c:	f7ff ff20 	bl	80008e0 <__aeabi_d2iz>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b21b      	sxth	r3, r3
	}
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3724      	adds	r7, #36	; 0x24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	c0300000 	.word	0xc0300000
 8000ab4:	40300000 	.word	0x40300000

08000ab8 <MeasureTemperature>:
	write_byte(OW_CMD_SKIPROM, ow_port, ow_pin);
	write_byte(OW_READ_POWERSUPPLY, ow_port, ow_pin);
	return read_byte(ow_port, ow_pin);
}

void MeasureTemperature(TempSensor_t tempSensor) {
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	m_temperature[tempSensor] = OW_ReadTemperature(tempSensor);
 8000ac2:	79fc      	ldrb	r4, [r7, #7]
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff5e 	bl	8000988 <OW_ReadTemperature>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MeasureTemperature+0x28>)
 8000ad2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000450 	.word	0x20000450

08000ae4 <MeasureTemperatures>:

void MeasureTemperatures(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	MeasureTemperature(T_WATER_HEATER);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ffe5 	bl	8000ab8 <MeasureTemperature>
	//MeasureTemperature(T_BOILER);
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <GetTemperatureString>:

// Get temperature string for printing on LCD
void GetTemperatureString(int16_t temperature, char *tempString) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	80fb      	strh	r3, [r7, #6]
	// Check if temperature is negative
	if (temperature < 0) {
 8000b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da07      	bge.n	8000b18 <GetTemperatureString+0x24>
		tempString[0] = '-';
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	222d      	movs	r2, #45	; 0x2d
 8000b0c:	701a      	strb	r2, [r3, #0]
		temperature *= -1;
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	425b      	negs	r3, r3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	e013      	b.n	8000b40 <GetTemperatureString+0x4c>
	} else {
		if (temperature / 100)
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	3363      	adds	r3, #99	; 0x63
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	2bc6      	cmp	r3, #198	; 0xc6
 8000b20:	d90b      	bls.n	8000b3a <GetTemperatureString+0x46>
			tempString[0] = (uint16_t) temperature / 100 + '0';
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <GetTemperatureString+0xa4>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	095b      	lsrs	r3, r3, #5
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	3330      	adds	r3, #48	; 0x30
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e002      	b.n	8000b40 <GetTemperatureString+0x4c>
		else
			tempString[0] = '+';
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	222b      	movs	r2, #43	; 0x2b
 8000b3e:	701a      	strb	r2, [r3, #0]
	}

	tempString[1] = ((uint16_t) temperature / 10) % 10 + '0'; // Extract tens digit
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	1c58      	adds	r0, r3, #1
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <GetTemperatureString+0xa8>)
 8000b48:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4c:	08db      	lsrs	r3, r3, #3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <GetTemperatureString+0xa8>)
 8000b52:	fba3 1302 	umull	r1, r3, r3, r2
 8000b56:	08d9      	lsrs	r1, r3, #3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	3330      	adds	r3, #48	; 0x30
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	7003      	strb	r3, [r0, #0]
	tempString[2] = (uint16_t) temperature % 10 + '0'; // Extract ones digit
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	1c98      	adds	r0, r3, #2
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <GetTemperatureString+0xa8>)
 8000b74:	fba3 1302 	umull	r1, r3, r3, r2
 8000b78:	08d9      	lsrs	r1, r3, #3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	3330      	adds	r3, #48	; 0x30
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	7003      	strb	r3, [r0, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	51eb851f 	.word	0x51eb851f
 8000b9c:	cccccccd 	.word	0xcccccccd

08000ba0 <DisplayTemperatures>:

void DisplayTemperatures(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
	char tBoiler[] = "000";
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <DisplayTemperatures+0x50>)
 8000ba8:	60fb      	str	r3, [r7, #12]
	char tWaterHeater[] = "000";
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <DisplayTemperatures+0x50>)
 8000bac:	60bb      	str	r3, [r7, #8]
	char tCollector[] = "000";
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <DisplayTemperatures+0x50>)
 8000bb0:	607b      	str	r3, [r7, #4]
	GetTemperatureString(m_temperature[T_BOILER], tBoiler);
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <DisplayTemperatures+0x54>)
 8000bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bb8:	f107 020c 	add.w	r2, r7, #12
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff98 	bl	8000af4 <GetTemperatureString>
	GetTemperatureString(m_temperature[T_WATER_HEATER], tWaterHeater);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <DisplayTemperatures+0x54>)
 8000bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bca:	f107 0208 	add.w	r2, r7, #8
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff8f 	bl	8000af4 <GetTemperatureString>
	//GetTemperatureString(m_tCollector.i, tCollector);

	SSD1306_PrintTemperatures(tBoiler, tWaterHeater, tCollector);
 8000bd6:	1d3a      	adds	r2, r7, #4
 8000bd8:	f107 0108 	add.w	r1, r7, #8
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 fac9 	bl	8001178 <SSD1306_PrintTemperatures>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	00303030 	.word	0x00303030
 8000bf4:	20000450 	.word	0x20000450

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f043 0320 	orr.w	r3, r3, #32
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0320 	and.w	r3, r3, #32
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6193      	str	r3, [r2, #24]
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <MX_GPIO_Init+0x58>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}
 8000c46:	bf00      	nop
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <MX_I2C1_Init+0x58>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <MX_I2C1_Init+0x5c>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_I2C1_Init+0x54>)
 8000c92:	f001 fcdb 	bl	800264c <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 8000c9c:	214b      	movs	r1, #75	; 0x4b
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_I2C1_Init+0x60>)
 8000ca0:	f000 f92a 	bl	8000ef8 <_Error_Handler>
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000454 	.word	0x20000454
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	00061a80 	.word	0x00061a80
 8000cb4:	08003cd4 	.word	0x08003cd4

08000cb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <MX_I2C2_Init+0x58>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cc4:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <MX_I2C2_Init+0x5c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_I2C2_Init+0x54>)
 8000cf6:	f001 fca9 	bl	800264c <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <MX_I2C2_Init+0x50>
  {
    Error_Handler();
 8000d00:	2163      	movs	r1, #99	; 0x63
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_I2C2_Init+0x60>)
 8000d04:	f000 f8f8 	bl	8000ef8 <_Error_Handler>
  }

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200004a8 	.word	0x200004a8
 8000d10:	40005800 	.word	0x40005800
 8000d14:	00061a80 	.word	0x00061a80
 8000d18:	08003cd4 	.word	0x08003cd4

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f001 f9ba 	bl	8002098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f84c 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f7ff ff66 	bl	8000bf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d2c:	f7ff ff92 	bl	8000c54 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d30:	f7ff ffc2 	bl	8000cb8 <MX_I2C2_Init>

#ifdef USE_SPI1
  MX_SPI1_Init();
 8000d34:	f000 f8a6 	bl	8000e84 <MX_SPI1_Init>
#else
  MX_SPI2_Init();
#endif

  MX_USART2_UART_Init();
 8000d38:	f001 f942 	bl	8001fc0 <MX_USART2_UART_Init>

  DS1820_Init();
 8000d3c:	f7ff fdf8 	bl	8000930 <DS1820_Init>

  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000d40:	f000 fa92 	bl	8001268 <SSD1306_Init>

  SSD1306_GotoXY(0, 0);
 8000d44:	2100      	movs	r1, #0
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fbf6 	bl	8001538 <SSD1306_GotoXY>
  SSD1306_Puts("HELLO", &Font_11x18, 1);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4916      	ldr	r1, [pc, #88]	; (8000da8 <main+0x8c>)
 8000d50:	4816      	ldr	r0, [pc, #88]	; (8000dac <main+0x90>)
 8000d52:	f000 fc87 	bl	8001664 <SSD1306_Puts>
  SSD1306_GotoXY(10, 30);
 8000d56:	211e      	movs	r1, #30
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f000 fbed 	bl	8001538 <SSD1306_GotoXY>
  SSD1306_Puts("  WORLD :)", &Font_11x18, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4911      	ldr	r1, [pc, #68]	; (8000da8 <main+0x8c>)
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <main+0x94>)
 8000d64:	f000 fc7e 	bl	8001664 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000d68:	f000 fb42 	bl	80013f0 <SSD1306_UpdateScreen>
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
//	  _DelayUS(100);


	/*Task 10ms*/
    if(Task10ms)
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <main+0x98>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <main+0x60>
    {
      Task10ms = false;
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <main+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
    }
    /*Task 100ms*/
    if(Task100ms)
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <main+0x9c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <main+0x74>
    {
      Task100ms = false;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <main+0x9c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]

      MeasureTemperatures();
 8000d8c:	f7ff feaa 	bl	8000ae4 <MeasureTemperatures>

    }
    /*Task 1 second*/
    if(Task1s)
 8000d90:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <main+0xa0>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0e8      	beq.n	8000d6c <main+0x50>
    {
      Task1s = false;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <main+0xa0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]

      UpdateDisplay();
 8000da0:	f000 f85a 	bl	8000e58 <UpdateDisplay>
    if(Task10ms)
 8000da4:	e7e2      	b.n	8000d6c <main+0x50>
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	08003ce8 	.word	0x08003ce8
 8000db0:	08003cf0 	.word	0x08003cf0
 8000db4:	2000044c 	.word	0x2000044c
 8000db8:	2000044d 	.word	0x2000044d
 8000dbc:	2000044e 	.word	0x2000044e

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b090      	sub	sp, #64	; 0x40
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0318 	add.w	r3, r7, #24
 8000dca:	2228      	movs	r2, #40	; 0x28
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 ff6c 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dfe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 f98b 	bl	8003124 <HAL_RCC_OscConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e14:	21cc      	movs	r1, #204	; 0xcc
 8000e16:	480f      	ldr	r0, [pc, #60]	; (8000e54 <SystemClock_Config+0x94>)
 8000e18:	f000 f86e 	bl	8000ef8 <_Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2102      	movs	r1, #2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fbf4 	bl	8003624 <HAL_RCC_ClockConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <SystemClock_Config+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e42:	21d9      	movs	r1, #217	; 0xd9
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <SystemClock_Config+0x94>)
 8000e46:	f000 f857 	bl	8000ef8 <_Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	; 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	08003cfc 	.word	0x08003cfc

08000e58 <UpdateDisplay>:

void UpdateDisplay(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
//	if (m_displayCounter < 3) {
//		DisplayTime();
//	} else {
		DisplayTemperatures();
 8000e5c:	f7ff fea0 	bl	8000ba0 <DisplayTemperatures>
//	}
	m_displayCounter++;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <UpdateDisplay+0x28>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <UpdateDisplay+0x28>)
 8000e6a:	701a      	strb	r2, [r3, #0]
	if (m_displayCounter >= 6)
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <UpdateDisplay+0x28>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d902      	bls.n	8000e7a <UpdateDisplay+0x22>
		m_displayCounter = 0;
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <UpdateDisplay+0x28>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200004fc 	.word	0x200004fc

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <MX_SPI1_Init+0x6c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eb8:	2220      	movs	r2, #32
 8000eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_SPI1_Init+0x68>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_SPI1_Init+0x68>)
 8000ed6:	f002 fd41 	bl	800395c <HAL_SPI_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <MX_SPI1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ee0:	21ff      	movs	r1, #255	; 0xff
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_SPI1_Init+0x70>)
 8000ee4:	f000 f808 	bl	8000ef8 <_Error_Handler>
  }

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000500 	.word	0x20000500
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	08003cfc 	.word	0x08003cfc

08000ef8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f02:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
 8000f04:	e7fe      	b.n	8000f04 <_Error_Handler+0xc>

08000f06 <delayus>:
#include "oneWire.h"
#include "main.h"


void delayus(uint32_t us)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  volatile uint32_t counter = 8*us;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	60fb      	str	r3, [r7, #12]
  while(counter--);
 8000f14:	bf00      	nop
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	60fa      	str	r2, [r7, #12]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1fa      	bne.n	8000f16 <delayus+0x10>
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <LH_signal>:

void LH_signal(uint32_t L_time, uint32_t H_time, GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(ow_port, ow_pin, GPIO_PIN_RESET);
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f001 fb6b 	bl	800261a <HAL_GPIO_WritePin>
	delayus(L_time);//From pullup_HIGH to GND_LOW:---___
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ffde 	bl	8000f06 <delayus>
	HAL_GPIO_WritePin(ow_port, ow_pin, GPIO_PIN_SET);
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fb62 	bl	800261a <HAL_GPIO_WritePin>
	delayus(H_time);//From GND_LOW to pullup_HIGH:___---
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ffd5 	bl	8000f06 <delayus>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <write_bit>:

void write_bit(uint8_t bit, GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80bb      	strh	r3, [r7, #4]
	if(bit == 0) LH_signal(60, 5, ow_port, ow_pin);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d106      	bne.n	8000f88 <write_bit+0x24>
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	2105      	movs	r1, #5
 8000f80:	203c      	movs	r0, #60	; 0x3c
 8000f82:	f7ff ffd2 	bl	8000f2a <LH_signal>
	else LH_signal(5, 60, ow_port, ow_pin);
}
 8000f86:	e005      	b.n	8000f94 <write_bit+0x30>
	else LH_signal(5, 60, ow_port, ow_pin);
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	213c      	movs	r1, #60	; 0x3c
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f7ff ffcb 	bl	8000f2a <LH_signal>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <write_byte>:

void write_byte(uint8_t data, GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	80bb      	strh	r3, [r7, #4]
	for (uint8_t i = 0; i < 8; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e00f      	b.n	8000fd2 <write_byte+0x36>
		write_bit(data >> i & 1, ow_port, ow_pin);
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	fa42 f303 	asr.w	r3, r2, r3
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	88ba      	ldrh	r2, [r7, #4]
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffcc 	bl	8000f64 <write_bit>
	for (uint8_t i = 0; i < 8; i++)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d9ec      	bls.n	8000fb2 <write_byte+0x16>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <PIN_as_INPUT>:

static void PIN_as_INPUT(GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(ow_port, ow_pin, GPIO_PIN_SET);
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f001 fb0a 	bl	800261a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = ow_pin;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ow_port, &GPIO_InitStruct);
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f001 f98d 	bl	8002338 <HAL_GPIO_Init>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <PIN_as_OUTPUT>:

static void PIN_as_OUTPUT(GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(ow_port, ow_pin, GPIO_PIN_SET);
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	2201      	movs	r2, #1
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 fae7 	bl	800261a <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = ow_pin;
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001050:	2311      	movs	r3, #17
 8001052:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ow_port, &GPIO_InitStruct);
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4619      	mov	r1, r3
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f001 f968 	bl	8002338 <HAL_GPIO_Init>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <read_bit>:

uint8_t read_bit(GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
	uint8_t bit = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
	LH_signal(1, 10, ow_port, ow_pin);
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	210a      	movs	r1, #10
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff ff4f 	bl	8000f2a <LH_signal>
	PIN_as_INPUT(ow_port, ow_pin);
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffa5 	bl	8000fe0 <PIN_as_INPUT>
	bit = (HAL_GPIO_ReadPin(ow_port, ow_pin) ? 1 : 0);
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f001 faa6 	bl	80025ec <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]
	delayus(40);
 80010ae:	2028      	movs	r0, #40	; 0x28
 80010b0:	f7ff ff29 	bl	8000f06 <delayus>
	PIN_as_OUTPUT(ow_port, ow_pin);
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4619      	mov	r1, r3
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ffb4 	bl	8001026 <PIN_as_OUTPUT>
	return bit;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <read_byte>:

uint8_t read_byte(GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	uint8_t data = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]
 80010dc:	e010      	b.n	8001100 <read_byte+0x38>
		data += read_bit(ow_port, ow_pin) << i;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffc4 	bl	8001070 <read_bit>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	4413      	add	r3, r2
 80010f8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 8; i++)
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b07      	cmp	r3, #7
 8001104:	d9eb      	bls.n	80010de <read_byte+0x16>
	return data;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <PIN_wait_for_1>:

void PIN_wait_for_1(uint32_t time, GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4613      	mov	r3, r2
 800111c:	80fb      	strh	r3, [r7, #6]
	PIN_as_INPUT(ow_port, ow_pin);
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	4619      	mov	r1, r3
 8001122:	68b8      	ldr	r0, [r7, #8]
 8001124:	f7ff ff5c 	bl	8000fe0 <PIN_as_INPUT>
	delayus(time);
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f7ff feec 	bl	8000f06 <delayus>
	while(HAL_GPIO_ReadPin(ow_port, ow_pin) == 0);
 800112e:	bf00      	nop
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4619      	mov	r1, r3
 8001134:	68b8      	ldr	r0, [r7, #8]
 8001136:	f001 fa59 	bl	80025ec <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f7      	beq.n	8001130 <PIN_wait_for_1+0x20>
	PIN_as_OUTPUT(ow_port, ow_pin);
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4619      	mov	r1, r3
 8001144:	68b8      	ldr	r0, [r7, #8]
 8001146:	f7ff ff6e 	bl	8001026 <PIN_as_OUTPUT>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <reset>:

void reset(GPIO_TypeDef *ow_port, uint16_t ow_pin) {
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	460b      	mov	r3, r1
 800115c:	807b      	strh	r3, [r7, #2]
	LH_signal(500, 500, ow_port, ow_pin);
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800116a:	f7ff fede 	bl	8000f2a <LH_signal>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <SSD1306_PrintTemperatures>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


// Print temperatures on LCD
void SSD1306_PrintTemperatures(char *tBoiler, char *tWaterHeater, char *tCollector) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]

	SSD1306_Clear();
 8001184:	f000 fd3b 	bl	8001bfe <SSD1306_Clear>

	// Kotao
	SSD1306_GotoXY(92, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	205c      	movs	r0, #92	; 0x5c
 800118c:	f000 f9d4 	bl	8001538 <SSD1306_GotoXY>
	SSD1306_Puts("KOTAO", &Font_7x10, SSD1306_COLOR_WHITE);
 8001190:	2201      	movs	r2, #1
 8001192:	492c      	ldr	r1, [pc, #176]	; (8001244 <SSD1306_PrintTemperatures+0xcc>)
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <SSD1306_PrintTemperatures+0xd0>)
 8001196:	f000 fa65 	bl	8001664 <SSD1306_Puts>
	SSD1306_GotoXY(92, 16);
 800119a:	2110      	movs	r1, #16
 800119c:	205c      	movs	r0, #92	; 0x5c
 800119e:	f000 f9cb 	bl	8001538 <SSD1306_GotoXY>
	SSD1306_Puts(tBoiler, &Font_11x18, SSD1306_COLOR_WHITE);
 80011a2:	2201      	movs	r2, #1
 80011a4:	4929      	ldr	r1, [pc, #164]	; (800124c <SSD1306_PrintTemperatures+0xd4>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 fa5c 	bl	8001664 <SSD1306_Puts>
	if (m_boilerPump) {
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <SSD1306_PrintTemperatures+0xd8>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <SSD1306_PrintTemperatures+0x4a>
		SSD1306_DrawFilledCircle(108, 48, 10, SSD1306_COLOR_WHITE);
 80011b4:	2301      	movs	r3, #1
 80011b6:	220a      	movs	r2, #10
 80011b8:	2130      	movs	r1, #48	; 0x30
 80011ba:	206c      	movs	r0, #108	; 0x6c
 80011bc:	f000 fc45 	bl	8001a4a <SSD1306_DrawFilledCircle>
 80011c0:	e005      	b.n	80011ce <SSD1306_PrintTemperatures+0x56>
	} else {
		SSD1306_DrawCircle(108, 48, 10, SSD1306_COLOR_WHITE);
 80011c2:	2301      	movs	r3, #1
 80011c4:	220a      	movs	r2, #10
 80011c6:	2130      	movs	r1, #48	; 0x30
 80011c8:	206c      	movs	r0, #108	; 0x6c
 80011ca:	f000 fb6b 	bl	80018a4 <SSD1306_DrawCircle>
	}

	// Bojler
	SSD1306_GotoXY(44, 0);
 80011ce:	2100      	movs	r1, #0
 80011d0:	202c      	movs	r0, #44	; 0x2c
 80011d2:	f000 f9b1 	bl	8001538 <SSD1306_GotoXY>
	SSD1306_Puts("BOJLER", &Font_7x10, SSD1306_COLOR_WHITE);
 80011d6:	2201      	movs	r2, #1
 80011d8:	491a      	ldr	r1, [pc, #104]	; (8001244 <SSD1306_PrintTemperatures+0xcc>)
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <SSD1306_PrintTemperatures+0xdc>)
 80011dc:	f000 fa42 	bl	8001664 <SSD1306_Puts>
	SSD1306_GotoXY(40, 24);
 80011e0:	2118      	movs	r1, #24
 80011e2:	2028      	movs	r0, #40	; 0x28
 80011e4:	f000 f9a8 	bl	8001538 <SSD1306_GotoXY>
	SSD1306_Puts(tWaterHeater, &Font_16x26, SSD1306_COLOR_WHITE);
 80011e8:	2201      	movs	r2, #1
 80011ea:	491b      	ldr	r1, [pc, #108]	; (8001258 <SSD1306_PrintTemperatures+0xe0>)
 80011ec:	68b8      	ldr	r0, [r7, #8]
 80011ee:	f000 fa39 	bl	8001664 <SSD1306_Puts>

	// Kolektor
	SSD1306_GotoXY(2, 0);
 80011f2:	2100      	movs	r1, #0
 80011f4:	2002      	movs	r0, #2
 80011f6:	f000 f99f 	bl	8001538 <SSD1306_GotoXY>
	SSD1306_Puts("KOLEK", &Font_7x10, SSD1306_COLOR_WHITE);
 80011fa:	2201      	movs	r2, #1
 80011fc:	4911      	ldr	r1, [pc, #68]	; (8001244 <SSD1306_PrintTemperatures+0xcc>)
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <SSD1306_PrintTemperatures+0xe4>)
 8001200:	f000 fa30 	bl	8001664 <SSD1306_Puts>
	SSD1306_GotoXY(2, 16);
 8001204:	2110      	movs	r1, #16
 8001206:	2002      	movs	r0, #2
 8001208:	f000 f996 	bl	8001538 <SSD1306_GotoXY>
		SSD1306_Puts(tCollector, &Font_11x18, SSD1306_COLOR_WHITE);
		if (TIMEOUT(nrf24Data.timeout, NRF24_TIMEOUT)) {
			nrf24Data.connected = false;
		}
	} else*/ {
		SSD1306_Puts(" --", &Font_11x18, SSD1306_COLOR_WHITE);
 800120c:	2201      	movs	r2, #1
 800120e:	490f      	ldr	r1, [pc, #60]	; (800124c <SSD1306_PrintTemperatures+0xd4>)
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <SSD1306_PrintTemperatures+0xe8>)
 8001212:	f000 fa27 	bl	8001664 <SSD1306_Puts>
	}
	if (m_collectorPump) {
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <SSD1306_PrintTemperatures+0xec>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <SSD1306_PrintTemperatures+0xb4>
		SSD1306_DrawFilledCircle(16, 48, 10, SSD1306_COLOR_WHITE);
 800121e:	2301      	movs	r3, #1
 8001220:	220a      	movs	r2, #10
 8001222:	2130      	movs	r1, #48	; 0x30
 8001224:	2010      	movs	r0, #16
 8001226:	f000 fc10 	bl	8001a4a <SSD1306_DrawFilledCircle>
 800122a:	e005      	b.n	8001238 <SSD1306_PrintTemperatures+0xc0>
	} else {
		SSD1306_DrawCircle(16, 48, 10, SSD1306_COLOR_WHITE);
 800122c:	2301      	movs	r3, #1
 800122e:	220a      	movs	r2, #10
 8001230:	2130      	movs	r1, #48	; 0x30
 8001232:	2010      	movs	r0, #16
 8001234:	f000 fb36 	bl	80018a4 <SSD1306_DrawCircle>
	}

	SSD1306_UpdateScreen();
 8001238:	f000 f8da 	bl	80013f0 <SSD1306_UpdateScreen>
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	08003d10 	.word	0x08003d10
 800124c:	20000008 	.word	0x20000008
 8001250:	2000055b 	.word	0x2000055b
 8001254:	08003d18 	.word	0x08003d18
 8001258:	20000010 	.word	0x20000010
 800125c:	08003d20 	.word	0x08003d20
 8001260:	08003d28 	.word	0x08003d28
 8001264:	20000558 	.word	0x20000558

08001268 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800126e:	f000 fccf 	bl	8001c10 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001272:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001276:	2201      	movs	r2, #1
 8001278:	2178      	movs	r1, #120	; 0x78
 800127a:	485b      	ldr	r0, [pc, #364]	; (80013e8 <SSD1306_Init+0x180>)
 800127c:	f001 fc1c 	bl	8002ab8 <HAL_I2C_IsDeviceReady>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e0a9      	b.n	80013de <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800128a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800128e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001290:	e002      	b.n	8001298 <SSD1306_Init+0x30>
		p--;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3b01      	subs	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f9      	bne.n	8001292 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800129e:	22ae      	movs	r2, #174	; 0xae
 80012a0:	2100      	movs	r1, #0
 80012a2:	2078      	movs	r0, #120	; 0x78
 80012a4:	f000 fd10 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80012a8:	2220      	movs	r2, #32
 80012aa:	2100      	movs	r1, #0
 80012ac:	2078      	movs	r0, #120	; 0x78
 80012ae:	f000 fd0b 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80012b2:	2210      	movs	r2, #16
 80012b4:	2100      	movs	r1, #0
 80012b6:	2078      	movs	r0, #120	; 0x78
 80012b8:	f000 fd06 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80012bc:	22b0      	movs	r2, #176	; 0xb0
 80012be:	2100      	movs	r1, #0
 80012c0:	2078      	movs	r0, #120	; 0x78
 80012c2:	f000 fd01 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80012c6:	22c8      	movs	r2, #200	; 0xc8
 80012c8:	2100      	movs	r1, #0
 80012ca:	2078      	movs	r0, #120	; 0x78
 80012cc:	f000 fcfc 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2078      	movs	r0, #120	; 0x78
 80012d6:	f000 fcf7 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012da:	2210      	movs	r2, #16
 80012dc:	2100      	movs	r1, #0
 80012de:	2078      	movs	r0, #120	; 0x78
 80012e0:	f000 fcf2 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012e4:	2240      	movs	r2, #64	; 0x40
 80012e6:	2100      	movs	r1, #0
 80012e8:	2078      	movs	r0, #120	; 0x78
 80012ea:	f000 fced 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012ee:	2281      	movs	r2, #129	; 0x81
 80012f0:	2100      	movs	r1, #0
 80012f2:	2078      	movs	r0, #120	; 0x78
 80012f4:	f000 fce8 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	2100      	movs	r1, #0
 80012fc:	2078      	movs	r0, #120	; 0x78
 80012fe:	f000 fce3 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001302:	22a1      	movs	r2, #161	; 0xa1
 8001304:	2100      	movs	r1, #0
 8001306:	2078      	movs	r0, #120	; 0x78
 8001308:	f000 fcde 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800130c:	22a6      	movs	r2, #166	; 0xa6
 800130e:	2100      	movs	r1, #0
 8001310:	2078      	movs	r0, #120	; 0x78
 8001312:	f000 fcd9 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001316:	22a8      	movs	r2, #168	; 0xa8
 8001318:	2100      	movs	r1, #0
 800131a:	2078      	movs	r0, #120	; 0x78
 800131c:	f000 fcd4 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001320:	223f      	movs	r2, #63	; 0x3f
 8001322:	2100      	movs	r1, #0
 8001324:	2078      	movs	r0, #120	; 0x78
 8001326:	f000 fccf 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800132a:	22a4      	movs	r2, #164	; 0xa4
 800132c:	2100      	movs	r1, #0
 800132e:	2078      	movs	r0, #120	; 0x78
 8001330:	f000 fcca 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001334:	22d3      	movs	r2, #211	; 0xd3
 8001336:	2100      	movs	r1, #0
 8001338:	2078      	movs	r0, #120	; 0x78
 800133a:	f000 fcc5 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2078      	movs	r0, #120	; 0x78
 8001344:	f000 fcc0 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001348:	22d5      	movs	r2, #213	; 0xd5
 800134a:	2100      	movs	r1, #0
 800134c:	2078      	movs	r0, #120	; 0x78
 800134e:	f000 fcbb 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001352:	22f0      	movs	r2, #240	; 0xf0
 8001354:	2100      	movs	r1, #0
 8001356:	2078      	movs	r0, #120	; 0x78
 8001358:	f000 fcb6 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800135c:	22d9      	movs	r2, #217	; 0xd9
 800135e:	2100      	movs	r1, #0
 8001360:	2078      	movs	r0, #120	; 0x78
 8001362:	f000 fcb1 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001366:	2222      	movs	r2, #34	; 0x22
 8001368:	2100      	movs	r1, #0
 800136a:	2078      	movs	r0, #120	; 0x78
 800136c:	f000 fcac 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001370:	22da      	movs	r2, #218	; 0xda
 8001372:	2100      	movs	r1, #0
 8001374:	2078      	movs	r0, #120	; 0x78
 8001376:	f000 fca7 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800137a:	2212      	movs	r2, #18
 800137c:	2100      	movs	r1, #0
 800137e:	2078      	movs	r0, #120	; 0x78
 8001380:	f000 fca2 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001384:	22db      	movs	r2, #219	; 0xdb
 8001386:	2100      	movs	r1, #0
 8001388:	2078      	movs	r0, #120	; 0x78
 800138a:	f000 fc9d 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800138e:	2220      	movs	r2, #32
 8001390:	2100      	movs	r1, #0
 8001392:	2078      	movs	r0, #120	; 0x78
 8001394:	f000 fc98 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001398:	228d      	movs	r2, #141	; 0x8d
 800139a:	2100      	movs	r1, #0
 800139c:	2078      	movs	r0, #120	; 0x78
 800139e:	f000 fc93 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80013a2:	2214      	movs	r2, #20
 80013a4:	2100      	movs	r1, #0
 80013a6:	2078      	movs	r0, #120	; 0x78
 80013a8:	f000 fc8e 	bl	8001cc8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80013ac:	22af      	movs	r2, #175	; 0xaf
 80013ae:	2100      	movs	r1, #0
 80013b0:	2078      	movs	r0, #120	; 0x78
 80013b2:	f000 fc89 	bl	8001cc8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80013b6:	222e      	movs	r2, #46	; 0x2e
 80013b8:	2100      	movs	r1, #0
 80013ba:	2078      	movs	r0, #120	; 0x78
 80013bc:	f000 fc84 	bl	8001cc8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f843 	bl	800144c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80013c6:	f000 f813 	bl	80013f0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <SSD1306_Init+0x184>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SSD1306_Init+0x184>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SSD1306_Init+0x184>)
 80013d8:	2201      	movs	r2, #1
 80013da:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000454 	.word	0x20000454
 80013ec:	20000440 	.word	0x20000440

080013f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e01d      	b.n	8001438 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3b50      	subs	r3, #80	; 0x50
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	2078      	movs	r0, #120	; 0x78
 8001408:	f000 fc5e 	bl	8001cc8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2078      	movs	r0, #120	; 0x78
 8001412:	f000 fc59 	bl	8001cc8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001416:	2210      	movs	r2, #16
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fc54 	bl	8001cc8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	01db      	lsls	r3, r3, #7
 8001424:	4a08      	ldr	r2, [pc, #32]	; (8001448 <SSD1306_UpdateScreen+0x58>)
 8001426:	441a      	add	r2, r3
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	2078      	movs	r0, #120	; 0x78
 800142e:	f000 fc03 	bl	8001c38 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3301      	adds	r3, #1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d9de      	bls.n	80013fc <SSD1306_UpdateScreen+0xc>
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000040 	.word	0x20000040

0800144c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <SSD1306_Fill+0x14>
 800145c:	2300      	movs	r3, #0
 800145e:	e000      	b.n	8001462 <SSD1306_Fill+0x16>
 8001460:	23ff      	movs	r3, #255	; 0xff
 8001462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001466:	4619      	mov	r1, r3
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <SSD1306_Fill+0x2c>)
 800146a:	f002 fc1f 	bl	8003cac <memset>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000040 	.word	0x20000040

0800147c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
 8001486:	460b      	mov	r3, r1
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	70fb      	strb	r3, [r7, #3]
	if (
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	d848      	bhi.n	8001526 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	2b3f      	cmp	r3, #63	; 0x3f
 8001498:	d845      	bhi.n	8001526 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <SSD1306_DrawPixel+0xb4>)
 800149c:	791b      	ldrb	r3, [r3, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d11a      	bne.n	80014ec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014b6:	88fa      	ldrh	r2, [r7, #6]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	08db      	lsrs	r3, r3, #3
 80014bc:	b298      	uxth	r0, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	01db      	lsls	r3, r3, #7
 80014c2:	4413      	add	r3, r2
 80014c4:	88f9      	ldrh	r1, [r7, #6]
 80014c6:	4602      	mov	r2, r0
 80014c8:	01d2      	lsls	r2, r2, #7
 80014ca:	440a      	add	r2, r1
 80014cc:	4919      	ldr	r1, [pc, #100]	; (8001534 <SSD1306_DrawPixel+0xb8>)
 80014ce:	5c8a      	ldrb	r2, [r1, r2]
 80014d0:	b251      	sxtb	r1, r2
 80014d2:	88ba      	ldrh	r2, [r7, #4]
 80014d4:	f002 0207 	and.w	r2, r2, #7
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	b252      	sxtb	r2, r2
 80014e0:	430a      	orrs	r2, r1
 80014e2:	b252      	sxtb	r2, r2
 80014e4:	b2d1      	uxtb	r1, r2
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <SSD1306_DrawPixel+0xb8>)
 80014e8:	54d1      	strb	r1, [r2, r3]
 80014ea:	e01d      	b.n	8001528 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014ec:	88fa      	ldrh	r2, [r7, #6]
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	b298      	uxth	r0, r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	4413      	add	r3, r2
 80014fa:	88f9      	ldrh	r1, [r7, #6]
 80014fc:	4602      	mov	r2, r0
 80014fe:	01d2      	lsls	r2, r2, #7
 8001500:	440a      	add	r2, r1
 8001502:	490c      	ldr	r1, [pc, #48]	; (8001534 <SSD1306_DrawPixel+0xb8>)
 8001504:	5c8a      	ldrb	r2, [r1, r2]
 8001506:	b251      	sxtb	r1, r2
 8001508:	88ba      	ldrh	r2, [r7, #4]
 800150a:	f002 0207 	and.w	r2, r2, #7
 800150e:	2001      	movs	r0, #1
 8001510:	fa00 f202 	lsl.w	r2, r0, r2
 8001514:	b252      	sxtb	r2, r2
 8001516:	43d2      	mvns	r2, r2
 8001518:	b252      	sxtb	r2, r2
 800151a:	400a      	ands	r2, r1
 800151c:	b252      	sxtb	r2, r2
 800151e:	b2d1      	uxtb	r1, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <SSD1306_DrawPixel+0xb8>)
 8001522:	54d1      	strb	r1, [r2, r3]
 8001524:	e000      	b.n	8001528 <SSD1306_DrawPixel+0xac>
		return;
 8001526:	bf00      	nop
	}
}
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000440 	.word	0x20000440
 8001534:	20000040 	.word	0x20000040

08001538 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	460a      	mov	r2, r1
 8001542:	80fb      	strh	r3, [r7, #6]
 8001544:	4613      	mov	r3, r2
 8001546:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <SSD1306_GotoXY+0x28>)
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <SSD1306_GotoXY+0x28>)
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	8053      	strh	r3, [r2, #2]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000440 	.word	0x20000440

08001564 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	4613      	mov	r3, r2
 8001572:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <SSD1306_Putc+0xfc>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
	if (
 8001580:	2b7f      	cmp	r3, #127	; 0x7f
 8001582:	dc07      	bgt.n	8001594 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <SSD1306_Putc+0xfc>)
 8001586:	885b      	ldrh	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001590:	2b3f      	cmp	r3, #63	; 0x3f
 8001592:	dd01      	ble.n	8001598 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e05e      	b.n	8001656 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e04b      	b.n	8001636 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b20      	subs	r3, #32
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	7849      	ldrb	r1, [r1, #1]
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	440b      	add	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	e030      	b.n	8001624 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <SSD1306_Putc+0xfc>)
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b298      	uxth	r0, r3
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <SSD1306_Putc+0xfc>)
 80015e0:	885a      	ldrh	r2, [r3, #2]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	79ba      	ldrb	r2, [r7, #6]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff ff45 	bl	800147c <SSD1306_DrawPixel>
 80015f2:	e014      	b.n	800161e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <SSD1306_Putc+0xfc>)
 80015f6:	881a      	ldrh	r2, [r3, #0]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b298      	uxth	r0, r3
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <SSD1306_Putc+0xfc>)
 8001602:	885a      	ldrh	r2, [r3, #2]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4413      	add	r3, r2
 800160a:	b299      	uxth	r1, r3
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
 800161a:	f7ff ff2f 	bl	800147c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	3301      	adds	r3, #1
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8c8      	bhi.n	80015c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	461a      	mov	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	429a      	cmp	r2, r3
 8001640:	d8ad      	bhi.n	800159e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <SSD1306_Putc+0xfc>)
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <SSD1306_Putc+0xfc>)
 8001652:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001654:	79fb      	ldrb	r3, [r7, #7]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000440 	.word	0x20000440

08001664 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	4613      	mov	r3, r2
 8001670:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001672:	e012      	b.n	800169a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff71 	bl	8001564 <SSD1306_Putc>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d002      	beq.n	8001694 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	e008      	b.n	80016a6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e8      	bne.n	8001674 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	781b      	ldrb	r3, [r3, #0]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80016ae:	b590      	push	{r4, r7, lr}
 80016b0:	b087      	sub	sp, #28
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4604      	mov	r4, r0
 80016b6:	4608      	mov	r0, r1
 80016b8:	4611      	mov	r1, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	80fb      	strh	r3, [r7, #6]
 80016c0:	4603      	mov	r3, r0
 80016c2:	80bb      	strh	r3, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2b7f      	cmp	r3, #127	; 0x7f
 80016d0:	d901      	bls.n	80016d6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80016d2:	237f      	movs	r3, #127	; 0x7f
 80016d4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	2b7f      	cmp	r3, #127	; 0x7f
 80016da:	d901      	bls.n	80016e0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80016dc:	237f      	movs	r3, #127	; 0x7f
 80016de:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	2b3f      	cmp	r3, #63	; 0x3f
 80016e4:	d901      	bls.n	80016ea <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80016e6:	233f      	movs	r3, #63	; 0x3f
 80016e8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80016ea:	883b      	ldrh	r3, [r7, #0]
 80016ec:	2b3f      	cmp	r3, #63	; 0x3f
 80016ee:	d901      	bls.n	80016f4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80016f0:	233f      	movs	r3, #63	; 0x3f
 80016f2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d205      	bcs.n	8001708 <SSD1306_DrawLine+0x5a>
 80016fc:	887a      	ldrh	r2, [r7, #2]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21b      	sxth	r3, r3
 8001706:	e004      	b.n	8001712 <SSD1306_DrawLine+0x64>
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29b      	uxth	r3, r3
 8001710:	b21b      	sxth	r3, r3
 8001712:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001714:	88ba      	ldrh	r2, [r7, #4]
 8001716:	883b      	ldrh	r3, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d205      	bcs.n	8001728 <SSD1306_DrawLine+0x7a>
 800171c:	883a      	ldrh	r2, [r7, #0]
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	b21b      	sxth	r3, r3
 8001726:	e004      	b.n	8001732 <SSD1306_DrawLine+0x84>
 8001728:	88ba      	ldrh	r2, [r7, #4]
 800172a:	883b      	ldrh	r3, [r7, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21b      	sxth	r3, r3
 8001732:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001734:	88fa      	ldrh	r2, [r7, #6]
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	429a      	cmp	r2, r3
 800173a:	d201      	bcs.n	8001740 <SSD1306_DrawLine+0x92>
 800173c:	2301      	movs	r3, #1
 800173e:	e001      	b.n	8001744 <SSD1306_DrawLine+0x96>
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001746:	88ba      	ldrh	r2, [r7, #4]
 8001748:	883b      	ldrh	r3, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d201      	bcs.n	8001752 <SSD1306_DrawLine+0xa4>
 800174e:	2301      	movs	r3, #1
 8001750:	e001      	b.n	8001756 <SSD1306_DrawLine+0xa8>
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001758:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800175c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	dd06      	ble.n	8001772 <SSD1306_DrawLine+0xc4>
 8001764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001768:	0fda      	lsrs	r2, r3, #31
 800176a:	4413      	add	r3, r2
 800176c:	105b      	asrs	r3, r3, #1
 800176e:	b21b      	sxth	r3, r3
 8001770:	e006      	b.n	8001780 <SSD1306_DrawLine+0xd2>
 8001772:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001776:	425b      	negs	r3, r3
 8001778:	0fda      	lsrs	r2, r3, #31
 800177a:	4413      	add	r3, r2
 800177c:	105b      	asrs	r3, r3, #1
 800177e:	b21b      	sxth	r3, r3
 8001780:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001782:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d129      	bne.n	80017de <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800178a:	883a      	ldrh	r2, [r7, #0]
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d205      	bcs.n	800179e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001792:	883b      	ldrh	r3, [r7, #0]
 8001794:	817b      	strh	r3, [r7, #10]
			y1 = y0;
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800179a:	897b      	ldrh	r3, [r7, #10]
 800179c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d205      	bcs.n	80017b2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	817b      	strh	r3, [r7, #10]
			x1 = x0;
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80017ae:	897b      	ldrh	r3, [r7, #10]
 80017b0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	82bb      	strh	r3, [r7, #20]
 80017b6:	e00c      	b.n	80017d2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80017b8:	8ab9      	ldrh	r1, [r7, #20]
 80017ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe5b 	bl	800147c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80017c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3301      	adds	r3, #1
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	82bb      	strh	r3, [r7, #20]
 80017d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017d6:	883b      	ldrh	r3, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dded      	ble.n	80017b8 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80017dc:	e05f      	b.n	800189e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80017de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d129      	bne.n	800183a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80017e6:	883a      	ldrh	r2, [r7, #0]
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d205      	bcs.n	80017fa <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	817b      	strh	r3, [r7, #10]
			y1 = y0;
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80017f6:	897b      	ldrh	r3, [r7, #10]
 80017f8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d205      	bcs.n	800180e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	817b      	strh	r3, [r7, #10]
			x1 = x0;
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800180a:	897b      	ldrh	r3, [r7, #10]
 800180c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	82bb      	strh	r3, [r7, #20]
 8001812:	e00c      	b.n	800182e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001814:	8abb      	ldrh	r3, [r7, #20]
 8001816:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe2d 	bl	800147c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001822:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001826:	b29b      	uxth	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	82bb      	strh	r3, [r7, #20]
 800182e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	429a      	cmp	r2, r3
 8001836:	dded      	ble.n	8001814 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001838:	e031      	b.n	800189e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800183a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800183e:	88b9      	ldrh	r1, [r7, #4]
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe1a 	bl	800147c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	429a      	cmp	r2, r3
 800184e:	d103      	bne.n	8001858 <SSD1306_DrawLine+0x1aa>
 8001850:	88ba      	ldrh	r2, [r7, #4]
 8001852:	883b      	ldrh	r3, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d021      	beq.n	800189c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001858:	8afb      	ldrh	r3, [r7, #22]
 800185a:	813b      	strh	r3, [r7, #8]
		if (e2 > -dx) {
 800185c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001864:	425b      	negs	r3, r3
 8001866:	429a      	cmp	r2, r3
 8001868:	dd08      	ble.n	800187c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800186a:	8afa      	ldrh	r2, [r7, #22]
 800186c:	8a3b      	ldrh	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001874:	89fa      	ldrh	r2, [r7, #14]
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4413      	add	r3, r2
 800187a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800187c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001880:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	dad8      	bge.n	800183a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001888:	8afa      	ldrh	r2, [r7, #22]
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	4413      	add	r3, r2
 800188e:	b29b      	uxth	r3, r3
 8001890:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001892:	89ba      	ldrh	r2, [r7, #12]
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800189a:	e7ce      	b.n	800183a <SSD1306_DrawLine+0x18c>
			break;
 800189c:	bf00      	nop
		} 
	}
}
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	4603      	mov	r3, r0
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	f1c3 0301 	rsb	r3, r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	461a      	mov	r2, r3
 80018d4:	03d2      	lsls	r2, r2, #15
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	b29b      	uxth	r3, r3
 80018dc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80018e6:	88f8      	ldrh	r0, [r7, #6]
 80018e8:	88ba      	ldrh	r2, [r7, #4]
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	4413      	add	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	787a      	ldrb	r2, [r7, #1]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff fdc2 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80018f8:	88f8      	ldrh	r0, [r7, #6]
 80018fa:	88ba      	ldrh	r2, [r7, #4]
 80018fc:	887b      	ldrh	r3, [r7, #2]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	787a      	ldrb	r2, [r7, #1]
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff fdb9 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	4413      	add	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	88b9      	ldrh	r1, [r7, #4]
 8001914:	787a      	ldrb	r2, [r7, #1]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fdb0 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	88b9      	ldrh	r1, [r7, #4]
 8001926:	787a      	ldrb	r2, [r7, #1]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fda7 	bl	800147c <SSD1306_DrawPixel>

    while (x < y) {
 800192e:	e081      	b.n	8001a34 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0e      	blt.n	8001956 <SSD1306_DrawCircle+0xb2>
            y--;
 8001938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800193c:	b29b      	uxth	r3, r3
 800193e:	3b01      	subs	r3, #1
 8001940:	b29b      	uxth	r3, r3
 8001942:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001944:	8a7b      	ldrh	r3, [r7, #18]
 8001946:	3302      	adds	r3, #2
 8001948:	b29b      	uxth	r3, r3
 800194a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800194c:	8afa      	ldrh	r2, [r7, #22]
 800194e:	8a7b      	ldrh	r3, [r7, #18]
 8001950:	4413      	add	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001956:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800195a:	b29b      	uxth	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	b29b      	uxth	r3, r3
 8001960:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001962:	8abb      	ldrh	r3, [r7, #20]
 8001964:	3302      	adds	r3, #2
 8001966:	b29b      	uxth	r3, r3
 8001968:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 800196a:	8afa      	ldrh	r2, [r7, #22]
 800196c:	8abb      	ldrh	r3, [r7, #20]
 800196e:	4413      	add	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	8a3b      	ldrh	r3, [r7, #16]
 8001978:	4413      	add	r3, r2
 800197a:	b298      	uxth	r0, r3
 800197c:	88ba      	ldrh	r2, [r7, #4]
 800197e:	89fb      	ldrh	r3, [r7, #14]
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	787a      	ldrb	r2, [r7, #1]
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff fd78 	bl	800147c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	8a3b      	ldrh	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	b298      	uxth	r0, r3
 8001994:	88ba      	ldrh	r2, [r7, #4]
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	4413      	add	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	787a      	ldrb	r2, [r7, #1]
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff fd6c 	bl	800147c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	8a3b      	ldrh	r3, [r7, #16]
 80019a8:	4413      	add	r3, r2
 80019aa:	b298      	uxth	r0, r3
 80019ac:	88ba      	ldrh	r2, [r7, #4]
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	787a      	ldrb	r2, [r7, #1]
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff fd60 	bl	800147c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 80019bc:	88fa      	ldrh	r2, [r7, #6]
 80019be:	8a3b      	ldrh	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b298      	uxth	r0, r3
 80019c4:	88ba      	ldrh	r2, [r7, #4]
 80019c6:	89fb      	ldrh	r3, [r7, #14]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	787a      	ldrb	r2, [r7, #1]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff fd54 	bl	800147c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	4413      	add	r3, r2
 80019da:	b298      	uxth	r0, r3
 80019dc:	88ba      	ldrh	r2, [r7, #4]
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	787a      	ldrb	r2, [r7, #1]
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff fd48 	bl	800147c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80019ec:	88fa      	ldrh	r2, [r7, #6]
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b298      	uxth	r0, r3
 80019f4:	88ba      	ldrh	r2, [r7, #4]
 80019f6:	8a3b      	ldrh	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	787a      	ldrb	r2, [r7, #1]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff fd3c 	bl	800147c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	89fb      	ldrh	r3, [r7, #14]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b298      	uxth	r0, r3
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	8a3b      	ldrh	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	787a      	ldrb	r2, [r7, #1]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff fd30 	bl	800147c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001a1c:	88fa      	ldrh	r2, [r7, #6]
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	b298      	uxth	r0, r3
 8001a24:	88ba      	ldrh	r2, [r7, #4]
 8001a26:	8a3b      	ldrh	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	787a      	ldrb	r2, [r7, #1]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff fd24 	bl	800147c <SSD1306_DrawPixel>
    while (x < y) {
 8001a34:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f6ff af77 	blt.w	8001930 <SSD1306_DrawCircle+0x8c>
    }
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}

08001a4a <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b089      	sub	sp, #36	; 0x24
 8001a4e:	af02      	add	r7, sp, #8
 8001a50:	4604      	mov	r4, r0
 8001a52:	4608      	mov	r0, r1
 8001a54:	4611      	mov	r1, r2
 8001a56:	461a      	mov	r2, r3
 8001a58:	4623      	mov	r3, r4
 8001a5a:	80fb      	strh	r3, [r7, #6]
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	80bb      	strh	r3, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	f1c3 0301 	rsb	r3, r3, #1
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	03d2      	lsls	r2, r2, #15
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001a8c:	88f8      	ldrh	r0, [r7, #6]
 8001a8e:	88ba      	ldrh	r2, [r7, #4]
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	4413      	add	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	787a      	ldrb	r2, [r7, #1]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff fcef 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001a9e:	88f8      	ldrh	r0, [r7, #6]
 8001aa0:	88ba      	ldrh	r2, [r7, #4]
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	787a      	ldrb	r2, [r7, #1]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff fce6 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	88b9      	ldrh	r1, [r7, #4]
 8001aba:	787a      	ldrb	r2, [r7, #1]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fcdd 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	88b9      	ldrh	r1, [r7, #4]
 8001acc:	787a      	ldrb	r2, [r7, #1]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fcd4 	bl	800147c <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b298      	uxth	r0, r3
 8001adc:	88b9      	ldrh	r1, [r7, #4]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	88bc      	ldrh	r4, [r7, #4]
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	f7ff fdde 	bl	80016ae <SSD1306_DrawLine>

    while (x < y) {
 8001af2:	e079      	b.n	8001be8 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8001af4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0e      	blt.n	8001b1a <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001b08:	8a7b      	ldrh	r3, [r7, #18]
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001b10:	8afa      	ldrh	r2, [r7, #22]
 8001b12:	8a7b      	ldrh	r3, [r7, #18]
 8001b14:	4413      	add	r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001b1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001b26:	8abb      	ldrh	r3, [r7, #20]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001b2e:	8afa      	ldrh	r2, [r7, #22]
 8001b30:	8abb      	ldrh	r3, [r7, #20]
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	8a3b      	ldrh	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b298      	uxth	r0, r3
 8001b40:	88ba      	ldrh	r2, [r7, #4]
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	4413      	add	r3, r2
 8001b46:	b299      	uxth	r1, r3
 8001b48:	88fa      	ldrh	r2, [r7, #6]
 8001b4a:	8a3b      	ldrh	r3, [r7, #16]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	b29c      	uxth	r4, r3
 8001b50:	88ba      	ldrh	r2, [r7, #4]
 8001b52:	89fb      	ldrh	r3, [r7, #14]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	787b      	ldrb	r3, [r7, #1]
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	4622      	mov	r2, r4
 8001b60:	f7ff fda5 	bl	80016ae <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001b64:	88fa      	ldrh	r2, [r7, #6]
 8001b66:	8a3b      	ldrh	r3, [r7, #16]
 8001b68:	4413      	add	r3, r2
 8001b6a:	b298      	uxth	r0, r3
 8001b6c:	88ba      	ldrh	r2, [r7, #4]
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b299      	uxth	r1, r3
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	8a3b      	ldrh	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b29c      	uxth	r4, r3
 8001b7c:	88ba      	ldrh	r2, [r7, #4]
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	f7ff fd8f 	bl	80016ae <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	89fb      	ldrh	r3, [r7, #14]
 8001b94:	4413      	add	r3, r2
 8001b96:	b298      	uxth	r0, r3
 8001b98:	88ba      	ldrh	r2, [r7, #4]
 8001b9a:	8a3b      	ldrh	r3, [r7, #16]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	89fb      	ldrh	r3, [r7, #14]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	b29c      	uxth	r4, r3
 8001ba8:	88ba      	ldrh	r2, [r7, #4]
 8001baa:	8a3b      	ldrh	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	f7ff fd79 	bl	80016ae <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b298      	uxth	r0, r3
 8001bc4:	88ba      	ldrh	r2, [r7, #4]
 8001bc6:	8a3b      	ldrh	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	b29c      	uxth	r4, r3
 8001bd4:	88ba      	ldrh	r2, [r7, #4]
 8001bd6:	8a3b      	ldrh	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	4622      	mov	r2, r4
 8001be4:	f7ff fd63 	bl	80016ae <SSD1306_DrawLine>
    while (x < y) {
 8001be8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	f6ff af7f 	blt.w	8001af4 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd90      	pop	{r4, r7, pc}

08001bfe <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fc22 	bl	800144c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c08:	f7ff fbf2 	bl	80013f0 <SSD1306_UpdateScreen>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <ssd1306_I2C_Init+0x24>)
 8001c18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c1a:	e002      	b.n	8001c22 <ssd1306_I2C_Init+0x12>
		p--;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	0003d090 	.word	0x0003d090

08001c38 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b0c7      	sub	sp, #284	; 0x11c
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4639      	mov	r1, r7
 8001c44:	600a      	str	r2, [r1, #0]
 8001c46:	4619      	mov	r1, r3
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	1dbb      	adds	r3, r7, #6
 8001c50:	4602      	mov	r2, r0
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	460a      	mov	r2, r1
 8001c58:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	1dba      	adds	r2, r7, #6
 8001c60:	7812      	ldrb	r2, [r2, #0]
 8001c62:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c6a:	e010      	b.n	8001c8e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001c6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c70:	3301      	adds	r3, #1
 8001c72:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001c76:	4639      	mov	r1, r7
 8001c78:	6809      	ldr	r1, [r1, #0]
 8001c7a:	440a      	add	r2, r1
 8001c7c:	7811      	ldrb	r1, [r2, #0]
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c84:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c8e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	1d3a      	adds	r2, r7, #4
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8e7      	bhi.n	8001c6c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b298      	uxth	r0, r3
 8001caa:	f107 020c 	add.w	r2, r7, #12
 8001cae:	230a      	movs	r3, #10
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <ssd1306_I2C_WriteMulti+0x8c>)
 8001cb6:	f000 fe01 	bl	80028bc <HAL_I2C_Master_Transmit>
}
 8001cba:	bf00      	nop
 8001cbc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	20000454 	.word	0x20000454

08001cc8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	71bb      	strb	r3, [r7, #6]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001cde:	797b      	ldrb	r3, [r7, #5]
 8001ce0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	b299      	uxth	r1, r3
 8001ce6:	f107 020c 	add.w	r2, r7, #12
 8001cea:	230a      	movs	r3, #10
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2302      	movs	r3, #2
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <ssd1306_I2C_Write+0x38>)
 8001cf2:	f000 fde3 	bl	80028bc <HAL_I2C_Master_Transmit>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000454 	.word	0x20000454

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_MspInit+0x60>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_MspInit+0x60>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_I2C_MspInit+0xc8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d124      	bne.n	8001dd2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0318 	add.w	r3, r7, #24
 8001db0:	4619      	mov	r1, r3
 8001db2:	4821      	ldr	r0, [pc, #132]	; (8001e38 <HAL_I2C_MspInit+0xd0>)
 8001db4:	f000 fac0 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc2:	61d3      	str	r3, [r2, #28]
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dd0:	e029      	b.n	8001e26 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_I2C_MspInit+0xd4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d124      	bne.n	8001e26 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6193      	str	r3, [r2, #24]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001df4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfa:	2312      	movs	r3, #18
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	4619      	mov	r1, r3
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <HAL_I2C_MspInit+0xd0>)
 8001e0a:	f000 fa95 	bl	8002338 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_I2C_MspInit+0xcc>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40005400 	.word	0x40005400
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40005800 	.word	0x40005800

08001e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_SPI_MspInit+0x88>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d12f      	bne.n	8001ec0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_SPI_MspInit+0x8c>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001e90:	23b0      	movs	r3, #176	; 0xb0
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_SPI_MspInit+0x90>)
 8001ea4:	f000 fa48 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ea8:	2340      	movs	r3, #64	; 0x40
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_SPI_MspInit+0x90>)
 8001ebc:	f000 fa3c 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40013000 	.word	0x40013000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
	...

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  Cnt++;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <SysTick_Handler+0x80>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3301      	adds	r3, #1
 8001f22:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <SysTick_Handler+0x80>)
 8001f24:	6013      	str	r3, [r2, #0]

  if(!(Cnt % 10))
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <SysTick_Handler+0x80>)
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <SysTick_Handler+0x84>)
 8001f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	1aca      	subs	r2, r1, r3
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d124      	bne.n	8001f8a <SysTick_Handler+0x72>
  {
    Task10ms = true;
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <SysTick_Handler+0x88>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	701a      	strb	r2, [r3, #0]
    if(!(Cnt % 100))
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <SysTick_Handler+0x80>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <SysTick_Handler+0x8c>)
 8001f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	2164      	movs	r1, #100	; 0x64
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <SysTick_Handler+0x72>
    {
      Task100ms = true;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <SysTick_Handler+0x90>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
      if(!(Cnt % 1000))
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <SysTick_Handler+0x80>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <SysTick_Handler+0x94>)
 8001f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <SysTick_Handler+0x72>
      {
        Cnt = 0;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SysTick_Handler+0x80>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
        Task1s = true;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <SysTick_Handler+0x98>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  HAL_IncTick();
 8001f8a:	f000 f8cb 	bl	8002124 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001f8e:	f000 f9c6 	bl	800231e <HAL_SYSTICK_IRQHandler>

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000448 	.word	0x20000448
 8001f9c:	cccccccd 	.word	0xcccccccd
 8001fa0:	2000044c 	.word	0x2000044c
 8001fa4:	51eb851f 	.word	0x51eb851f
 8001fa8:	2000044d 	.word	0x2000044d
 8001fac:	10624dd3 	.word	0x10624dd3
 8001fb0:	2000044e 	.word	0x2000044e

08001fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fc6:	4a13      	ldr	r2, [pc, #76]	; (8002014 <MX_USART2_UART_Init+0x54>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001ff8:	f001 fd33 	bl	8003a62 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002002:	2145      	movs	r1, #69	; 0x45
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_USART2_UART_Init+0x58>)
 8002006:	f7fe ff77 	bl	8000ef8 <_Error_Handler>
  }

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000560 	.word	0x20000560
 8002014:	40004400 	.word	0x40004400
 8002018:	08003d2c 	.word	0x08003d2c

0800201c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param uartHandle: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_UART_MspInit+0x70>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d123      	bne.n	8002084 <HAL_UART_MspInit+0x68>
  {
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <HAL_UART_MspInit+0x74>)
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_UART_MspInit+0x74>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002046:	61d3      	str	r3, [r2, #28]
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0x74>)
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8002054:	2304      	movs	r3, #4
 8002056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <HAL_UART_MspInit+0x78>)
 8002068:	f000 f966 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 800206c:	2308      	movs	r3, #8
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_UART_MspInit+0x78>)
 8002080:	f000 f95a 	bl	8002338 <HAL_GPIO_Init>
  }

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40004400 	.word	0x40004400
 8002090:	40021000 	.word	0x40021000
 8002094:	40010800 	.word	0x40010800

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_Init+0x28>)
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_Init+0x28>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 f905 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	200f      	movs	r0, #15
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fe26 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f90f 	bl	8002306 <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f000 f8e5 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000018 	.word	0x20000018
 800211c:	20000020 	.word	0x20000020
 8002120:	2000001c 	.word	0x2000001c

08002124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x20>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x20>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000020 	.word	0x20000020
 8002144:	200005a4 	.word	0x200005a4

08002148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_GetTick+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	200005a4 	.word	0x200005a4

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	490d      	ldr	r1, [pc, #52]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	4909      	ldr	r1, [pc, #36]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	2201      	movs	r2, #1
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	1e5a      	subs	r2, r3, #1
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	401a      	ands	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225a:	2101      	movs	r1, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	1e59      	subs	r1, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff92 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff4b 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff60 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff92 	bl	8002214 <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff61 	bl	80021c0 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffb0 	bl	8002274 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002322:	f000 f802 	bl	800232a <HAL_SYSTICK_Callback>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
	...

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b08b      	sub	sp, #44	; 0x2c
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	e127      	b.n	800259c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800234c:	2201      	movs	r2, #1
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8116 	bne.w	8002596 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b12      	cmp	r3, #18
 8002370:	d034      	beq.n	80023dc <HAL_GPIO_Init+0xa4>
 8002372:	2b12      	cmp	r3, #18
 8002374:	d80d      	bhi.n	8002392 <HAL_GPIO_Init+0x5a>
 8002376:	2b02      	cmp	r3, #2
 8002378:	d02b      	beq.n	80023d2 <HAL_GPIO_Init+0x9a>
 800237a:	2b02      	cmp	r3, #2
 800237c:	d804      	bhi.n	8002388 <HAL_GPIO_Init+0x50>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d031      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
 8002382:	2b01      	cmp	r3, #1
 8002384:	d01c      	beq.n	80023c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002386:	e048      	b.n	800241a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002388:	2b03      	cmp	r3, #3
 800238a:	d043      	beq.n	8002414 <HAL_GPIO_Init+0xdc>
 800238c:	2b11      	cmp	r3, #17
 800238e:	d01b      	beq.n	80023c8 <HAL_GPIO_Init+0x90>
          break;
 8002390:	e043      	b.n	800241a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002392:	4a89      	ldr	r2, [pc, #548]	; (80025b8 <HAL_GPIO_Init+0x280>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d026      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
 8002398:	4a87      	ldr	r2, [pc, #540]	; (80025b8 <HAL_GPIO_Init+0x280>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d806      	bhi.n	80023ac <HAL_GPIO_Init+0x74>
 800239e:	4a87      	ldr	r2, [pc, #540]	; (80025bc <HAL_GPIO_Init+0x284>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d020      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
 80023a4:	4a86      	ldr	r2, [pc, #536]	; (80025c0 <HAL_GPIO_Init+0x288>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01d      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
          break;
 80023aa:	e036      	b.n	800241a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023ac:	4a85      	ldr	r2, [pc, #532]	; (80025c4 <HAL_GPIO_Init+0x28c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
 80023b2:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <HAL_GPIO_Init+0x290>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d016      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
 80023b8:	4a84      	ldr	r2, [pc, #528]	; (80025cc <HAL_GPIO_Init+0x294>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0xae>
          break;
 80023be:	e02c      	b.n	800241a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e028      	b.n	800241a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	3304      	adds	r3, #4
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e023      	b.n	800241a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	3308      	adds	r3, #8
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e01e      	b.n	800241a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	330c      	adds	r3, #12
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e019      	b.n	800241a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ee:	2304      	movs	r3, #4
 80023f0:	623b      	str	r3, [r7, #32]
          break;
 80023f2:	e012      	b.n	800241a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023fc:	2308      	movs	r3, #8
 80023fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	611a      	str	r2, [r3, #16]
          break;
 8002406:	e008      	b.n	800241a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002408:	2308      	movs	r3, #8
 800240a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	615a      	str	r2, [r3, #20]
          break;
 8002412:	e002      	b.n	800241a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
          break;
 8002418:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2bff      	cmp	r3, #255	; 0xff
 800241e:	d801      	bhi.n	8002424 <HAL_GPIO_Init+0xec>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	e001      	b.n	8002428 <HAL_GPIO_Init+0xf0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2bff      	cmp	r3, #255	; 0xff
 800242e:	d802      	bhi.n	8002436 <HAL_GPIO_Init+0xfe>
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x104>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	3b08      	subs	r3, #8
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	210f      	movs	r1, #15
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	401a      	ands	r2, r3
 800244e:	6a39      	ldr	r1, [r7, #32]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	431a      	orrs	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8096 	beq.w	8002596 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800246a:	4a59      	ldr	r2, [pc, #356]	; (80025d0 <HAL_GPIO_Init+0x298>)
 800246c:	4b58      	ldr	r3, [pc, #352]	; (80025d0 <HAL_GPIO_Init+0x298>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6193      	str	r3, [r2, #24]
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_GPIO_Init+0x298>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002482:	4a54      	ldr	r2, [pc, #336]	; (80025d4 <HAL_GPIO_Init+0x29c>)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4b      	ldr	r2, [pc, #300]	; (80025d8 <HAL_GPIO_Init+0x2a0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x19e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4a      	ldr	r2, [pc, #296]	; (80025dc <HAL_GPIO_Init+0x2a4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x19a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a49      	ldr	r2, [pc, #292]	; (80025e0 <HAL_GPIO_Init+0x2a8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x196>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <HAL_GPIO_Init+0x2ac>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x192>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e006      	b.n	80024d8 <HAL_GPIO_Init+0x1a0>
 80024ca:	2304      	movs	r3, #4
 80024cc:	e004      	b.n	80024d8 <HAL_GPIO_Init+0x1a0>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e002      	b.n	80024d8 <HAL_GPIO_Init+0x1a0>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x1a0>
 80024d6:	2300      	movs	r3, #0
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	f002 0203 	and.w	r2, r2, #3
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	4093      	lsls	r3, r2
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e8:	493a      	ldr	r1, [pc, #232]	; (80025d4 <HAL_GPIO_Init+0x29c>)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002502:	4939      	ldr	r1, [pc, #228]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
 800250e:	e006      	b.n	800251e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002510:	4935      	ldr	r1, [pc, #212]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002512:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800252a:	492f      	ldr	r1, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800252c:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
 8002536:	e006      	b.n	8002546 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002538:	492b      	ldr	r1, [pc, #172]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4013      	ands	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002552:	4925      	ldr	r1, [pc, #148]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002560:	4921      	ldr	r1, [pc, #132]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	4013      	ands	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800257a:	491b      	ldr	r1, [pc, #108]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
 8002586:	e006      	b.n	8002596 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002588:	4917      	ldr	r1, [pc, #92]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_GPIO_Init+0x2b0>)
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4013      	ands	r3, r2
 8002594:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	3301      	adds	r3, #1
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f47f aed0 	bne.w	800234c <HAL_GPIO_Init+0x14>
  }
}
 80025ac:	bf00      	nop
 80025ae:	372c      	adds	r7, #44	; 0x2c
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	10210000 	.word	0x10210000
 80025bc:	10110000 	.word	0x10110000
 80025c0:	10120000 	.word	0x10120000
 80025c4:	10310000 	.word	0x10310000
 80025c8:	10320000 	.word	0x10320000
 80025cc:	10220000 	.word	0x10220000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40010800 	.word	0x40010800
 80025dc:	40010c00 	.word	0x40010c00
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40011400 	.word	0x40011400
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]
 8002626:	4613      	mov	r3, r2
 8002628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800262a:	787b      	ldrb	r3, [r7, #1]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002636:	e003      	b.n	8002640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	041a      	lsls	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e11f      	b.n	800289e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fb78 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b0:	f001 f90e 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a7b      	ldr	r2, [pc, #492]	; (80028a8 <HAL_I2C_Init+0x25c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d807      	bhi.n	80026d0 <HAL_I2C_Init+0x84>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a7a      	ldr	r2, [pc, #488]	; (80028ac <HAL_I2C_Init+0x260>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e006      	b.n	80026de <HAL_I2C_Init+0x92>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a77      	ldr	r2, [pc, #476]	; (80028b0 <HAL_I2C_Init+0x264>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0db      	b.n	800289e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a72      	ldr	r2, [pc, #456]	; (80028b4 <HAL_I2C_Init+0x268>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4863      	ldr	r0, [pc, #396]	; (80028a8 <HAL_I2C_Init+0x25c>)
 800271a:	4283      	cmp	r3, r0
 800271c:	d802      	bhi.n	8002724 <HAL_I2C_Init+0xd8>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	e009      	b.n	8002738 <HAL_I2C_Init+0xec>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	4862      	ldr	r0, [pc, #392]	; (80028b8 <HAL_I2C_Init+0x26c>)
 8002730:	fba0 0303 	umull	r0, r3, r0, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	430b      	orrs	r3, r1
 800273a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4955      	ldr	r1, [pc, #340]	; (80028a8 <HAL_I2C_Init+0x25c>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d80d      	bhi.n	8002774 <HAL_I2C_Init+0x128>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e59      	subs	r1, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fbb1 f3f3 	udiv	r3, r1, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	2b04      	cmp	r3, #4
 800276e:	bf38      	it	cc
 8002770:	2304      	movcc	r3, #4
 8002772:	e04f      	b.n	8002814 <HAL_I2C_Init+0x1c8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d111      	bne.n	80027a0 <HAL_I2C_Init+0x154>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e5c      	subs	r4, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	440b      	add	r3, r1
 800278a:	fbb4 f3f3 	udiv	r3, r4, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e012      	b.n	80027c6 <HAL_I2C_Init+0x17a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1e5c      	subs	r4, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	0099      	lsls	r1, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb4 f3f3 	udiv	r3, r4, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Init+0x182>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e022      	b.n	8002814 <HAL_I2C_Init+0x1c8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10e      	bne.n	80027f4 <HAL_I2C_Init+0x1a8>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e5c      	subs	r4, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	440b      	add	r3, r1
 80027e4:	fbb4 f3f3 	udiv	r3, r4, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Init+0x1c8>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e5c      	subs	r4, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	0099      	lsls	r1, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	fbb4 f3f3 	udiv	r3, r4, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002814:	4313      	orrs	r3, r2
 8002816:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	69d0      	ldr	r0, [r2, #28]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6a12      	ldr	r2, [r2, #32]
 800282e:	4302      	orrs	r2, r0
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6908      	ldr	r0, [r1, #16]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68c9      	ldr	r1, [r1, #12]
 800284e:	4301      	orrs	r1, r0
 8002850:	430b      	orrs	r3, r1
 8002852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	68d2      	ldr	r2, [r2, #12]
 800285e:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6950      	ldr	r0, [r2, #20]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6992      	ldr	r2, [r2, #24]
 800286a:	4302      	orrs	r2, r0
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	000186a0 	.word	0x000186a0
 80028ac:	001e847f 	.word	0x001e847f
 80028b0:	003d08ff 	.word	0x003d08ff
 80028b4:	431bde83 	.word	0x431bde83
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	817b      	strh	r3, [r7, #10]
 80028cc:	4613      	mov	r3, r2
 80028ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fc3a 	bl	8002148 <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	f040 80e0 	bne.w	8002aa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	4970      	ldr	r1, [pc, #448]	; (8002ab0 <HAL_I2C_Master_Transmit+0x1f4>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fa92 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e0d3      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Transmit+0x50>
 8002908:	2302      	movs	r3, #2
 800290a:	e0cc      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2210      	movs	r2, #16
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	893a      	ldrh	r2, [r7, #8]
 8002962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f9ca 	bl	8002d14 <I2C_MasterRequestWrite>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e08d      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a0:	e066      	b.n	8002a70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fb0c 	bl	8002fc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d107      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06b      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d11b      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0x188>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d017      	beq.n	8002a44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fafc 	bl	8003046 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d107      	bne.n	8002a6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e01a      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d194      	bne.n	80029a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	00100002 	.word	0x00100002
 8002ab4:	ffff0000 	.word	0xffff0000

08002ab8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fb3e 	bl	8002148 <HAL_GetTick>
 8002acc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 8110 	bne.w	8002d00 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4988      	ldr	r1, [pc, #544]	; (8002d0c <HAL_I2C_IsDeviceReady+0x254>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f994 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e103      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_I2C_IsDeviceReady+0x50>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0fc      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2224      	movs	r2, #36	; 0x24
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a70      	ldr	r2, [pc, #448]	; (8002d10 <HAL_I2C_IsDeviceReady+0x258>)
 8002b50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f952 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b88:	d103      	bne.n	8002b92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0b5      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	897a      	ldrh	r2, [r7, #10]
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ba2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ba4:	f7ff fad0 	bl	8002148 <HAL_GetTick>
 8002ba8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bd8:	e025      	b.n	8002c26 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7ff fab5 	bl	8002148 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d802      	bhi.n	8002bf0 <HAL_I2C_IsDeviceReady+0x138>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	22a0      	movs	r2, #160	; 0xa0
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002c30:	d005      	beq.n	8002c3e <HAL_I2C_IsDeviceReady+0x186>
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d102      	bne.n	8002c3e <HAL_I2C_IsDeviceReady+0x186>
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0cd      	beq.n	8002bda <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d129      	bne.n	8002ca8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2319      	movs	r3, #25
 8002c80:	2201      	movs	r2, #1
 8002c82:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_I2C_IsDeviceReady+0x254>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f8c7 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e036      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e02c      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2319      	movs	r3, #25
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4910      	ldr	r1, [pc, #64]	; (8002d0c <HAL_I2C_IsDeviceReady+0x254>)
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f8a3 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e012      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	f4ff af33 	bcc.w	8002b52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	00100002 	.word	0x00100002
 8002d10:	ffff0000 	.word	0xffff0000

08002d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d006      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d003      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00b      	b.n	8002d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d107      	bne.n	8002d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f84f 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8e:	d103      	bne.n	8002d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e034      	b.n	8002e06 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da4:	d107      	bne.n	8002db6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	897a      	ldrh	r2, [r7, #10]
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db2:	611a      	str	r2, [r3, #16]
 8002db4:	e01b      	b.n	8002dee <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	897a      	ldrh	r2, [r7, #10]
 8002dbc:	11d2      	asrs	r2, r2, #7
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f002 0206 	and.w	r2, r2, #6
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f062 020f 	orn	r2, r2, #15
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	490f      	ldr	r1, [pc, #60]	; (8002e10 <I2C_MasterRequestWrite+0xfc>)
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f876 	bl	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e010      	b.n	8002e06 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	897a      	ldrh	r2, [r7, #10]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <I2C_MasterRequestWrite+0x100>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f866 	bl	8002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	00010008 	.word	0x00010008
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e025      	b.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d021      	beq.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7ff f989 	bl	8002148 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad2      	subs	r2, r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d802      	bhi.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d116      	bne.n	8002e76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e023      	b.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10d      	bne.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	e00c      	b.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d0b6      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed4:	e051      	b.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee4:	d123      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002efe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e046      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d021      	beq.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff f907 	bl	8002148 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d802      	bhi.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e020      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e00b      	b.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d18d      	bne.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd0:	e02d      	b.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f878 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e02d      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d021      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff f8ad 	bl	8002148 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad2      	subs	r2, r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d802      	bhi.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d116      	bne.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e007      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d1ca      	bne.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003052:	e02d      	b.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f837 	bl	80030c8 <I2C_IsAcknowledgeFailed>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e02d      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d021      	beq.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306c:	f7ff f86c 	bl	8002148 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d802      	bhi.n	8003082 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d1ca      	bne.n	8003054 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d11b      	bne.n	8003118 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e26c      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8087 	beq.w	8003252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003144:	4b92      	ldr	r3, [pc, #584]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b04      	cmp	r3, #4
 800314e:	d00c      	beq.n	800316a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003150:	4b8f      	ldr	r3, [pc, #572]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d112      	bne.n	8003182 <HAL_RCC_OscConfig+0x5e>
 800315c:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003168:	d10b      	bne.n	8003182 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316a:	4b89      	ldr	r3, [pc, #548]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d06c      	beq.n	8003250 <HAL_RCC_OscConfig+0x12c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d168      	bne.n	8003250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e246      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x76>
 800318c:	4a80      	ldr	r2, [pc, #512]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800318e:	4b80      	ldr	r3, [pc, #512]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	6013      	str	r3, [r2, #0]
 8003198:	e02e      	b.n	80031f8 <HAL_RCC_OscConfig+0xd4>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x98>
 80031a2:	4a7b      	ldr	r2, [pc, #492]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	4b7a      	ldr	r3, [pc, #488]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4a78      	ldr	r2, [pc, #480]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	4b77      	ldr	r3, [pc, #476]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xd4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0xbc>
 80031c6:	4a72      	ldr	r2, [pc, #456]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	4b71      	ldr	r3, [pc, #452]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4a6f      	ldr	r2, [pc, #444]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	4b6e      	ldr	r3, [pc, #440]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xd4>
 80031e0:	4a6b      	ldr	r2, [pc, #428]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	4b6b      	ldr	r3, [pc, #428]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4a68      	ldr	r2, [pc, #416]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	4b68      	ldr	r3, [pc, #416]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe ffa2 	bl	8002148 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe ff9e 	bl	8002148 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1fa      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b5d      	ldr	r3, [pc, #372]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xe4>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe ff8e 	bl	8002148 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe ff8a 	bl	8002148 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1e6      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	4b53      	ldr	r3, [pc, #332]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x10c>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800325e:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800326a:	4b49      	ldr	r3, [pc, #292]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b08      	cmp	r3, #8
 8003274:	d11c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x18c>
 8003276:	4b46      	ldr	r3, [pc, #280]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	4b43      	ldr	r3, [pc, #268]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x176>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e1ba      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	493d      	ldr	r1, [pc, #244]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800329c:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	e03a      	b.n	8003326 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_OscConfig+0x270>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032be:	f7fe ff43 	bl	8002148 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe ff3f 	bl	8002148 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e19b      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	492a      	ldr	r1, [pc, #168]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCC_OscConfig+0x270>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe ff22 	bl	8002148 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003308:	f7fe ff1e 	bl	8002148 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e17a      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03a      	beq.n	80033a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d019      	beq.n	800336e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_RCC_OscConfig+0x274>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fe ff02 	bl	8002148 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003348:	f7fe fefe 	bl	8002148 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e15a      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCC_OscConfig+0x26c>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003366:	2001      	movs	r0, #1
 8003368:	f000 fada 	bl	8003920 <RCC_Delay>
 800336c:	e01c      	b.n	80033a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_RCC_OscConfig+0x274>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003374:	f7fe fee8 	bl	8002148 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337a:	e00f      	b.n	800339c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337c:	f7fe fee4 	bl	8002148 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d908      	bls.n	800339c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e140      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	42420000 	.word	0x42420000
 8003398:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	4b9e      	ldr	r3, [pc, #632]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e9      	bne.n	800337c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a6 	beq.w	8003502 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b97      	ldr	r3, [pc, #604]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	4a94      	ldr	r2, [pc, #592]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	4b93      	ldr	r3, [pc, #588]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	61d3      	str	r3, [r2, #28]
 80033d2:	4b91      	ldr	r3, [pc, #580]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	4b8e      	ldr	r3, [pc, #568]	; (800361c <HAL_RCC_OscConfig+0x4f8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d118      	bne.n	8003420 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ee:	4a8b      	ldr	r2, [pc, #556]	; (800361c <HAL_RCC_OscConfig+0x4f8>)
 80033f0:	4b8a      	ldr	r3, [pc, #552]	; (800361c <HAL_RCC_OscConfig+0x4f8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fe fea5 	bl	8002148 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003402:	f7fe fea1 	bl	8002148 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b64      	cmp	r3, #100	; 0x64
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0fd      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003414:	4b81      	ldr	r3, [pc, #516]	; (800361c <HAL_RCC_OscConfig+0x4f8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x312>
 8003428:	4a7b      	ldr	r2, [pc, #492]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800342a:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6213      	str	r3, [r2, #32]
 8003434:	e02d      	b.n	8003492 <HAL_RCC_OscConfig+0x36e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_RCC_OscConfig+0x334>
 800343e:	4a76      	ldr	r2, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	4b75      	ldr	r3, [pc, #468]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6213      	str	r3, [r2, #32]
 800344a:	4a73      	ldr	r2, [pc, #460]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	6213      	str	r3, [r2, #32]
 8003456:	e01c      	b.n	8003492 <HAL_RCC_OscConfig+0x36e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b05      	cmp	r3, #5
 800345e:	d10c      	bne.n	800347a <HAL_RCC_OscConfig+0x356>
 8003460:	4a6d      	ldr	r2, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f043 0304 	orr.w	r3, r3, #4
 800346a:	6213      	str	r3, [r2, #32]
 800346c:	4a6a      	ldr	r2, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800346e:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6213      	str	r3, [r2, #32]
 8003478:	e00b      	b.n	8003492 <HAL_RCC_OscConfig+0x36e>
 800347a:	4a67      	ldr	r2, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	4b66      	ldr	r3, [pc, #408]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6213      	str	r3, [r2, #32]
 8003486:	4a64      	ldr	r2, [pc, #400]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d015      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349a:	f7fe fe55 	bl	8002148 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fe51 	bl	8002148 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0ab      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	4b57      	ldr	r3, [pc, #348]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0ee      	beq.n	80034a2 <HAL_RCC_OscConfig+0x37e>
 80034c4:	e014      	b.n	80034f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c6:	f7fe fe3f 	bl	8002148 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe fe3b 	bl	8002148 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e095      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ee      	bne.n	80034ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003500:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8081 	beq.w	800360e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350c:	4b42      	ldr	r3, [pc, #264]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	2b08      	cmp	r3, #8
 8003516:	d061      	beq.n	80035dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d146      	bne.n	80035ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_OscConfig+0x4fc>)
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003526:	f7fe fe0f 	bl	8002148 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fe fe0b 	bl	8002148 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e067      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d108      	bne.n	8003568 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003556:	4930      	ldr	r1, [pc, #192]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 8003558:	4b2f      	ldr	r3, [pc, #188]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003568:	482b      	ldr	r0, [pc, #172]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a19      	ldr	r1, [r3, #32]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	430b      	orrs	r3, r1
 800357c:	4313      	orrs	r3, r2
 800357e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_RCC_OscConfig+0x4fc>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe fddf 	bl	8002148 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe fddb 	bl	8002148 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e037      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x46a>
 80035ac:	e02f      	b.n	800360e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <HAL_RCC_OscConfig+0x4fc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe fdc8 	bl	8002148 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fe fdc4 	bl	8002148 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e020      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x498>
 80035da:	e018      	b.n	800360e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e013      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	42420060 	.word	0x42420060

08003624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0d0      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003638:	4b6a      	ldr	r3, [pc, #424]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0207 	and.w	r2, r3, #7
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d210      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4967      	ldr	r1, [pc, #412]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	4b66      	ldr	r3, [pc, #408]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003656:	4b63      	ldr	r3, [pc, #396]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0207 	and.w	r2, r3, #7
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d001      	beq.n	8003668 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0b8      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d020      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003680:	4a59      	ldr	r2, [pc, #356]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800368a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003698:	4a53      	ldr	r2, [pc, #332]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a4:	4950      	ldr	r1, [pc, #320]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d040      	beq.n	8003744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d115      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e073      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	4b3d      	ldr	r3, [pc, #244]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06b      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003702:	4939      	ldr	r1, [pc, #228]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	4b38      	ldr	r3, [pc, #224]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 0203 	bic.w	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003714:	f7fe fd18 	bl	8002148 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	e00a      	b.n	8003732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fd14 	bl	8002148 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e053      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 020c 	and.w	r2, r3, #12
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	429a      	cmp	r2, r3
 8003742:	d1eb      	bne.n	800371c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0207 	and.w	r2, r3, #7
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4924      	ldr	r1, [pc, #144]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 0207 	bic.w	r2, r3, #7
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0207 	and.w	r2, r3, #7
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e032      	b.n	80037da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4919      	ldr	r1, [pc, #100]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800379e:	4912      	ldr	r1, [pc, #72]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b2:	f000 f821 	bl	80037f8 <HAL_RCC_GetSysClockFreq>
 80037b6:	4601      	mov	r1, r0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	5cd3      	ldrb	r3, [r2, r3]
 80037c6:	fa21 f303 	lsr.w	r3, r1, r3
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1cc>)
 80037cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCC_ClockConfig+0x1d0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fc76 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40021000 	.word	0x40021000
 80037ec:	08006568 	.word	0x08006568
 80037f0:	20000018 	.word	0x20000018
 80037f4:	2000001c 	.word	0x2000001c

080037f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f8:	b490      	push	{r4, r7}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037fe:	4b2a      	ldr	r3, [pc, #168]	; (80038a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003800:	1d3c      	adds	r4, r7, #4
 8003802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b04      	cmp	r3, #4
 8003830:	d002      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x40>
 8003832:	2b08      	cmp	r3, #8
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x46>
 8003836:	e02d      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003838:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800383a:	623b      	str	r3, [r7, #32]
      break;
 800383c:	e02d      	b.n	800389a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800384a:	4413      	add	r3, r2
 800384c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003850:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800385c:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c5b      	lsrs	r3, r3, #17
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800386a:	4413      	add	r3, r2
 800386c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003870:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003876:	fb02 f203 	mul.w	r2, r2, r3
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	e004      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	623b      	str	r3, [r7, #32]
      break;
 8003892:	e002      	b.n	800389a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003896:	623b      	str	r3, [r7, #32]
      break;
 8003898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389a:	6a3b      	ldr	r3, [r7, #32]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3728      	adds	r7, #40	; 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc90      	pop	{r4, r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	08003d40 	.word	0x08003d40
 80038ac:	08003d50 	.word	0x08003d50
 80038b0:	40021000 	.word	0x40021000
 80038b4:	007a1200 	.word	0x007a1200
 80038b8:	003d0900 	.word	0x003d0900

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b02      	ldr	r3, [pc, #8]	; (80038cc <HAL_RCC_GetHCLKFreq+0x10>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	20000018 	.word	0x20000018

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff2 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038d8:	4601      	mov	r1, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08006578 	.word	0x08006578

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffde 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003900:	4601      	mov	r1, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	0adb      	lsrs	r3, r3, #11
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4a03      	ldr	r2, [pc, #12]	; (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 800390e:	5cd3      	ldrb	r3, [r2, r3]
 8003910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	08006578 	.word	0x08006578

08003920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <RCC_Delay+0x34>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <RCC_Delay+0x38>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0a5b      	lsrs	r3, r3, #9
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800393c:	bf00      	nop
  }
  while (Delay --);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	60fa      	str	r2, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f9      	bne.n	800393c <RCC_Delay+0x1c>
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000018 	.word	0x20000018
 8003958:	10624dd3 	.word	0x10624dd3

0800395c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e075      	b.n	8003a5a <HAL_SPI_Init+0xfe>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d108      	bne.n	8003988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397e:	d009      	beq.n	8003994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
 8003986:	e005      	b.n	8003994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fe fa46 	bl	8001e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6852      	ldr	r2, [r2, #4]
 80039d4:	f402 7182 	and.w	r1, r2, #260	; 0x104
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80039e0:	4311      	orrs	r1, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039ea:	4311      	orrs	r1, r2
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6912      	ldr	r2, [r2, #16]
 80039f0:	f002 0202 	and.w	r2, r2, #2
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6952      	ldr	r2, [r2, #20]
 80039fa:	f002 0201 	and.w	r2, r2, #1
 80039fe:	4311      	orrs	r1, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6992      	ldr	r2, [r2, #24]
 8003a04:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003a08:	4311      	orrs	r1, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	69d2      	ldr	r2, [r2, #28]
 8003a0e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6a12      	ldr	r2, [r2, #32]
 8003a18:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003a1c:	4311      	orrs	r1, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6992      	ldr	r2, [r2, #24]
 8003a32:	0c12      	lsrs	r2, r2, #16
 8003a34:	f002 0204 	and.w	r2, r2, #4
 8003a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	69d2      	ldr	r2, [r2, #28]
 8003a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e03f      	b.n	8003af4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fe fac7 	bl	800201c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2224      	movs	r2, #36	; 0x24
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	68d2      	ldr	r2, [r2, #12]
 8003aa0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f828 	bl	8003afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	6912      	ldr	r2, [r2, #16]
 8003ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	6952      	ldr	r2, [r2, #20]
 8003ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	68d2      	ldr	r2, [r2, #12]
 8003ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ada:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	6912      	ldr	r2, [r2, #16]
 8003b0e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b3a:	f023 030c 	bic.w	r3, r3, #12
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	6952      	ldr	r2, [r2, #20]
 8003b4e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6992      	ldr	r2, [r2, #24]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <UART_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d103      	bne.n	8003b6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b64:	f7ff fec8 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	e002      	b.n	8003b72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7ff feb0 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8003b70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6819      	ldr	r1, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009a      	lsls	r2, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	4a21      	ldr	r2, [pc, #132]	; (8003c14 <UART_SetConfig+0x118>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	0118      	lsls	r0, r3, #4
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009a      	lsls	r2, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <UART_SetConfig+0x118>)
 8003bae:	fba3 4302 	umull	r4, r3, r3, r2
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2464      	movs	r4, #100	; 0x64
 8003bb6:	fb04 f303 	mul.w	r3, r4, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	3332      	adds	r3, #50	; 0x32
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <UART_SetConfig+0x118>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bcc:	4418      	add	r0, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009a      	lsls	r2, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <UART_SetConfig+0x118>)
 8003be6:	fba3 4302 	umull	r4, r3, r3, r2
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2464      	movs	r4, #100	; 0x64
 8003bee:	fb04 f303 	mul.w	r3, r4, r3
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	3332      	adds	r3, #50	; 0x32
 8003bf8:	4a06      	ldr	r2, [pc, #24]	; (8003c14 <UART_SetConfig+0x118>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	4403      	add	r3, r0
 8003c06:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	40013800 	.word	0x40013800
 8003c14:	51eb851f 	.word	0x51eb851f

08003c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c18:	480c      	ldr	r0, [pc, #48]	; (8003c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c1a:	490d      	ldr	r1, [pc, #52]	; (8003c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c20:	e002      	b.n	8003c28 <LoopCopyDataInit>

08003c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c26:	3304      	adds	r3, #4

08003c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c2c:	d3f9      	bcc.n	8003c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c30:	4c0a      	ldr	r4, [pc, #40]	; (8003c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c34:	e001      	b.n	8003c3a <LoopFillZerobss>

08003c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c38:	3204      	adds	r2, #4

08003c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c3c:	d3fb      	bcc.n	8003c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c3e:	f7fe f9b9 	bl	8001fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c42:	f000 f80f 	bl	8003c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c46:	f7fd f869 	bl	8000d1c <main>
  bx lr
 8003c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8003c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c50:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003c54:	08006588 	.word	0x08006588
  ldr r2, =_sbss
 8003c58:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003c5c:	200005a8 	.word	0x200005a8

08003c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c60:	e7fe      	b.n	8003c60 <ADC1_2_IRQHandler>
	...

08003c64 <__libc_init_array>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2500      	movs	r5, #0
 8003c68:	4e0c      	ldr	r6, [pc, #48]	; (8003c9c <__libc_init_array+0x38>)
 8003c6a:	4c0d      	ldr	r4, [pc, #52]	; (8003ca0 <__libc_init_array+0x3c>)
 8003c6c:	1ba4      	subs	r4, r4, r6
 8003c6e:	10a4      	asrs	r4, r4, #2
 8003c70:	42a5      	cmp	r5, r4
 8003c72:	d109      	bne.n	8003c88 <__libc_init_array+0x24>
 8003c74:	f000 f822 	bl	8003cbc <_init>
 8003c78:	2500      	movs	r5, #0
 8003c7a:	4e0a      	ldr	r6, [pc, #40]	; (8003ca4 <__libc_init_array+0x40>)
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ca8 <__libc_init_array+0x44>)
 8003c7e:	1ba4      	subs	r4, r4, r6
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	42a5      	cmp	r5, r4
 8003c84:	d105      	bne.n	8003c92 <__libc_init_array+0x2e>
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
 8003c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c8c:	4798      	blx	r3
 8003c8e:	3501      	adds	r5, #1
 8003c90:	e7ee      	b.n	8003c70 <__libc_init_array+0xc>
 8003c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c96:	4798      	blx	r3
 8003c98:	3501      	adds	r5, #1
 8003c9a:	e7f2      	b.n	8003c82 <__libc_init_array+0x1e>
 8003c9c:	08006580 	.word	0x08006580
 8003ca0:	08006580 	.word	0x08006580
 8003ca4:	08006580 	.word	0x08006580
 8003ca8:	08006584 	.word	0x08006584

08003cac <memset>:
 8003cac:	4603      	mov	r3, r0
 8003cae:	4402      	add	r2, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
