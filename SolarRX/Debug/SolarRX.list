
SolarRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08004110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000057c  20000078  08004188  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005f4  08004188  000205f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000db8c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020d5  00000000  00000000  0002dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cc0  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006415  00000000  00000000  000315c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000383a  00000000  00000000  000379dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003b217  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003760  00000000  00000000  0003b294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080032d0 	.word	0x080032d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080032d0 	.word	0x080032d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800015c:	b480      	push	{r7}
 800015e:	b089      	sub	sp, #36	; 0x24
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000162:	4a14      	ldr	r2, [pc, #80]	; (80001b4 <MX_GPIO_Init+0x58>)
 8000164:	4b13      	ldr	r3, [pc, #76]	; (80001b4 <MX_GPIO_Init+0x58>)
 8000166:	699b      	ldr	r3, [r3, #24]
 8000168:	f043 0320 	orr.w	r3, r3, #32
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <MX_GPIO_Init+0x58>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0320 	and.w	r3, r3, #32
 8000176:	60fb      	str	r3, [r7, #12]
 8000178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800017a:	4a0e      	ldr	r2, [pc, #56]	; (80001b4 <MX_GPIO_Init+0x58>)
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <MX_GPIO_Init+0x58>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]
 8000186:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <MX_GPIO_Init+0x58>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0304 	and.w	r3, r3, #4
 800018e:	60bb      	str	r3, [r7, #8]
 8000190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000192:	4a08      	ldr	r2, [pc, #32]	; (80001b4 <MX_GPIO_Init+0x58>)
 8000194:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <MX_GPIO_Init+0x58>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f043 0308 	orr.w	r3, r3, #8
 800019c:	6193      	str	r3, [r2, #24]
 800019e:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <MX_GPIO_Init+0x58>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f003 0308 	and.w	r3, r3, #8
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

}
 80001aa:	bf00      	nop
 80001ac:	3724      	adds	r7, #36	; 0x24
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	40021000 	.word	0x40021000

080001b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80001bc:	4b13      	ldr	r3, [pc, #76]	; (800020c <MX_I2C1_Init+0x54>)
 80001be:	4a14      	ldr	r2, [pc, #80]	; (8000210 <MX_I2C1_Init+0x58>)
 80001c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80001c2:	4b12      	ldr	r3, [pc, #72]	; (800020c <MX_I2C1_Init+0x54>)
 80001c4:	4a13      	ldr	r2, [pc, #76]	; (8000214 <MX_I2C1_Init+0x5c>)
 80001c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001c8:	4b10      	ldr	r3, [pc, #64]	; (800020c <MX_I2C1_Init+0x54>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <MX_I2C1_Init+0x54>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <MX_I2C1_Init+0x54>)
 80001d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <MX_I2C1_Init+0x54>)
 80001de:	2200      	movs	r2, #0
 80001e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001e2:	4b0a      	ldr	r3, [pc, #40]	; (800020c <MX_I2C1_Init+0x54>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <MX_I2C1_Init+0x54>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001ee:	4b07      	ldr	r3, [pc, #28]	; (800020c <MX_I2C1_Init+0x54>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <MX_I2C1_Init+0x54>)
 80001f6:	f001 f8eb 	bl	80013d0 <HAL_I2C_Init>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d003      	beq.n	8000208 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 8000200:	214b      	movs	r1, #75	; 0x4b
 8000202:	4805      	ldr	r0, [pc, #20]	; (8000218 <MX_I2C1_Init+0x60>)
 8000204:	f000 f932 	bl	800046c <_Error_Handler>
  }

}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200004a8 	.word	0x200004a8
 8000210:	40005400 	.word	0x40005400
 8000214:	00061a80 	.word	0x00061a80
 8000218:	080032e8 	.word	0x080032e8

0800021c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <MX_I2C2_Init+0x54>)
 8000222:	4a14      	ldr	r2, [pc, #80]	; (8000274 <MX_I2C2_Init+0x58>)
 8000224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_I2C2_Init+0x54>)
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <MX_I2C2_Init+0x5c>)
 800022a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800022c:	4b10      	ldr	r3, [pc, #64]	; (8000270 <MX_I2C2_Init+0x54>)
 800022e:	2200      	movs	r2, #0
 8000230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_I2C2_Init+0x54>)
 8000234:	2200      	movs	r2, #0
 8000236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <MX_I2C2_Init+0x54>)
 800023a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <MX_I2C2_Init+0x54>)
 8000242:	2200      	movs	r2, #0
 8000244:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <MX_I2C2_Init+0x54>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <MX_I2C2_Init+0x54>)
 800024e:	2200      	movs	r2, #0
 8000250:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <MX_I2C2_Init+0x54>)
 8000254:	2200      	movs	r2, #0
 8000256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <MX_I2C2_Init+0x54>)
 800025a:	f001 f8b9 	bl	80013d0 <HAL_I2C_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d003      	beq.n	800026c <MX_I2C2_Init+0x50>
  {
    Error_Handler();
 8000264:	2163      	movs	r1, #99	; 0x63
 8000266:	4805      	ldr	r0, [pc, #20]	; (800027c <MX_I2C2_Init+0x60>)
 8000268:	f000 f900 	bl	800046c <_Error_Handler>
  }

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200004fc 	.word	0x200004fc
 8000274:	40005800 	.word	0x40005800
 8000278:	00061a80 	.word	0x00061a80
 800027c:	080032e8 	.word	0x080032e8

08000280 <sendDebug>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
 8000280:	b40f      	push	{r0, r1, r2, r3}
 8000282:	b580      	push	{r7, lr}
 8000284:	b0a2      	sub	sp, #136	; 0x88
 8000286:	af00      	add	r7, sp, #0
void sendDebug(char* format,...)
{
	char sendBuf[128];
	va_list args;
 8000288:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800028c:	607b      	str	r3, [r7, #4]
	/* initialize valist for num number of arguments */
 800028e:	f107 0008 	add.w	r0, r7, #8
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000298:	217f      	movs	r1, #127	; 0x7f
 800029a:	f002 fc03 	bl	8002aa4 <vsniprintf>
	va_start(args, format);
	vsnprintf(sendBuf,sizeof(sendBuf) - 1, format, args);
	/* clean memory reserved for valist */
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ff52 	bl	800014c <strlen>
 80002a8:	4603      	mov	r3, r0
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	f107 0308 	add.w	r3, r7, #8
 80002b0:	4619      	mov	r1, r3
 80002b2:	4805      	ldr	r0, [pc, #20]	; (80002c8 <sendDebug+0x48>)
 80002b4:	f000 fdaf 	bl	8000e16 <USARTWriteBuffer>
	va_end(args);
 80002b8:	bf00      	nop
 80002ba:	3788      	adds	r7, #136	; 0x88
 80002bc:	46bd      	mov	sp, r7
 80002be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002c2:	b004      	add	sp, #16
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40004400 	.word	0x40004400

080002cc <main>:
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

 80002d0:	f000 fdbe 	bl	8000e50 <HAL_Init>
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

 80002d4:	f000 f844 	bl	8000360 <SystemClock_Config>
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

 80002d8:	f7ff ff40 	bl	800015c <MX_GPIO_Init>
  /* Initialize all configured peripherals */
 80002dc:	f7ff ff6c 	bl	80001b8 <MX_I2C1_Init>
  MX_GPIO_Init();
 80002e0:	f7ff ff9c 	bl	800021c <MX_I2C2_Init>
  MX_I2C1_Init();
  MX_I2C2_Init();

 80002e4:	f000 f888 	bl	80003f8 <MX_SPI1_Init>
#ifdef USE_SPI1
  MX_SPI1_Init();
#else
  MX_SPI2_Init();
#endif
 80002e8:	f000 fd14 	bl	8000d14 <MX_USART2_UART_Init>

  MX_USART2_UART_Init();

 80002ec:	f000 f932 	bl	8000554 <SSD1306_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80002f0:	2100      	movs	r1, #0
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 fa96 	bl	8000824 <SSD1306_GotoXY>

 80002f8:	2201      	movs	r2, #1
 80002fa:	4915      	ldr	r1, [pc, #84]	; (8000350 <main+0x84>)
 80002fc:	4815      	ldr	r0, [pc, #84]	; (8000354 <main+0x88>)
 80002fe:	f000 fb27 	bl	8000950 <SSD1306_Puts>
  SSD1306_GotoXY(0, 0);
 8000302:	211e      	movs	r1, #30
 8000304:	200a      	movs	r0, #10
 8000306:	f000 fa8d 	bl	8000824 <SSD1306_GotoXY>
  SSD1306_Puts("HELLO", &Font_11x18, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	4910      	ldr	r1, [pc, #64]	; (8000350 <main+0x84>)
 800030e:	4812      	ldr	r0, [pc, #72]	; (8000358 <main+0x8c>)
 8000310:	f000 fb1e 	bl	8000950 <SSD1306_Puts>
  SSD1306_GotoXY(10, 30);
 8000314:	f000 f9e2 	bl	80006dc <SSD1306_UpdateScreen>
  SSD1306_Puts("  WORLD :)", &Font_11x18, 1);
 8000318:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800031c:	f000 fdfa 	bl	8000f14 <HAL_Delay>
  SSD1306_UpdateScreen();
  HAL_Delay(2000);
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1)
 8000320:	210f      	movs	r1, #15
 8000322:	2000      	movs	r0, #0
 8000324:	f000 f8a9 	bl	800047a <SSD1306_ScrollRight>
  {
 8000328:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800032c:	f000 fdf2 	bl	8000f14 <HAL_Delay>
	SSD1306_ScrollRight(0x00, 0x0f);
	HAL_Delay(2000);
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <main+0x90>)
 8000332:	f7ff ffa5 	bl	8000280 <sendDebug>

	DEBUG("Received data:\r\n");
 8000336:	210f      	movs	r1, #15
 8000338:	2000      	movs	r0, #0
 800033a:	f000 f8d4 	bl	80004e6 <SSD1306_ScrollLeft>

 800033e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000342:	f000 fde7 	bl	8000f14 <HAL_Delay>
	SSD1306_ScrollLeft(0x00, 0x0f);
	HAL_Delay(2000);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <main+0x90>)
 8000348:	f7ff ff9a 	bl	8000280 <sendDebug>
  while (1)
 800034c:	e7e8      	b.n	8000320 <main+0x54>
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	080032fc 	.word	0x080032fc
 8000358:	08003304 	.word	0x08003304
 800035c:	08003310 	.word	0x08003310

08000360 <SystemClock_Config>:
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
 8000360:	b580      	push	{r7, lr}
 8000362:	b090      	sub	sp, #64	; 0x40
 8000364:	af00      	add	r7, sp, #0
void SystemClock_Config(void)
 8000366:	f107 0318 	add.w	r3, r7, #24
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fb64 	bl	8002a3c <memset>
{
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  */
 8000386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000390:	2301      	movs	r3, #1
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000394:	2302      	movs	r3, #2
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fd7d 	bl	8001ea8 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d003      	beq.n	80003bc <SystemClock_Config+0x5c>
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	21a2      	movs	r1, #162	; 0xa2
 80003b6:	480f      	ldr	r0, [pc, #60]	; (80003f4 <SystemClock_Config+0x94>)
 80003b8:	f000 f858 	bl	800046c <_Error_Handler>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
  /** Initializes the CPU, AHB and APB buses clocks
 80003bc:	230f      	movs	r3, #15
 80003be:	607b      	str	r3, [r7, #4]
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	2302      	movs	r3, #2
 80003c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 ffe6 	bl	80023a8 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <SystemClock_Config+0x8a>

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e2:	21af      	movs	r1, #175	; 0xaf
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <SystemClock_Config+0x94>)
 80003e6:	f000 f841 	bl	800046c <_Error_Handler>
  {
    _Error_Handler(__FILE__, __LINE__);
 80003ea:	bf00      	nop
 80003ec:	3740      	adds	r7, #64	; 0x40
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	08003324 	.word	0x08003324

080003f8 <MX_SPI1_Init>:

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
static void MX_SPI1_Init(void)
{

 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_SPI1_Init+0x68>)
 80003fe:	4a19      	ldr	r2, [pc, #100]	; (8000464 <MX_SPI1_Init+0x6c>)
 8000400:	601a      	str	r2, [r3, #0]
  /* SPI1 parameter configuration*/
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_SPI1_Init+0x68>)
 8000404:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000408:	605a      	str	r2, [r3, #4]
  hspi1.Instance = SPI1;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <MX_SPI1_Init+0x68>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_SPI1_Init+0x68>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <MX_SPI1_Init+0x68>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b10      	ldr	r3, [pc, #64]	; (8000460 <MX_SPI1_Init+0x68>)
 800041e:	2200      	movs	r2, #0
 8000420:	615a      	str	r2, [r3, #20]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_SPI1_Init+0x68>)
 8000424:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000428:	619a      	str	r2, [r3, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <MX_SPI1_Init+0x68>)
 800042c:	2220      	movs	r2, #32
 800042e:	61da      	str	r2, [r3, #28]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_SPI1_Init+0x68>)
 8000432:	2200      	movs	r2, #0
 8000434:	621a      	str	r2, [r3, #32]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <MX_SPI1_Init+0x68>)
 8000438:	2200      	movs	r2, #0
 800043a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_SPI1_Init+0x68>)
 800043e:	2200      	movs	r2, #0
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <MX_SPI1_Init+0x68>)
 8000444:	220a      	movs	r2, #10
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000448:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_SPI1_Init+0x68>)
 800044a:	f002 f949 	bl	80026e0 <HAL_SPI_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d003      	beq.n	800045c <MX_SPI1_Init+0x64>
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000454:	21ca      	movs	r1, #202	; 0xca
 8000456:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_SPI1_Init+0x70>)
 8000458:	f000 f808 	bl	800046c <_Error_Handler>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000550 	.word	0x20000550
 8000464:	40013000 	.word	0x40013000
 8000468:	08003324 	.word	0x08003324

0800046c <_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000476:	b672      	cpsid	i
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 8000478:	e7fe      	b.n	8000478 <_Error_Handler+0xc>

0800047a <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	4603      	mov	r3, r0
 8000482:	460a      	mov	r2, r1
 8000484:	71fb      	strb	r3, [r7, #7]
 8000486:	4613      	mov	r3, r2
 8000488:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800048a:	2226      	movs	r2, #38	; 0x26
 800048c:	2100      	movs	r1, #0
 800048e:	2078      	movs	r0, #120	; 0x78
 8000490:	f000 fae0 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000494:	2200      	movs	r2, #0
 8000496:	2100      	movs	r1, #0
 8000498:	2078      	movs	r0, #120	; 0x78
 800049a:	f000 fadb 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	461a      	mov	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	2078      	movs	r0, #120	; 0x78
 80004a6:	f000 fad5 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80004aa:	2200      	movs	r2, #0
 80004ac:	2100      	movs	r1, #0
 80004ae:	2078      	movs	r0, #120	; 0x78
 80004b0:	f000 fad0 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	461a      	mov	r2, r3
 80004b8:	2100      	movs	r1, #0
 80004ba:	2078      	movs	r0, #120	; 0x78
 80004bc:	f000 faca 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80004c0:	2200      	movs	r2, #0
 80004c2:	2100      	movs	r1, #0
 80004c4:	2078      	movs	r0, #120	; 0x78
 80004c6:	f000 fac5 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80004ca:	22ff      	movs	r2, #255	; 0xff
 80004cc:	2100      	movs	r1, #0
 80004ce:	2078      	movs	r0, #120	; 0x78
 80004d0:	f000 fac0 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80004d4:	222f      	movs	r2, #47	; 0x2f
 80004d6:	2100      	movs	r1, #0
 80004d8:	2078      	movs	r0, #120	; 0x78
 80004da:	f000 fabb 	bl	8000a54 <ssd1306_I2C_Write>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4603      	mov	r3, r0
 80004ee:	460a      	mov	r2, r1
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	4613      	mov	r3, r2
 80004f4:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80004f6:	2227      	movs	r2, #39	; 0x27
 80004f8:	2100      	movs	r1, #0
 80004fa:	2078      	movs	r0, #120	; 0x78
 80004fc:	f000 faaa 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2078      	movs	r0, #120	; 0x78
 8000506:	f000 faa5 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	461a      	mov	r2, r3
 800050e:	2100      	movs	r1, #0
 8000510:	2078      	movs	r0, #120	; 0x78
 8000512:	f000 fa9f 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	2078      	movs	r0, #120	; 0x78
 800051c:	f000 fa9a 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	461a      	mov	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	2078      	movs	r0, #120	; 0x78
 8000528:	f000 fa94 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2078      	movs	r0, #120	; 0x78
 8000532:	f000 fa8f 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000536:	22ff      	movs	r2, #255	; 0xff
 8000538:	2100      	movs	r1, #0
 800053a:	2078      	movs	r0, #120	; 0x78
 800053c:	f000 fa8a 	bl	8000a54 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000540:	222f      	movs	r2, #47	; 0x2f
 8000542:	2100      	movs	r1, #0
 8000544:	2078      	movs	r0, #120	; 0x78
 8000546:	f000 fa85 	bl	8000a54 <ssd1306_I2C_Write>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800055a:	f000 fa1f 	bl	800099c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800055e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000562:	2201      	movs	r2, #1
 8000564:	2178      	movs	r1, #120	; 0x78
 8000566:	485b      	ldr	r0, [pc, #364]	; (80006d4 <SSD1306_Init+0x180>)
 8000568:	f001 f968 	bl	800183c <HAL_I2C_IsDeviceReady>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000572:	2300      	movs	r3, #0
 8000574:	e0a9      	b.n	80006ca <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000576:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800057a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800057c:	e002      	b.n	8000584 <SSD1306_Init+0x30>
		p--;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3b01      	subs	r3, #1
 8000582:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f9      	bne.n	800057e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800058a:	22ae      	movs	r2, #174	; 0xae
 800058c:	2100      	movs	r1, #0
 800058e:	2078      	movs	r0, #120	; 0x78
 8000590:	f000 fa60 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000594:	2220      	movs	r2, #32
 8000596:	2100      	movs	r1, #0
 8000598:	2078      	movs	r0, #120	; 0x78
 800059a:	f000 fa5b 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800059e:	2210      	movs	r2, #16
 80005a0:	2100      	movs	r1, #0
 80005a2:	2078      	movs	r0, #120	; 0x78
 80005a4:	f000 fa56 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80005a8:	22b0      	movs	r2, #176	; 0xb0
 80005aa:	2100      	movs	r1, #0
 80005ac:	2078      	movs	r0, #120	; 0x78
 80005ae:	f000 fa51 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80005b2:	22c8      	movs	r2, #200	; 0xc8
 80005b4:	2100      	movs	r1, #0
 80005b6:	2078      	movs	r0, #120	; 0x78
 80005b8:	f000 fa4c 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2078      	movs	r0, #120	; 0x78
 80005c2:	f000 fa47 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80005c6:	2210      	movs	r2, #16
 80005c8:	2100      	movs	r1, #0
 80005ca:	2078      	movs	r0, #120	; 0x78
 80005cc:	f000 fa42 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80005d0:	2240      	movs	r2, #64	; 0x40
 80005d2:	2100      	movs	r1, #0
 80005d4:	2078      	movs	r0, #120	; 0x78
 80005d6:	f000 fa3d 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80005da:	2281      	movs	r2, #129	; 0x81
 80005dc:	2100      	movs	r1, #0
 80005de:	2078      	movs	r0, #120	; 0x78
 80005e0:	f000 fa38 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80005e4:	22ff      	movs	r2, #255	; 0xff
 80005e6:	2100      	movs	r1, #0
 80005e8:	2078      	movs	r0, #120	; 0x78
 80005ea:	f000 fa33 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80005ee:	22a1      	movs	r2, #161	; 0xa1
 80005f0:	2100      	movs	r1, #0
 80005f2:	2078      	movs	r0, #120	; 0x78
 80005f4:	f000 fa2e 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80005f8:	22a6      	movs	r2, #166	; 0xa6
 80005fa:	2100      	movs	r1, #0
 80005fc:	2078      	movs	r0, #120	; 0x78
 80005fe:	f000 fa29 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000602:	22a8      	movs	r2, #168	; 0xa8
 8000604:	2100      	movs	r1, #0
 8000606:	2078      	movs	r0, #120	; 0x78
 8000608:	f000 fa24 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800060c:	223f      	movs	r2, #63	; 0x3f
 800060e:	2100      	movs	r1, #0
 8000610:	2078      	movs	r0, #120	; 0x78
 8000612:	f000 fa1f 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000616:	22a4      	movs	r2, #164	; 0xa4
 8000618:	2100      	movs	r1, #0
 800061a:	2078      	movs	r0, #120	; 0x78
 800061c:	f000 fa1a 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000620:	22d3      	movs	r2, #211	; 0xd3
 8000622:	2100      	movs	r1, #0
 8000624:	2078      	movs	r0, #120	; 0x78
 8000626:	f000 fa15 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2078      	movs	r0, #120	; 0x78
 8000630:	f000 fa10 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000634:	22d5      	movs	r2, #213	; 0xd5
 8000636:	2100      	movs	r1, #0
 8000638:	2078      	movs	r0, #120	; 0x78
 800063a:	f000 fa0b 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800063e:	22f0      	movs	r2, #240	; 0xf0
 8000640:	2100      	movs	r1, #0
 8000642:	2078      	movs	r0, #120	; 0x78
 8000644:	f000 fa06 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000648:	22d9      	movs	r2, #217	; 0xd9
 800064a:	2100      	movs	r1, #0
 800064c:	2078      	movs	r0, #120	; 0x78
 800064e:	f000 fa01 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000652:	2222      	movs	r2, #34	; 0x22
 8000654:	2100      	movs	r1, #0
 8000656:	2078      	movs	r0, #120	; 0x78
 8000658:	f000 f9fc 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800065c:	22da      	movs	r2, #218	; 0xda
 800065e:	2100      	movs	r1, #0
 8000660:	2078      	movs	r0, #120	; 0x78
 8000662:	f000 f9f7 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000666:	2212      	movs	r2, #18
 8000668:	2100      	movs	r1, #0
 800066a:	2078      	movs	r0, #120	; 0x78
 800066c:	f000 f9f2 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000670:	22db      	movs	r2, #219	; 0xdb
 8000672:	2100      	movs	r1, #0
 8000674:	2078      	movs	r0, #120	; 0x78
 8000676:	f000 f9ed 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	2078      	movs	r0, #120	; 0x78
 8000680:	f000 f9e8 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000684:	228d      	movs	r2, #141	; 0x8d
 8000686:	2100      	movs	r1, #0
 8000688:	2078      	movs	r0, #120	; 0x78
 800068a:	f000 f9e3 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800068e:	2214      	movs	r2, #20
 8000690:	2100      	movs	r1, #0
 8000692:	2078      	movs	r0, #120	; 0x78
 8000694:	f000 f9de 	bl	8000a54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000698:	22af      	movs	r2, #175	; 0xaf
 800069a:	2100      	movs	r1, #0
 800069c:	2078      	movs	r0, #120	; 0x78
 800069e:	f000 f9d9 	bl	8000a54 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80006a2:	222e      	movs	r2, #46	; 0x2e
 80006a4:	2100      	movs	r1, #0
 80006a6:	2078      	movs	r0, #120	; 0x78
 80006a8:	f000 f9d4 	bl	8000a54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f843 	bl	8000738 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80006b2:	f000 f813 	bl	80006dc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <SSD1306_Init+0x184>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <SSD1306_Init+0x184>)
 80006be:	2200      	movs	r2, #0
 80006c0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <SSD1306_Init+0x184>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80006c8:	2301      	movs	r3, #1
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200004a8 	.word	0x200004a8
 80006d8:	20000494 	.word	0x20000494

080006dc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	e01d      	b.n	8000724 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3b50      	subs	r3, #80	; 0x50
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	461a      	mov	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 f9ae 	bl	8000a54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2078      	movs	r0, #120	; 0x78
 80006fe:	f000 f9a9 	bl	8000a54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000702:	2210      	movs	r2, #16
 8000704:	2100      	movs	r1, #0
 8000706:	2078      	movs	r0, #120	; 0x78
 8000708:	f000 f9a4 	bl	8000a54 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	01db      	lsls	r3, r3, #7
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <SSD1306_UpdateScreen+0x58>)
 8000712:	441a      	add	r2, r3
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	2078      	movs	r0, #120	; 0x78
 800071a:	f000 f953 	bl	80009c4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	3301      	adds	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b07      	cmp	r3, #7
 8000728:	d9de      	bls.n	80006e8 <SSD1306_UpdateScreen+0xc>
	}
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000094 	.word	0x20000094

08000738 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <SSD1306_Fill+0x14>
 8000748:	2300      	movs	r3, #0
 800074a:	e000      	b.n	800074e <SSD1306_Fill+0x16>
 800074c:	23ff      	movs	r3, #255	; 0xff
 800074e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000752:	4619      	mov	r1, r3
 8000754:	4803      	ldr	r0, [pc, #12]	; (8000764 <SSD1306_Fill+0x2c>)
 8000756:	f002 f971 	bl	8002a3c <memset>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000094 	.word	0x20000094

08000768 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
 8000772:	460b      	mov	r3, r1
 8000774:	80bb      	strh	r3, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	70fb      	strb	r3, [r7, #3]
	if (
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	2b7f      	cmp	r3, #127	; 0x7f
 800077e:	d848      	bhi.n	8000812 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000780:	88bb      	ldrh	r3, [r7, #4]
 8000782:	2b3f      	cmp	r3, #63	; 0x3f
 8000784:	d845      	bhi.n	8000812 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <SSD1306_DrawPixel+0xb4>)
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf0c      	ite	eq
 8000794:	2301      	moveq	r3, #1
 8000796:	2300      	movne	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d11a      	bne.n	80007d8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007a2:	88fa      	ldrh	r2, [r7, #6]
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	b298      	uxth	r0, r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	4413      	add	r3, r2
 80007b0:	88f9      	ldrh	r1, [r7, #6]
 80007b2:	4602      	mov	r2, r0
 80007b4:	01d2      	lsls	r2, r2, #7
 80007b6:	440a      	add	r2, r1
 80007b8:	4919      	ldr	r1, [pc, #100]	; (8000820 <SSD1306_DrawPixel+0xb8>)
 80007ba:	5c8a      	ldrb	r2, [r1, r2]
 80007bc:	b251      	sxtb	r1, r2
 80007be:	88ba      	ldrh	r2, [r7, #4]
 80007c0:	f002 0207 	and.w	r2, r2, #7
 80007c4:	2001      	movs	r0, #1
 80007c6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ca:	b252      	sxtb	r2, r2
 80007cc:	430a      	orrs	r2, r1
 80007ce:	b252      	sxtb	r2, r2
 80007d0:	b2d1      	uxtb	r1, r2
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <SSD1306_DrawPixel+0xb8>)
 80007d4:	54d1      	strb	r1, [r2, r3]
 80007d6:	e01d      	b.n	8000814 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80007d8:	88fa      	ldrh	r2, [r7, #6]
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	b298      	uxth	r0, r3
 80007e0:	4603      	mov	r3, r0
 80007e2:	01db      	lsls	r3, r3, #7
 80007e4:	4413      	add	r3, r2
 80007e6:	88f9      	ldrh	r1, [r7, #6]
 80007e8:	4602      	mov	r2, r0
 80007ea:	01d2      	lsls	r2, r2, #7
 80007ec:	440a      	add	r2, r1
 80007ee:	490c      	ldr	r1, [pc, #48]	; (8000820 <SSD1306_DrawPixel+0xb8>)
 80007f0:	5c8a      	ldrb	r2, [r1, r2]
 80007f2:	b251      	sxtb	r1, r2
 80007f4:	88ba      	ldrh	r2, [r7, #4]
 80007f6:	f002 0207 	and.w	r2, r2, #7
 80007fa:	2001      	movs	r0, #1
 80007fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000800:	b252      	sxtb	r2, r2
 8000802:	43d2      	mvns	r2, r2
 8000804:	b252      	sxtb	r2, r2
 8000806:	400a      	ands	r2, r1
 8000808:	b252      	sxtb	r2, r2
 800080a:	b2d1      	uxtb	r1, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <SSD1306_DrawPixel+0xb8>)
 800080e:	54d1      	strb	r1, [r2, r3]
 8000810:	e000      	b.n	8000814 <SSD1306_DrawPixel+0xac>
		return;
 8000812:	bf00      	nop
	}
}
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	20000494 	.word	0x20000494
 8000820:	20000094 	.word	0x20000094

08000824 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000834:	4a05      	ldr	r2, [pc, #20]	; (800084c <SSD1306_GotoXY+0x28>)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <SSD1306_GotoXY+0x28>)
 800083c:	88bb      	ldrh	r3, [r7, #4]
 800083e:	8053      	strh	r3, [r2, #2]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000494 	.word	0x20000494

08000850 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000860:	4b3a      	ldr	r3, [pc, #232]	; (800094c <SSD1306_Putc+0xfc>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4413      	add	r3, r2
	if (
 800086c:	2b7f      	cmp	r3, #127	; 0x7f
 800086e:	dc07      	bgt.n	8000880 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <SSD1306_Putc+0xfc>)
 8000872:	885b      	ldrh	r3, [r3, #2]
 8000874:	461a      	mov	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800087c:	2b3f      	cmp	r3, #63	; 0x3f
 800087e:	dd01      	ble.n	8000884 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000880:	2300      	movs	r3, #0
 8000882:	e05e      	b.n	8000942 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e04b      	b.n	8000922 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3b20      	subs	r3, #32
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	7849      	ldrb	r1, [r1, #1]
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4619      	mov	r1, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	440b      	add	r3, r1
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	e030      	b.n	8000910 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d010      	beq.n	80008e0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <SSD1306_Putc+0xfc>)
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4413      	add	r3, r2
 80008c8:	b298      	uxth	r0, r3
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <SSD1306_Putc+0xfc>)
 80008cc:	885a      	ldrh	r2, [r3, #2]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	4619      	mov	r1, r3
 80008da:	f7ff ff45 	bl	8000768 <SSD1306_DrawPixel>
 80008de:	e014      	b.n	800090a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <SSD1306_Putc+0xfc>)
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b298      	uxth	r0, r3
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <SSD1306_Putc+0xfc>)
 80008ee:	885a      	ldrh	r2, [r3, #2]
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	b299      	uxth	r1, r3
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	f7ff ff2f 	bl	8000768 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	3301      	adds	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8c8      	bhi.n	80008ae <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	461a      	mov	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	429a      	cmp	r2, r3
 800092c:	d8ad      	bhi.n	800088a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <SSD1306_Putc+0xfc>)
 8000930:	881a      	ldrh	r2, [r3, #0]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b29b      	uxth	r3, r3
 8000938:	4413      	add	r3, r2
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <SSD1306_Putc+0xfc>)
 800093e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000940:	79fb      	ldrb	r3, [r7, #7]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000494 	.word	0x20000494

08000950 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	4613      	mov	r3, r2
 800095c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800095e:	e012      	b.n	8000986 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	79fa      	ldrb	r2, [r7, #7]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff ff71 	bl	8000850 <SSD1306_Putc>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d002      	beq.n	8000980 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	e008      	b.n	8000992 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1e8      	bne.n	8000960 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	781b      	ldrb	r3, [r3, #0]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <ssd1306_I2C_Init+0x24>)
 80009a4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009a6:	e002      	b.n	80009ae <ssd1306_I2C_Init+0x12>
		p--;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1f9      	bne.n	80009a8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	0003d090 	.word	0x0003d090

080009c4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b0c7      	sub	sp, #284	; 0x11c
 80009c8:	af02      	add	r7, sp, #8
 80009ca:	4604      	mov	r4, r0
 80009cc:	4608      	mov	r0, r1
 80009ce:	4639      	mov	r1, r7
 80009d0:	600a      	str	r2, [r1, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	4622      	mov	r2, r4
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	1dbb      	adds	r3, r7, #6
 80009dc:	4602      	mov	r2, r0
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	460a      	mov	r2, r1
 80009e4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	1dba      	adds	r2, r7, #6
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009f6:	e010      	b.n	8000a1a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80009f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009fc:	3301      	adds	r3, #1
 80009fe:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8000a02:	4639      	mov	r1, r7
 8000a04:	6809      	ldr	r1, [r1, #0]
 8000a06:	440a      	add	r2, r1
 8000a08:	7811      	ldrb	r1, [r2, #0]
 8000a0a:	f107 020c 	add.w	r2, r7, #12
 8000a0e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a10:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a14:	3301      	adds	r3, #1
 8000a16:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	1d3a      	adds	r2, r7, #4
 8000a22:	8812      	ldrh	r2, [r2, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8e7      	bhi.n	80009f8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b299      	uxth	r1, r3
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	b298      	uxth	r0, r3
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <ssd1306_I2C_WriteMulti+0x8c>)
 8000a42:	f000 fdfd 	bl	8001640 <HAL_I2C_Master_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	200004a8 	.word	0x200004a8

08000a54 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	71bb      	strb	r3, [r7, #6]
 8000a62:	4613      	mov	r3, r2
 8000a64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a66:	79bb      	ldrb	r3, [r7, #6]
 8000a68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a6a:	797b      	ldrb	r3, [r7, #5]
 8000a6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	b299      	uxth	r1, r3
 8000a72:	f107 020c 	add.w	r2, r7, #12
 8000a76:	230a      	movs	r3, #10
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <ssd1306_I2C_Write+0x38>)
 8000a7e:	f000 fddf 	bl	8001640 <HAL_I2C_Master_Transmit>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200004a8 	.word	0x200004a8

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_MspInit+0x5c>)
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_MspInit+0x5c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x5c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_MspInit+0x5c>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x5c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x60>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_MspInit+0x60>)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a2b      	ldr	r2, [pc, #172]	; (8000bbc <HAL_I2C_MspInit+0xc8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d124      	bne.n	8000b5e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4a2a      	ldr	r2, [pc, #168]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b30:	2312      	movs	r3, #18
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4821      	ldr	r0, [pc, #132]	; (8000bc4 <HAL_I2C_MspInit+0xd0>)
 8000b40:	f000 faec 	bl	800111c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	61d3      	str	r3, [r2, #28]
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b52:	69db      	ldr	r3, [r3, #28]
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b5c:	e029      	b.n	8000bb2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_I2C_MspInit+0xd4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d124      	bne.n	8000bb2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f043 0308 	orr.w	r3, r3, #8
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b86:	2312      	movs	r3, #18
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <HAL_I2C_MspInit+0xd0>)
 8000b96:	f000 fac1 	bl	800111c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_I2C_MspInit+0xcc>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	40005800 	.word	0x40005800

08000bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <HAL_SPI_MspInit+0x88>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d12f      	bne.n	8000c4c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf6:	6193      	str	r3, [r2, #24]
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_SPI_MspInit+0x8c>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c1c:	23b0      	movs	r3, #176	; 0xb0
 8000c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <HAL_SPI_MspInit+0x90>)
 8000c30:	f000 fa74 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c34:	2340      	movs	r3, #64	; 0x40
 8000c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	4619      	mov	r1, r3
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_SPI_MspInit+0x90>)
 8000c48:	f000 fa68 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40013000 	.word	0x40013000
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca6:	f000 f919 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x50>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x16>
		heap_end = &end;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <_sbrk+0x50>)
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <_sbrk+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <_sbrk+0x50>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <_sbrk+0x50>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	466a      	mov	r2, sp
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d907      	bls.n	8000cea <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000cda:	f001 fe85 	bl	80029e8 <__errno>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	e006      	b.n	8000cf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_sbrk+0x50>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <_sbrk+0x50>)
 8000cf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2000049c 	.word	0x2000049c
 8000d04:	200005f4 	.word	0x200005f4

08000d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <MX_USART2_UART_Init+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_USART2_UART_Init+0x50>)
 8000d4c:	f001 fd4b 	bl	80027e6 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d56:	2145      	movs	r1, #69	; 0x45
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_USART2_UART_Init+0x58>)
 8000d5a:	f7ff fb87 	bl	800046c <_Error_Handler>
  }

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200005a8 	.word	0x200005a8
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	08003338 	.word	0x08003338

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param uartHandle: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0x70>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_UART_MspInit+0x68>
  {
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0x74>)
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0x74>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x74>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8000da8:	2304      	movs	r3, #4
 8000daa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_UART_MspInit+0x78>)
 8000dbc:	f000 f9ae 	bl	800111c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8000dc0:	2308      	movs	r3, #8
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_UART_MspInit+0x78>)
 8000dd4:	f000 f9a2 	bl	800111c <HAL_GPIO_Init>
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <USARTPutch>:

}

/* USER CODE BEGIN 1 */
void USARTPutch(USART_TypeDef* Uart, uint8_t Byte)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
	while((Uart->SR & USART_SR_TC) == 0);
 8000df8:	bf00      	nop
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f9      	beq.n	8000dfa <USARTPutch+0xe>
	Uart->DR = Byte;
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	605a      	str	r2, [r3, #4]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <USARTWriteBuffer>:
		USARTPutch(Uart,*Buffer);
		Buffer++;
	}
}
void USARTWriteBuffer(USART_TypeDef* Uart, uint8_t* Buffer, uint16_t Len)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	4613      	mov	r3, r2
 8000e22:	80fb      	strh	r3, [r7, #6]
	uint16_t Cnt = Len;
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	82fb      	strh	r3, [r7, #22]
	while(Cnt--)
 8000e28:	e008      	b.n	8000e3c <USARTWriteBuffer+0x26>
	{
		USARTPutch(Uart,*Buffer);
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ffdb 	bl	8000dec <USARTPutch>
		Buffer++;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
	while(Cnt--)
 8000e3c:	8afb      	ldrh	r3, [r7, #22]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	82fa      	strh	r2, [r7, #22]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1f1      	bne.n	8000e2a <USARTWriteBuffer+0x14>
	}
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_Init+0x28>)
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x28>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f927 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe10 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f931 	bl	8001102 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f907 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000010 	.word	0x20000010
 8000ed8:	2000000c 	.word	0x2000000c

08000edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x1c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x20>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x20>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000010 	.word	0x20000010
 8000efc:	200005ec 	.word	0x200005ec

08000f00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <HAL_GetTick+0x10>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	200005ec 	.word	0x200005ec

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_Delay+0x40>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffe0 	bl	8000f00 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d3f7      	bcc.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000010 	.word	0x20000010

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	490d      	ldr	r1, [pc, #52]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	4909      	ldr	r1, [pc, #36]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	2201      	movs	r2, #1
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	401a      	ands	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001056:	2101      	movs	r1, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	1e59      	subs	r1, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff92 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff4b 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff60 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff92 	bl	8001010 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff61 	bl	8000fbc <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b08b      	sub	sp, #44	; 0x2c
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e127      	b.n	8001380 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001130:	2201      	movs	r2, #1
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 8116 	bne.w	800137a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b12      	cmp	r3, #18
 8001154:	d034      	beq.n	80011c0 <HAL_GPIO_Init+0xa4>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d80d      	bhi.n	8001176 <HAL_GPIO_Init+0x5a>
 800115a:	2b02      	cmp	r3, #2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x9a>
 800115e:	2b02      	cmp	r3, #2
 8001160:	d804      	bhi.n	800116c <HAL_GPIO_Init+0x50>
 8001162:	2b00      	cmp	r3, #0
 8001164:	d031      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 8001166:	2b01      	cmp	r3, #1
 8001168:	d01c      	beq.n	80011a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116a:	e048      	b.n	80011fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800116c:	2b03      	cmp	r3, #3
 800116e:	d043      	beq.n	80011f8 <HAL_GPIO_Init+0xdc>
 8001170:	2b11      	cmp	r3, #17
 8001172:	d01b      	beq.n	80011ac <HAL_GPIO_Init+0x90>
          break;
 8001174:	e043      	b.n	80011fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001176:	4a89      	ldr	r2, [pc, #548]	; (800139c <HAL_GPIO_Init+0x280>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d026      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 800117c:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_GPIO_Init+0x280>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d806      	bhi.n	8001190 <HAL_GPIO_Init+0x74>
 8001182:	4a87      	ldr	r2, [pc, #540]	; (80013a0 <HAL_GPIO_Init+0x284>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d020      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 8001188:	4a86      	ldr	r2, [pc, #536]	; (80013a4 <HAL_GPIO_Init+0x288>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01d      	beq.n	80011ca <HAL_GPIO_Init+0xae>
          break;
 800118e:	e036      	b.n	80011fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001190:	4a85      	ldr	r2, [pc, #532]	; (80013a8 <HAL_GPIO_Init+0x28c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 8001196:	4a85      	ldr	r2, [pc, #532]	; (80013ac <HAL_GPIO_Init+0x290>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d016      	beq.n	80011ca <HAL_GPIO_Init+0xae>
 800119c:	4a84      	ldr	r2, [pc, #528]	; (80013b0 <HAL_GPIO_Init+0x294>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0xae>
          break;
 80011a2:	e02c      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e028      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e023      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e01e      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	330c      	adds	r3, #12
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e019      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d2:	2304      	movs	r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e012      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	2308      	movs	r3, #8
 80011e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	611a      	str	r2, [r3, #16]
          break;
 80011ea:	e008      	b.n	80011fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	615a      	str	r2, [r3, #20]
          break;
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2bff      	cmp	r3, #255	; 0xff
 8001202:	d801      	bhi.n	8001208 <HAL_GPIO_Init+0xec>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	e001      	b.n	800120c <HAL_GPIO_Init+0xf0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2bff      	cmp	r3, #255	; 0xff
 8001212:	d802      	bhi.n	800121a <HAL_GPIO_Init+0xfe>
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x104>
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3b08      	subs	r3, #8
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	210f      	movs	r1, #15
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	401a      	ands	r2, r3
 8001232:	6a39      	ldr	r1, [r7, #32]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	431a      	orrs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 8096 	beq.w	800137a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800124e:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <HAL_GPIO_Init+0x298>)
 8001250:	4b58      	ldr	r3, [pc, #352]	; (80013b4 <HAL_GPIO_Init+0x298>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <HAL_GPIO_Init+0x298>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001266:	4a54      	ldr	r2, [pc, #336]	; (80013b8 <HAL_GPIO_Init+0x29c>)
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <HAL_GPIO_Init+0x2a0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x19e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <HAL_GPIO_Init+0x2a4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x19a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a49      	ldr	r2, [pc, #292]	; (80013c4 <HAL_GPIO_Init+0x2a8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x196>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_Init+0x2ac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x192>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x1a0>
 80012ba:	2300      	movs	r3, #0
 80012bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012cc:	493a      	ldr	r1, [pc, #232]	; (80013b8 <HAL_GPIO_Init+0x29c>)
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e6:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012e8:	4b38      	ldr	r3, [pc, #224]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f4:	4935      	ldr	r1, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800130e:	492f      	ldr	r1, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001310:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
 800131a:	e006      	b.n	800132a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131c:	492b      	ldr	r1, [pc, #172]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4013      	ands	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001336:	4925      	ldr	r1, [pc, #148]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	608b      	str	r3, [r1, #8]
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001344:	4921      	ldr	r1, [pc, #132]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	4013      	ands	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800135e:	491b      	ldr	r1, [pc, #108]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
 800136a:	e006      	b.n	800137a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136c:	4917      	ldr	r1, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_GPIO_Init+0x2b0>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	4013      	ands	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	3301      	adds	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f aed0 	bne.w	8001130 <HAL_GPIO_Init+0x14>
  }
}
 8001390:	bf00      	nop
 8001392:	372c      	adds	r7, #44	; 0x2c
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	10210000 	.word	0x10210000
 80013a0:	10110000 	.word	0x10110000
 80013a4:	10120000 	.word	0x10120000
 80013a8:	10310000 	.word	0x10310000
 80013ac:	10320000 	.word	0x10320000
 80013b0:	10220000 	.word	0x10220000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000
 80013c8:	40011400 	.word	0x40011400
 80013cc:	40010400 	.word	0x40010400

080013d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e11f      	b.n	8001622 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fb7c 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001434:	f001 f90e 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a7b      	ldr	r2, [pc, #492]	; (800162c <HAL_I2C_Init+0x25c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d807      	bhi.n	8001454 <HAL_I2C_Init+0x84>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a7a      	ldr	r2, [pc, #488]	; (8001630 <HAL_I2C_Init+0x260>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e006      	b.n	8001462 <HAL_I2C_Init+0x92>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a77      	ldr	r2, [pc, #476]	; (8001634 <HAL_I2C_Init+0x264>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0db      	b.n	8001622 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a72      	ldr	r2, [pc, #456]	; (8001638 <HAL_I2C_Init+0x268>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	6852      	ldr	r2, [r2, #4]
 8001480:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4863      	ldr	r0, [pc, #396]	; (800162c <HAL_I2C_Init+0x25c>)
 800149e:	4283      	cmp	r3, r0
 80014a0:	d802      	bhi.n	80014a8 <HAL_I2C_Init+0xd8>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	e009      	b.n	80014bc <HAL_I2C_Init+0xec>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ae:	fb00 f303 	mul.w	r3, r0, r3
 80014b2:	4862      	ldr	r0, [pc, #392]	; (800163c <HAL_I2C_Init+0x26c>)
 80014b4:	fba0 0303 	umull	r0, r3, r0, r3
 80014b8:	099b      	lsrs	r3, r3, #6
 80014ba:	3301      	adds	r3, #1
 80014bc:	430b      	orrs	r3, r1
 80014be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4955      	ldr	r1, [pc, #340]	; (800162c <HAL_I2C_Init+0x25c>)
 80014d8:	428b      	cmp	r3, r1
 80014da:	d80d      	bhi.n	80014f8 <HAL_I2C_Init+0x128>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e59      	subs	r1, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	bf38      	it	cc
 80014f4:	2304      	movcc	r3, #4
 80014f6:	e04f      	b.n	8001598 <HAL_I2C_Init+0x1c8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <HAL_I2C_Init+0x154>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e5c      	subs	r4, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	440b      	add	r3, r1
 800150e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e012      	b.n	800154a <HAL_I2C_Init+0x17a>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e5c      	subs	r4, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	0099      	lsls	r1, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	fbb4 f3f3 	udiv	r3, r4, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Init+0x182>
 800154e:	2301      	movs	r3, #1
 8001550:	e022      	b.n	8001598 <HAL_I2C_Init+0x1c8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10e      	bne.n	8001578 <HAL_I2C_Init+0x1a8>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e5c      	subs	r4, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	440b      	add	r3, r1
 8001568:	fbb4 f3f3 	udiv	r3, r4, r3
 800156c:	3301      	adds	r3, #1
 800156e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001576:	e00f      	b.n	8001598 <HAL_I2C_Init+0x1c8>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e5c      	subs	r4, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	0099      	lsls	r1, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	fbb4 f3f3 	udiv	r3, r4, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001598:	4313      	orrs	r3, r2
 800159a:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	69d0      	ldr	r0, [r2, #28]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6a12      	ldr	r2, [r2, #32]
 80015b2:	4302      	orrs	r2, r0
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	6908      	ldr	r0, [r1, #16]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	68c9      	ldr	r1, [r1, #12]
 80015d2:	4301      	orrs	r1, r0
 80015d4:	430b      	orrs	r3, r1
 80015d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6950      	ldr	r0, [r2, #20]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6992      	ldr	r2, [r2, #24]
 80015ee:	4302      	orrs	r2, r0
 80015f0:	430a      	orrs	r2, r1
 80015f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	bf00      	nop
 800162c:	000186a0 	.word	0x000186a0
 8001630:	001e847f 	.word	0x001e847f
 8001634:	003d08ff 	.word	0x003d08ff
 8001638:	431bde83 	.word	0x431bde83
 800163c:	10624dd3 	.word	0x10624dd3

08001640 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff fc54 	bl	8000f00 <HAL_GetTick>
 8001658:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b20      	cmp	r3, #32
 8001664:	f040 80e0 	bne.w	8001828 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2319      	movs	r3, #25
 800166e:	2201      	movs	r2, #1
 8001670:	4970      	ldr	r1, [pc, #448]	; (8001834 <HAL_I2C_Master_Transmit+0x1f4>)
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fa92 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800167e:	2302      	movs	r3, #2
 8001680:	e0d3      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_I2C_Master_Transmit+0x50>
 800168c:	2302      	movs	r3, #2
 800168e:	e0cc      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d007      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	f042 0201 	orr.w	r2, r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2221      	movs	r2, #33	; 0x21
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2210      	movs	r2, #16
 80016d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	893a      	ldrh	r2, [r7, #8]
 80016e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4a50      	ldr	r2, [pc, #320]	; (8001838 <HAL_I2C_Master_Transmit+0x1f8>)
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016f8:	8979      	ldrh	r1, [r7, #10]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f9ca 	bl	8001a98 <I2C_MasterRequestWrite>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e08d      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001724:	e066      	b.n	80017f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	6a39      	ldr	r1, [r7, #32]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 fb0c 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	2b04      	cmp	r3, #4
 800173c:	d107      	bne.n	800174e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800174c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	3b01      	subs	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b04      	cmp	r3, #4
 800178e:	d11b      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x188>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	2b00      	cmp	r3, #0
 8001796:	d017      	beq.n	80017c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6a39      	ldr	r1, [r7, #32]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 fafc 	bl	8001dca <I2C_WaitOnBTFFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00d      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d107      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e01a      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d194      	bne.n	8001726 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2220      	movs	r2, #32
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e000      	b.n	800182a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001828:	2302      	movs	r3, #2
  }
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	00100002 	.word	0x00100002
 8001838:	ffff0000 	.word	0xffff0000

0800183c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	460b      	mov	r3, r1
 800184a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fb58 	bl	8000f00 <HAL_GetTick>
 8001850:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001852:	2301      	movs	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	f040 8110 	bne.w	8001a84 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2319      	movs	r3, #25
 800186a:	2201      	movs	r2, #1
 800186c:	4988      	ldr	r1, [pc, #544]	; (8001a90 <HAL_I2C_IsDeviceReady+0x254>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f994 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	e103      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_I2C_IsDeviceReady+0x50>
 8001888:	2302      	movs	r3, #2
 800188a:	e0fc      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d007      	beq.n	80018b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2224      	movs	r2, #36	; 0x24
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a70      	ldr	r2, [pc, #448]	; (8001a94 <HAL_I2C_IsDeviceReady+0x258>)
 80018d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	6812      	ldr	r2, [r2, #0]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f952 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00d      	beq.n	800191a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800190c:	d103      	bne.n	8001916 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0b5      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	897a      	ldrh	r2, [r7, #10]
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001926:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff faea 	bl	8000f00 <HAL_GetTick>
 800192c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b02      	cmp	r3, #2
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	bf0c      	ite	eq
 8001954:	2301      	moveq	r3, #1
 8001956:	2300      	movne	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800195c:	e025      	b.n	80019aa <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800195e:	f7ff facf 	bl	8000f00 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d802      	bhi.n	8001974 <HAL_I2C_IsDeviceReady+0x138>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d103      	bne.n	800197c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	22a0      	movs	r2, #160	; 0xa0
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b02      	cmp	r3, #2
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2ba0      	cmp	r3, #160	; 0xa0
 80019b4:	d005      	beq.n	80019c2 <HAL_I2C_IsDeviceReady+0x186>
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <HAL_I2C_IsDeviceReady+0x186>
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0cd      	beq.n	800195e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d129      	bne.n	8001a2c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2319      	movs	r3, #25
 8001a04:	2201      	movs	r2, #1
 8001a06:	4922      	ldr	r1, [pc, #136]	; (8001a90 <HAL_I2C_IsDeviceReady+0x254>)
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f8c7 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e036      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e02c      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a44:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2319      	movs	r3, #25
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4910      	ldr	r1, [pc, #64]	; (8001a90 <HAL_I2C_IsDeviceReady+0x254>)
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f8a3 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e012      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	3301      	adds	r3, #1
 8001a64:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	f4ff af33 	bcc.w	80018d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00100002 	.word	0x00100002
 8001a94:	ffff0000 	.word	0xffff0000

08001a98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d006      	beq.n	8001ac2 <I2C_MasterRequestWrite+0x2a>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d003      	beq.n	8001ac2 <I2C_MasterRequestWrite+0x2a>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ac0:	d108      	bne.n	8001ad4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e00b      	b.n	8001aec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	2b12      	cmp	r3, #18
 8001ada:	d107      	bne.n	8001aec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f84f 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b12:	d103      	bne.n	8001b1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e034      	b.n	8001b8a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b28:	d107      	bne.n	8001b3a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	897a      	ldrh	r2, [r7, #10]
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	e01b      	b.n	8001b72 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	897a      	ldrh	r2, [r7, #10]
 8001b40:	11d2      	asrs	r2, r2, #7
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 0206 	and.w	r2, r2, #6
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	f062 020f 	orn	r2, r2, #15
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	490f      	ldr	r1, [pc, #60]	; (8001b94 <I2C_MasterRequestWrite+0xfc>)
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f876 	bl	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e010      	b.n	8001b8a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	897a      	ldrh	r2, [r7, #10]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <I2C_MasterRequestWrite+0x100>)
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f866 	bl	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	00010008 	.word	0x00010008
 8001b98:	00010002 	.word	0x00010002

08001b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bac:	e025      	b.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d021      	beq.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff f9a3 	bl	8000f00 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad2      	subs	r2, r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d802      	bhi.n	8001bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e023      	b.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10d      	bne.n	8001c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf0c      	ite	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	2300      	movne	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	e00c      	b.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d0b6      	beq.n	8001bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c58:	e051      	b.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d123      	bne.n	8001cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f043 0204 	orr.w	r2, r3, #4
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e046      	b.n	8001d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d021      	beq.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cba:	f7ff f921 	bl	8000f00 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	1ad2      	subs	r2, r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d802      	bhi.n	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d116      	bne.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e020      	b.n	8001d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10c      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4013      	ands	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	2300      	moveq	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	e00b      	b.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d18d      	bne.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d54:	e02d      	b.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f878 	bl	8001e4c <I2C_IsAcknowledgeFailed>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02d      	b.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d021      	beq.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7ff f8c7 	bl	8000f00 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d802      	bhi.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b80      	cmp	r3, #128	; 0x80
 8001dbe:	d1ca      	bne.n	8001d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd6:	e02d      	b.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f837 	bl	8001e4c <I2C_IsAcknowledgeFailed>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e02d      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dee:	d021      	beq.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df0:	f7ff f886 	bl	8000f00 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d802      	bhi.n	8001e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e007      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d1ca      	bne.n	8001dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e62:	d11b      	bne.n	8001e9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f043 0204 	orr.w	r2, r3, #4
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e26c      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8087 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec8:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d00c      	beq.n	8001eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ed4:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d112      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5e>
 8001ee0:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eec:	d10b      	bne.n	8001f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d06c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x12c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d168      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e246      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x76>
 8001f10:	4a80      	ldr	r2, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e02e      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4a7b      	ldr	r2, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4a78      	ldr	r2, [pc, #480]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	4b77      	ldr	r3, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xbc>
 8001f4a:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	4b71      	ldr	r3, [pc, #452]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4a6f      	ldr	r2, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4b6e      	ldr	r3, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xd4>
 8001f64:	4a6b      	ldr	r2, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4a68      	ldr	r2, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe ffbc 	bl	8000f00 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe ffb8 	bl	8000f00 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1fa      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xe4>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe ffa8 	bl	8000f00 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ffa4 	bl	8000f00 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e1e6      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x10c>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d063      	beq.n	80020aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d11c      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
 8001ffa:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e1ba      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	493d      	ldr	r1, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002020:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002032:	e03a      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff5d 	bl	8000f00 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7fe ff59 	bl	8000f00 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e19b      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0f0      	beq.n	800204a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	492a      	ldr	r1, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	e015      	b.n	80020aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ff3c 	bl	8000f00 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe ff38 	bl	8000f00 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e17a      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d03a      	beq.n	800212c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d019      	beq.n	80020f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x274>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7fe ff1c 	bl	8000f00 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020cc:	f7fe ff18 	bl	8000f00 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e15a      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f000 fada 	bl	80026a4 <RCC_Delay>
 80020f0:	e01c      	b.n	800212c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_RCC_OscConfig+0x274>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7fe ff02 	bl	8000f00 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	e00f      	b.n	8002120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002100:	f7fe fefe 	bl	8000f00 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d908      	bls.n	8002120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e140      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	42420000 	.word	0x42420000
 800211c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	4b9e      	ldr	r3, [pc, #632]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1e9      	bne.n	8002100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a6 	beq.w	8002286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213e:	4b97      	ldr	r3, [pc, #604]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10d      	bne.n	8002166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	4a94      	ldr	r2, [pc, #592]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800214c:	4b93      	ldr	r3, [pc, #588]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b91      	ldr	r3, [pc, #580]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4a8b      	ldr	r2, [pc, #556]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002174:	4b8a      	ldr	r3, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7fe febf 	bl	8000f00 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7fe febb 	bl	8000f00 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	; 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0fd      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x4f8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x312>
 80021ac:	4a7b      	ldr	r2, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	4b7b      	ldr	r3, [pc, #492]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	e02d      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x334>
 80021c2:	4a76      	ldr	r2, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	4b75      	ldr	r3, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	6213      	str	r3, [r2, #32]
 80021ce:	4a73      	ldr	r2, [pc, #460]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	4b72      	ldr	r3, [pc, #456]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f023 0304 	bic.w	r3, r3, #4
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	e01c      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_OscConfig+0x356>
 80021e4:	4a6d      	ldr	r2, [pc, #436]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	4b6d      	ldr	r3, [pc, #436]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	4a6a      	ldr	r2, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	4b6a      	ldr	r3, [pc, #424]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e00b      	b.n	8002216 <HAL_RCC_OscConfig+0x36e>
 80021fe:	4a67      	ldr	r2, [pc, #412]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	4b66      	ldr	r3, [pc, #408]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4a64      	ldr	r2, [pc, #400]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800220c:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d015      	beq.n	800224a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7fe fe6f 	bl	8000f00 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7fe fe6b 	bl	8000f00 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0ab      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	4b57      	ldr	r3, [pc, #348]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0ee      	beq.n	8002226 <HAL_RCC_OscConfig+0x37e>
 8002248:	e014      	b.n	8002274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224a:	f7fe fe59 	bl	8000f00 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fe55 	bl	8000f00 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e095      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	4b4c      	ldr	r3, [pc, #304]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ee      	bne.n	8002252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4a48      	ldr	r2, [pc, #288]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800227c:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 8081 	beq.w	8002392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002290:	4b42      	ldr	r3, [pc, #264]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
 8002298:	2b08      	cmp	r3, #8
 800229a:	d061      	beq.n	8002360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d146      	bne.n	8002332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fe29 	bl	8000f00 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fe25 	bl	8000f00 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e067      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d8:	d108      	bne.n	80022ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022da:	4930      	ldr	r1, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	4b2f      	ldr	r3, [pc, #188]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	482b      	ldr	r0, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a19      	ldr	r1, [r3, #32]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	430b      	orrs	r3, r1
 8002300:	4313      	orrs	r3, r2
 8002302:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe fdf9 	bl	8000f00 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fdf5 	bl	8000f00 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e037      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x46a>
 8002330:	e02f      	b.n	8002392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_RCC_OscConfig+0x4fc>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fde2 	bl	8000f00 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe fdde 	bl	8000f00 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e020      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x498>
 800235e:	e018      	b.n	8002392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e013      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_OscConfig+0x4f4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	40007000 	.word	0x40007000
 80023a4:	42420060 	.word	0x42420060

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0d0      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0207 	and.w	r2, r3, #7
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d210      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4967      	ldr	r1, [pc, #412]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 0207 	bic.w	r2, r3, #7
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0207 	and.w	r2, r3, #7
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4a59      	ldr	r2, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800240e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4950      	ldr	r1, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d040      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e073      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e06b      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f023 0203 	bic.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe fd32 	bl	8000f00 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fd2e 	bl	8000f00 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e053      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0207 	and.w	r2, r3, #7
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4924      	ldr	r1, [pc, #144]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 0207 	bic.w	r2, r3, #7
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0207 	and.w	r2, r3, #7
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4919      	ldr	r1, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002522:	4912      	ldr	r1, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4601      	mov	r1, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	fa21 f303 	lsr.w	r3, r1, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1cc>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fc90 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	40021000 	.word	0x40021000
 8002570:	080040bc 	.word	0x080040bc
 8002574:	20000008 	.word	0x20000008
 8002578:	2000000c 	.word	0x2000000c

0800257c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b490      	push	{r4, r7}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002584:	1d3c      	adds	r4, r7, #4
 8002586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_RCC_GetSysClockFreq+0xb4>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d002      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x46>
 80025ba:	e02d      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025be:	623b      	str	r3, [r7, #32]
      break;
 80025c0:	e02d      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	0c9b      	lsrs	r3, r3, #18
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ce:	4413      	add	r3, r2
 80025d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c5b      	lsrs	r3, r3, #17
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ee:	4413      	add	r3, r2
 80025f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025fa:	fb02 f203 	mul.w	r2, r2, r3
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
 8002606:	e004      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <HAL_RCC_GetSysClockFreq+0xc0>)
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	623b      	str	r3, [r7, #32]
      break;
 8002616:	e002      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800261a:	623b      	str	r3, [r7, #32]
      break;
 800261c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261e:	6a3b      	ldr	r3, [r7, #32]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc90      	pop	{r4, r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	0800334c 	.word	0x0800334c
 8002630:	0800335c 	.word	0x0800335c
 8002634:	40021000 	.word	0x40021000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	003d0900 	.word	0x003d0900

08002640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <HAL_RCC_GetHCLKFreq+0x10>)
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002658:	f7ff fff2 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 800265c:	4601      	mov	r1, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	080040cc 	.word	0x080040cc

0800267c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002680:	f7ff ffde 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002684:	4601      	mov	r1, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0adb      	lsrs	r3, r3, #11
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	080040cc 	.word	0x080040cc

080026a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <RCC_Delay+0x34>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <RCC_Delay+0x38>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0a5b      	lsrs	r3, r3, #9
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026c0:	bf00      	nop
  }
  while (Delay --);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	60fa      	str	r2, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f9      	bne.n	80026c0 <RCC_Delay+0x1c>
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000008 	.word	0x20000008
 80026dc:	10624dd3 	.word	0x10624dd3

080026e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e075      	b.n	80027de <HAL_SPI_Init+0xfe>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002702:	d009      	beq.n	8002718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
 800270a:	e005      	b.n	8002718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fa4a 	bl	8000bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6852      	ldr	r2, [r2, #4]
 8002758:	f402 7182 	and.w	r1, r2, #260	; 0x104
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6892      	ldr	r2, [r2, #8]
 8002760:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6912      	ldr	r2, [r2, #16]
 8002774:	f002 0202 	and.w	r2, r2, #2
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6952      	ldr	r2, [r2, #20]
 800277e:	f002 0201 	and.w	r2, r2, #1
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6992      	ldr	r2, [r2, #24]
 8002788:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800278c:	4311      	orrs	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	69d2      	ldr	r2, [r2, #28]
 8002792:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6a12      	ldr	r2, [r2, #32]
 800279c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6992      	ldr	r2, [r2, #24]
 80027b6:	0c12      	lsrs	r2, r2, #16
 80027b8:	f002 0204 	and.w	r2, r2, #4
 80027bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	69d2      	ldr	r2, [r2, #28]
 80027c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e03f      	b.n	8002878 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d106      	bne.n	8002812 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe faaf 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2224      	movs	r2, #36	; 0x24
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	68d2      	ldr	r2, [r2, #12]
 8002824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002828:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f828 	bl	8002880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	6912      	ldr	r2, [r2, #16]
 800283a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800283e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6952      	ldr	r2, [r2, #20]
 800284a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800285e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	6912      	ldr	r2, [r2, #16]
 8002892:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68d2      	ldr	r2, [r2, #12]
 800289a:	430a      	orrs	r2, r1
 800289c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028be:	f023 030c 	bic.w	r3, r3, #12
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	6952      	ldr	r2, [r2, #20]
 80028d2:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6992      	ldr	r2, [r2, #24]
 80028da:	430a      	orrs	r2, r1
 80028dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <UART_SetConfig+0x114>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d103      	bne.n	80028f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028e8:	f7ff fec8 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	e002      	b.n	80028f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028f0:	f7ff feb0 	bl	8002654 <HAL_RCC_GetPCLK1Freq>
 80028f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	009a      	lsls	r2, r3, #2
 8002904:	441a      	add	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <UART_SetConfig+0x118>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	0118      	lsls	r0, r3, #4
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009a      	lsls	r2, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <UART_SetConfig+0x118>)
 8002932:	fba3 4302 	umull	r4, r3, r3, r2
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2464      	movs	r4, #100	; 0x64
 800293a:	fb04 f303 	mul.w	r3, r4, r3
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	3332      	adds	r3, #50	; 0x32
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <UART_SetConfig+0x118>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002950:	4418      	add	r0, r3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fbb2 f2f3 	udiv	r2, r2, r3
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <UART_SetConfig+0x118>)
 800296a:	fba3 4302 	umull	r4, r3, r3, r2
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2464      	movs	r4, #100	; 0x64
 8002972:	fb04 f303 	mul.w	r3, r4, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	3332      	adds	r3, #50	; 0x32
 800297c:	4a06      	ldr	r2, [pc, #24]	; (8002998 <UART_SetConfig+0x118>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	4403      	add	r3, r0
 800298a:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	40013800 	.word	0x40013800
 8002998:	51eb851f 	.word	0x51eb851f

0800299c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029a4:	e002      	b.n	80029ac <LoopCopyDataInit>

080029a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029aa:	3304      	adds	r3, #4

080029ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b0:	d3f9      	bcc.n	80029a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029b4:	4c0a      	ldr	r4, [pc, #40]	; (80029e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b8:	e001      	b.n	80029be <LoopFillZerobss>

080029ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029bc:	3204      	adds	r2, #4

080029be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c0:	d3fb      	bcc.n	80029ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029c2:	f7fe f9a1 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c6:	f000 f815 	bl	80029f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ca:	f7fd fc7f 	bl	80002cc <main>
  bx lr
 80029ce:	4770      	bx	lr
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80029d8:	08004110 	.word	0x08004110
  ldr r2, =_sbss
 80029dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80029e0:	200005f4 	.word	0x200005f4

080029e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC1_2_IRQHandler>
	...

080029e8 <__errno>:
 80029e8:	4b01      	ldr	r3, [pc, #4]	; (80029f0 <__errno+0x8>)
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000014 	.word	0x20000014

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2500      	movs	r5, #0
 80029f8:	4e0c      	ldr	r6, [pc, #48]	; (8002a2c <__libc_init_array+0x38>)
 80029fa:	4c0d      	ldr	r4, [pc, #52]	; (8002a30 <__libc_init_array+0x3c>)
 80029fc:	1ba4      	subs	r4, r4, r6
 80029fe:	10a4      	asrs	r4, r4, #2
 8002a00:	42a5      	cmp	r5, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	f000 fc64 	bl	80032d0 <_init>
 8002a08:	2500      	movs	r5, #0
 8002a0a:	4e0a      	ldr	r6, [pc, #40]	; (8002a34 <__libc_init_array+0x40>)
 8002a0c:	4c0a      	ldr	r4, [pc, #40]	; (8002a38 <__libc_init_array+0x44>)
 8002a0e:	1ba4      	subs	r4, r4, r6
 8002a10:	10a4      	asrs	r4, r4, #2
 8002a12:	42a5      	cmp	r5, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a1c:	4798      	blx	r3
 8002a1e:	3501      	adds	r5, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a26:	4798      	blx	r3
 8002a28:	3501      	adds	r5, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08004108 	.word	0x08004108
 8002a30:	08004108 	.word	0x08004108
 8002a34:	08004108 	.word	0x08004108
 8002a38:	0800410c 	.word	0x0800410c

08002a3c <memset>:
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4402      	add	r2, r0
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d100      	bne.n	8002a46 <memset+0xa>
 8002a44:	4770      	bx	lr
 8002a46:	f803 1b01 	strb.w	r1, [r3], #1
 8002a4a:	e7f9      	b.n	8002a40 <memset+0x4>

08002a4c <_vsniprintf_r>:
 8002a4c:	b530      	push	{r4, r5, lr}
 8002a4e:	1e14      	subs	r4, r2, #0
 8002a50:	4605      	mov	r5, r0
 8002a52:	b09b      	sub	sp, #108	; 0x6c
 8002a54:	4618      	mov	r0, r3
 8002a56:	da05      	bge.n	8002a64 <_vsniprintf_r+0x18>
 8002a58:	238b      	movs	r3, #139	; 0x8b
 8002a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5e:	602b      	str	r3, [r5, #0]
 8002a60:	b01b      	add	sp, #108	; 0x6c
 8002a62:	bd30      	pop	{r4, r5, pc}
 8002a64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002a68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002a6c:	bf0c      	ite	eq
 8002a6e:	4623      	moveq	r3, r4
 8002a70:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	9305      	str	r3, [sp, #20]
 8002a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7c:	9100      	str	r1, [sp, #0]
 8002a7e:	9104      	str	r1, [sp, #16]
 8002a80:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002a84:	4602      	mov	r2, r0
 8002a86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002a88:	4669      	mov	r1, sp
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f000 f874 	bl	8002b78 <_svfiprintf_r>
 8002a90:	1c43      	adds	r3, r0, #1
 8002a92:	bfbc      	itt	lt
 8002a94:	238b      	movlt	r3, #139	; 0x8b
 8002a96:	602b      	strlt	r3, [r5, #0]
 8002a98:	2c00      	cmp	r4, #0
 8002a9a:	d0e1      	beq.n	8002a60 <_vsniprintf_r+0x14>
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	9b00      	ldr	r3, [sp, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e7dd      	b.n	8002a60 <_vsniprintf_r+0x14>

08002aa4 <vsniprintf>:
 8002aa4:	b507      	push	{r0, r1, r2, lr}
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	460a      	mov	r2, r1
 8002aac:	4601      	mov	r1, r0
 8002aae:	4803      	ldr	r0, [pc, #12]	; (8002abc <vsniprintf+0x18>)
 8002ab0:	6800      	ldr	r0, [r0, #0]
 8002ab2:	f7ff ffcb 	bl	8002a4c <_vsniprintf_r>
 8002ab6:	b003      	add	sp, #12
 8002ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002abc:	20000014 	.word	0x20000014

08002ac0 <__ssputs_r>:
 8002ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac4:	688e      	ldr	r6, [r1, #8]
 8002ac6:	4682      	mov	sl, r0
 8002ac8:	429e      	cmp	r6, r3
 8002aca:	460c      	mov	r4, r1
 8002acc:	4691      	mov	r9, r2
 8002ace:	4698      	mov	r8, r3
 8002ad0:	d835      	bhi.n	8002b3e <__ssputs_r+0x7e>
 8002ad2:	898a      	ldrh	r2, [r1, #12]
 8002ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ad8:	d031      	beq.n	8002b3e <__ssputs_r+0x7e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	6825      	ldr	r5, [r4, #0]
 8002ade:	6909      	ldr	r1, [r1, #16]
 8002ae0:	1a6f      	subs	r7, r5, r1
 8002ae2:	6965      	ldr	r5, [r4, #20]
 8002ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ae8:	fb95 f5f3 	sdiv	r5, r5, r3
 8002aec:	f108 0301 	add.w	r3, r8, #1
 8002af0:	443b      	add	r3, r7
 8002af2:	429d      	cmp	r5, r3
 8002af4:	bf38      	it	cc
 8002af6:	461d      	movcc	r5, r3
 8002af8:	0553      	lsls	r3, r2, #21
 8002afa:	d531      	bpl.n	8002b60 <__ssputs_r+0xa0>
 8002afc:	4629      	mov	r1, r5
 8002afe:	f000 fb47 	bl	8003190 <_malloc_r>
 8002b02:	4606      	mov	r6, r0
 8002b04:	b950      	cbnz	r0, 8002b1c <__ssputs_r+0x5c>
 8002b06:	230c      	movs	r3, #12
 8002b08:	f8ca 3000 	str.w	r3, [sl]
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b16:	81a3      	strh	r3, [r4, #12]
 8002b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b1c:	463a      	mov	r2, r7
 8002b1e:	6921      	ldr	r1, [r4, #16]
 8002b20:	f000 fac4 	bl	80030ac <memcpy>
 8002b24:	89a3      	ldrh	r3, [r4, #12]
 8002b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2e:	81a3      	strh	r3, [r4, #12]
 8002b30:	6126      	str	r6, [r4, #16]
 8002b32:	443e      	add	r6, r7
 8002b34:	6026      	str	r6, [r4, #0]
 8002b36:	4646      	mov	r6, r8
 8002b38:	6165      	str	r5, [r4, #20]
 8002b3a:	1bed      	subs	r5, r5, r7
 8002b3c:	60a5      	str	r5, [r4, #8]
 8002b3e:	4546      	cmp	r6, r8
 8002b40:	bf28      	it	cs
 8002b42:	4646      	movcs	r6, r8
 8002b44:	4649      	mov	r1, r9
 8002b46:	4632      	mov	r2, r6
 8002b48:	6820      	ldr	r0, [r4, #0]
 8002b4a:	f000 faba 	bl	80030c2 <memmove>
 8002b4e:	68a3      	ldr	r3, [r4, #8]
 8002b50:	2000      	movs	r0, #0
 8002b52:	1b9b      	subs	r3, r3, r6
 8002b54:	60a3      	str	r3, [r4, #8]
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	441e      	add	r6, r3
 8002b5a:	6026      	str	r6, [r4, #0]
 8002b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b60:	462a      	mov	r2, r5
 8002b62:	f000 fb73 	bl	800324c <_realloc_r>
 8002b66:	4606      	mov	r6, r0
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d1e1      	bne.n	8002b30 <__ssputs_r+0x70>
 8002b6c:	6921      	ldr	r1, [r4, #16]
 8002b6e:	4650      	mov	r0, sl
 8002b70:	f000 fac2 	bl	80030f8 <_free_r>
 8002b74:	e7c7      	b.n	8002b06 <__ssputs_r+0x46>
	...

08002b78 <_svfiprintf_r>:
 8002b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7c:	b09d      	sub	sp, #116	; 0x74
 8002b7e:	9303      	str	r3, [sp, #12]
 8002b80:	898b      	ldrh	r3, [r1, #12]
 8002b82:	4680      	mov	r8, r0
 8002b84:	061c      	lsls	r4, r3, #24
 8002b86:	460d      	mov	r5, r1
 8002b88:	4616      	mov	r6, r2
 8002b8a:	d50f      	bpl.n	8002bac <_svfiprintf_r+0x34>
 8002b8c:	690b      	ldr	r3, [r1, #16]
 8002b8e:	b96b      	cbnz	r3, 8002bac <_svfiprintf_r+0x34>
 8002b90:	2140      	movs	r1, #64	; 0x40
 8002b92:	f000 fafd 	bl	8003190 <_malloc_r>
 8002b96:	6028      	str	r0, [r5, #0]
 8002b98:	6128      	str	r0, [r5, #16]
 8002b9a:	b928      	cbnz	r0, 8002ba8 <_svfiprintf_r+0x30>
 8002b9c:	230c      	movs	r3, #12
 8002b9e:	f8c8 3000 	str.w	r3, [r8]
 8002ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba6:	e0c4      	b.n	8002d32 <_svfiprintf_r+0x1ba>
 8002ba8:	2340      	movs	r3, #64	; 0x40
 8002baa:	616b      	str	r3, [r5, #20]
 8002bac:	2300      	movs	r3, #0
 8002bae:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bb6:	2330      	movs	r3, #48	; 0x30
 8002bb8:	f04f 0b01 	mov.w	fp, #1
 8002bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bc0:	4637      	mov	r7, r6
 8002bc2:	463c      	mov	r4, r7
 8002bc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d13c      	bne.n	8002c46 <_svfiprintf_r+0xce>
 8002bcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8002bd0:	d00b      	beq.n	8002bea <_svfiprintf_r+0x72>
 8002bd2:	4653      	mov	r3, sl
 8002bd4:	4632      	mov	r2, r6
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	4640      	mov	r0, r8
 8002bda:	f7ff ff71 	bl	8002ac0 <__ssputs_r>
 8002bde:	3001      	adds	r0, #1
 8002be0:	f000 80a2 	beq.w	8002d28 <_svfiprintf_r+0x1b0>
 8002be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002be6:	4453      	add	r3, sl
 8002be8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bea:	783b      	ldrb	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 809b 	beq.w	8002d28 <_svfiprintf_r+0x1b0>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	9304      	str	r3, [sp, #16]
 8002bfa:	9307      	str	r3, [sp, #28]
 8002bfc:	9205      	str	r2, [sp, #20]
 8002bfe:	9306      	str	r3, [sp, #24]
 8002c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c04:	931a      	str	r3, [sp, #104]	; 0x68
 8002c06:	2205      	movs	r2, #5
 8002c08:	7821      	ldrb	r1, [r4, #0]
 8002c0a:	4850      	ldr	r0, [pc, #320]	; (8002d4c <_svfiprintf_r+0x1d4>)
 8002c0c:	f000 fa40 	bl	8003090 <memchr>
 8002c10:	1c67      	adds	r7, r4, #1
 8002c12:	9b04      	ldr	r3, [sp, #16]
 8002c14:	b9d8      	cbnz	r0, 8002c4e <_svfiprintf_r+0xd6>
 8002c16:	06d9      	lsls	r1, r3, #27
 8002c18:	bf44      	itt	mi
 8002c1a:	2220      	movmi	r2, #32
 8002c1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c20:	071a      	lsls	r2, r3, #28
 8002c22:	bf44      	itt	mi
 8002c24:	222b      	movmi	r2, #43	; 0x2b
 8002c26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c2a:	7822      	ldrb	r2, [r4, #0]
 8002c2c:	2a2a      	cmp	r2, #42	; 0x2a
 8002c2e:	d016      	beq.n	8002c5e <_svfiprintf_r+0xe6>
 8002c30:	2100      	movs	r1, #0
 8002c32:	200a      	movs	r0, #10
 8002c34:	9a07      	ldr	r2, [sp, #28]
 8002c36:	4627      	mov	r7, r4
 8002c38:	783b      	ldrb	r3, [r7, #0]
 8002c3a:	3401      	adds	r4, #1
 8002c3c:	3b30      	subs	r3, #48	; 0x30
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d950      	bls.n	8002ce4 <_svfiprintf_r+0x16c>
 8002c42:	b1c9      	cbz	r1, 8002c78 <_svfiprintf_r+0x100>
 8002c44:	e011      	b.n	8002c6a <_svfiprintf_r+0xf2>
 8002c46:	2b25      	cmp	r3, #37	; 0x25
 8002c48:	d0c0      	beq.n	8002bcc <_svfiprintf_r+0x54>
 8002c4a:	4627      	mov	r7, r4
 8002c4c:	e7b9      	b.n	8002bc2 <_svfiprintf_r+0x4a>
 8002c4e:	4a3f      	ldr	r2, [pc, #252]	; (8002d4c <_svfiprintf_r+0x1d4>)
 8002c50:	463c      	mov	r4, r7
 8002c52:	1a80      	subs	r0, r0, r2
 8002c54:	fa0b f000 	lsl.w	r0, fp, r0
 8002c58:	4318      	orrs	r0, r3
 8002c5a:	9004      	str	r0, [sp, #16]
 8002c5c:	e7d3      	b.n	8002c06 <_svfiprintf_r+0x8e>
 8002c5e:	9a03      	ldr	r2, [sp, #12]
 8002c60:	1d11      	adds	r1, r2, #4
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	9103      	str	r1, [sp, #12]
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	db01      	blt.n	8002c6e <_svfiprintf_r+0xf6>
 8002c6a:	9207      	str	r2, [sp, #28]
 8002c6c:	e004      	b.n	8002c78 <_svfiprintf_r+0x100>
 8002c6e:	4252      	negs	r2, r2
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	9207      	str	r2, [sp, #28]
 8002c76:	9304      	str	r3, [sp, #16]
 8002c78:	783b      	ldrb	r3, [r7, #0]
 8002c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c7c:	d10d      	bne.n	8002c9a <_svfiprintf_r+0x122>
 8002c7e:	787b      	ldrb	r3, [r7, #1]
 8002c80:	1c79      	adds	r1, r7, #1
 8002c82:	2b2a      	cmp	r3, #42	; 0x2a
 8002c84:	d132      	bne.n	8002cec <_svfiprintf_r+0x174>
 8002c86:	9b03      	ldr	r3, [sp, #12]
 8002c88:	3702      	adds	r7, #2
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	9203      	str	r2, [sp, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bfb8      	it	lt
 8002c94:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c98:	9305      	str	r3, [sp, #20]
 8002c9a:	4c2d      	ldr	r4, [pc, #180]	; (8002d50 <_svfiprintf_r+0x1d8>)
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	7839      	ldrb	r1, [r7, #0]
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f9f5 	bl	8003090 <memchr>
 8002ca6:	b138      	cbz	r0, 8002cb8 <_svfiprintf_r+0x140>
 8002ca8:	2340      	movs	r3, #64	; 0x40
 8002caa:	1b00      	subs	r0, r0, r4
 8002cac:	fa03 f000 	lsl.w	r0, r3, r0
 8002cb0:	9b04      	ldr	r3, [sp, #16]
 8002cb2:	3701      	adds	r7, #1
 8002cb4:	4303      	orrs	r3, r0
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	7839      	ldrb	r1, [r7, #0]
 8002cba:	2206      	movs	r2, #6
 8002cbc:	4825      	ldr	r0, [pc, #148]	; (8002d54 <_svfiprintf_r+0x1dc>)
 8002cbe:	1c7e      	adds	r6, r7, #1
 8002cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cc4:	f000 f9e4 	bl	8003090 <memchr>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d035      	beq.n	8002d38 <_svfiprintf_r+0x1c0>
 8002ccc:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <_svfiprintf_r+0x1e0>)
 8002cce:	b9fb      	cbnz	r3, 8002d10 <_svfiprintf_r+0x198>
 8002cd0:	9b03      	ldr	r3, [sp, #12]
 8002cd2:	3307      	adds	r3, #7
 8002cd4:	f023 0307 	bic.w	r3, r3, #7
 8002cd8:	3308      	adds	r3, #8
 8002cda:	9303      	str	r3, [sp, #12]
 8002cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cde:	444b      	add	r3, r9
 8002ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce2:	e76d      	b.n	8002bc0 <_svfiprintf_r+0x48>
 8002ce4:	fb00 3202 	mla	r2, r0, r2, r3
 8002ce8:	2101      	movs	r1, #1
 8002cea:	e7a4      	b.n	8002c36 <_svfiprintf_r+0xbe>
 8002cec:	2300      	movs	r3, #0
 8002cee:	240a      	movs	r4, #10
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	9305      	str	r3, [sp, #20]
 8002cf4:	460f      	mov	r7, r1
 8002cf6:	783a      	ldrb	r2, [r7, #0]
 8002cf8:	3101      	adds	r1, #1
 8002cfa:	3a30      	subs	r2, #48	; 0x30
 8002cfc:	2a09      	cmp	r2, #9
 8002cfe:	d903      	bls.n	8002d08 <_svfiprintf_r+0x190>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ca      	beq.n	8002c9a <_svfiprintf_r+0x122>
 8002d04:	9005      	str	r0, [sp, #20]
 8002d06:	e7c8      	b.n	8002c9a <_svfiprintf_r+0x122>
 8002d08:	fb04 2000 	mla	r0, r4, r0, r2
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e7f1      	b.n	8002cf4 <_svfiprintf_r+0x17c>
 8002d10:	ab03      	add	r3, sp, #12
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	462a      	mov	r2, r5
 8002d16:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <_svfiprintf_r+0x1e4>)
 8002d18:	a904      	add	r1, sp, #16
 8002d1a:	4640      	mov	r0, r8
 8002d1c:	f3af 8000 	nop.w
 8002d20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002d24:	4681      	mov	r9, r0
 8002d26:	d1d9      	bne.n	8002cdc <_svfiprintf_r+0x164>
 8002d28:	89ab      	ldrh	r3, [r5, #12]
 8002d2a:	065b      	lsls	r3, r3, #25
 8002d2c:	f53f af39 	bmi.w	8002ba2 <_svfiprintf_r+0x2a>
 8002d30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d32:	b01d      	add	sp, #116	; 0x74
 8002d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d38:	ab03      	add	r3, sp, #12
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	462a      	mov	r2, r5
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <_svfiprintf_r+0x1e4>)
 8002d40:	a904      	add	r1, sp, #16
 8002d42:	4640      	mov	r0, r8
 8002d44:	f000 f884 	bl	8002e50 <_printf_i>
 8002d48:	e7ea      	b.n	8002d20 <_svfiprintf_r+0x1a8>
 8002d4a:	bf00      	nop
 8002d4c:	080040d4 	.word	0x080040d4
 8002d50:	080040da 	.word	0x080040da
 8002d54:	080040de 	.word	0x080040de
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	08002ac1 	.word	0x08002ac1

08002d60 <_printf_common>:
 8002d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d64:	4691      	mov	r9, r2
 8002d66:	461f      	mov	r7, r3
 8002d68:	688a      	ldr	r2, [r1, #8]
 8002d6a:	690b      	ldr	r3, [r1, #16]
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bfb8      	it	lt
 8002d72:	4613      	movlt	r3, r2
 8002d74:	f8c9 3000 	str.w	r3, [r9]
 8002d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d7c:	460c      	mov	r4, r1
 8002d7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d82:	b112      	cbz	r2, 8002d8a <_printf_common+0x2a>
 8002d84:	3301      	adds	r3, #1
 8002d86:	f8c9 3000 	str.w	r3, [r9]
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	0699      	lsls	r1, r3, #26
 8002d8e:	bf42      	ittt	mi
 8002d90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d94:	3302      	addmi	r3, #2
 8002d96:	f8c9 3000 	strmi.w	r3, [r9]
 8002d9a:	6825      	ldr	r5, [r4, #0]
 8002d9c:	f015 0506 	ands.w	r5, r5, #6
 8002da0:	d107      	bne.n	8002db2 <_printf_common+0x52>
 8002da2:	f104 0a19 	add.w	sl, r4, #25
 8002da6:	68e3      	ldr	r3, [r4, #12]
 8002da8:	f8d9 2000 	ldr.w	r2, [r9]
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	429d      	cmp	r5, r3
 8002db0:	db2a      	blt.n	8002e08 <_printf_common+0xa8>
 8002db2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002db6:	6822      	ldr	r2, [r4, #0]
 8002db8:	3300      	adds	r3, #0
 8002dba:	bf18      	it	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	0692      	lsls	r2, r2, #26
 8002dc0:	d42f      	bmi.n	8002e22 <_printf_common+0xc2>
 8002dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dc6:	4639      	mov	r1, r7
 8002dc8:	4630      	mov	r0, r6
 8002dca:	47c0      	blx	r8
 8002dcc:	3001      	adds	r0, #1
 8002dce:	d022      	beq.n	8002e16 <_printf_common+0xb6>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	68e5      	ldr	r5, [r4, #12]
 8002dd4:	f003 0306 	and.w	r3, r3, #6
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	bf18      	it	ne
 8002ddc:	2500      	movne	r5, #0
 8002dde:	f8d9 2000 	ldr.w	r2, [r9]
 8002de2:	f04f 0900 	mov.w	r9, #0
 8002de6:	bf08      	it	eq
 8002de8:	1aad      	subeq	r5, r5, r2
 8002dea:	68a3      	ldr	r3, [r4, #8]
 8002dec:	6922      	ldr	r2, [r4, #16]
 8002dee:	bf08      	it	eq
 8002df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bfc4      	itt	gt
 8002df8:	1a9b      	subgt	r3, r3, r2
 8002dfa:	18ed      	addgt	r5, r5, r3
 8002dfc:	341a      	adds	r4, #26
 8002dfe:	454d      	cmp	r5, r9
 8002e00:	d11b      	bne.n	8002e3a <_printf_common+0xda>
 8002e02:	2000      	movs	r0, #0
 8002e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4652      	mov	r2, sl
 8002e0c:	4639      	mov	r1, r7
 8002e0e:	4630      	mov	r0, r6
 8002e10:	47c0      	blx	r8
 8002e12:	3001      	adds	r0, #1
 8002e14:	d103      	bne.n	8002e1e <_printf_common+0xbe>
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e1e:	3501      	adds	r5, #1
 8002e20:	e7c1      	b.n	8002da6 <_printf_common+0x46>
 8002e22:	2030      	movs	r0, #48	; 0x30
 8002e24:	18e1      	adds	r1, r4, r3
 8002e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e30:	4422      	add	r2, r4
 8002e32:	3302      	adds	r3, #2
 8002e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e38:	e7c3      	b.n	8002dc2 <_printf_common+0x62>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	4639      	mov	r1, r7
 8002e40:	4630      	mov	r0, r6
 8002e42:	47c0      	blx	r8
 8002e44:	3001      	adds	r0, #1
 8002e46:	d0e6      	beq.n	8002e16 <_printf_common+0xb6>
 8002e48:	f109 0901 	add.w	r9, r9, #1
 8002e4c:	e7d7      	b.n	8002dfe <_printf_common+0x9e>
	...

08002e50 <_printf_i>:
 8002e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e54:	4617      	mov	r7, r2
 8002e56:	7e0a      	ldrb	r2, [r1, #24]
 8002e58:	b085      	sub	sp, #20
 8002e5a:	2a6e      	cmp	r2, #110	; 0x6e
 8002e5c:	4698      	mov	r8, r3
 8002e5e:	4606      	mov	r6, r0
 8002e60:	460c      	mov	r4, r1
 8002e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e64:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002e68:	f000 80bc 	beq.w	8002fe4 <_printf_i+0x194>
 8002e6c:	d81a      	bhi.n	8002ea4 <_printf_i+0x54>
 8002e6e:	2a63      	cmp	r2, #99	; 0x63
 8002e70:	d02e      	beq.n	8002ed0 <_printf_i+0x80>
 8002e72:	d80a      	bhi.n	8002e8a <_printf_i+0x3a>
 8002e74:	2a00      	cmp	r2, #0
 8002e76:	f000 80c8 	beq.w	800300a <_printf_i+0x1ba>
 8002e7a:	2a58      	cmp	r2, #88	; 0x58
 8002e7c:	f000 808a 	beq.w	8002f94 <_printf_i+0x144>
 8002e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e84:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002e88:	e02a      	b.n	8002ee0 <_printf_i+0x90>
 8002e8a:	2a64      	cmp	r2, #100	; 0x64
 8002e8c:	d001      	beq.n	8002e92 <_printf_i+0x42>
 8002e8e:	2a69      	cmp	r2, #105	; 0x69
 8002e90:	d1f6      	bne.n	8002e80 <_printf_i+0x30>
 8002e92:	6821      	ldr	r1, [r4, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e9a:	d023      	beq.n	8002ee4 <_printf_i+0x94>
 8002e9c:	1d11      	adds	r1, r2, #4
 8002e9e:	6019      	str	r1, [r3, #0]
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	e027      	b.n	8002ef4 <_printf_i+0xa4>
 8002ea4:	2a73      	cmp	r2, #115	; 0x73
 8002ea6:	f000 80b4 	beq.w	8003012 <_printf_i+0x1c2>
 8002eaa:	d808      	bhi.n	8002ebe <_printf_i+0x6e>
 8002eac:	2a6f      	cmp	r2, #111	; 0x6f
 8002eae:	d02a      	beq.n	8002f06 <_printf_i+0xb6>
 8002eb0:	2a70      	cmp	r2, #112	; 0x70
 8002eb2:	d1e5      	bne.n	8002e80 <_printf_i+0x30>
 8002eb4:	680a      	ldr	r2, [r1, #0]
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	600a      	str	r2, [r1, #0]
 8002ebc:	e003      	b.n	8002ec6 <_printf_i+0x76>
 8002ebe:	2a75      	cmp	r2, #117	; 0x75
 8002ec0:	d021      	beq.n	8002f06 <_printf_i+0xb6>
 8002ec2:	2a78      	cmp	r2, #120	; 0x78
 8002ec4:	d1dc      	bne.n	8002e80 <_printf_i+0x30>
 8002ec6:	2278      	movs	r2, #120	; 0x78
 8002ec8:	496f      	ldr	r1, [pc, #444]	; (8003088 <_printf_i+0x238>)
 8002eca:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002ece:	e064      	b.n	8002f9a <_printf_i+0x14a>
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002ed6:	1d11      	adds	r1, r2, #4
 8002ed8:	6019      	str	r1, [r3, #0]
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0a3      	b.n	800302c <_printf_i+0x1dc>
 8002ee4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002ee8:	f102 0104 	add.w	r1, r2, #4
 8002eec:	6019      	str	r1, [r3, #0]
 8002eee:	d0d7      	beq.n	8002ea0 <_printf_i+0x50>
 8002ef0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da03      	bge.n	8002f00 <_printf_i+0xb0>
 8002ef8:	222d      	movs	r2, #45	; 0x2d
 8002efa:	425b      	negs	r3, r3
 8002efc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f00:	4962      	ldr	r1, [pc, #392]	; (800308c <_printf_i+0x23c>)
 8002f02:	220a      	movs	r2, #10
 8002f04:	e017      	b.n	8002f36 <_printf_i+0xe6>
 8002f06:	6820      	ldr	r0, [r4, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f0e:	d003      	beq.n	8002f18 <_printf_i+0xc8>
 8002f10:	1d08      	adds	r0, r1, #4
 8002f12:	6018      	str	r0, [r3, #0]
 8002f14:	680b      	ldr	r3, [r1, #0]
 8002f16:	e006      	b.n	8002f26 <_printf_i+0xd6>
 8002f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f1c:	f101 0004 	add.w	r0, r1, #4
 8002f20:	6018      	str	r0, [r3, #0]
 8002f22:	d0f7      	beq.n	8002f14 <_printf_i+0xc4>
 8002f24:	880b      	ldrh	r3, [r1, #0]
 8002f26:	2a6f      	cmp	r2, #111	; 0x6f
 8002f28:	bf14      	ite	ne
 8002f2a:	220a      	movne	r2, #10
 8002f2c:	2208      	moveq	r2, #8
 8002f2e:	4957      	ldr	r1, [pc, #348]	; (800308c <_printf_i+0x23c>)
 8002f30:	2000      	movs	r0, #0
 8002f32:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002f36:	6865      	ldr	r5, [r4, #4]
 8002f38:	2d00      	cmp	r5, #0
 8002f3a:	60a5      	str	r5, [r4, #8]
 8002f3c:	f2c0 809c 	blt.w	8003078 <_printf_i+0x228>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	f020 0004 	bic.w	r0, r0, #4
 8002f46:	6020      	str	r0, [r4, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d13f      	bne.n	8002fcc <_printf_i+0x17c>
 8002f4c:	2d00      	cmp	r5, #0
 8002f4e:	f040 8095 	bne.w	800307c <_printf_i+0x22c>
 8002f52:	4675      	mov	r5, lr
 8002f54:	2a08      	cmp	r2, #8
 8002f56:	d10b      	bne.n	8002f70 <_printf_i+0x120>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	07da      	lsls	r2, r3, #31
 8002f5c:	d508      	bpl.n	8002f70 <_printf_i+0x120>
 8002f5e:	6923      	ldr	r3, [r4, #16]
 8002f60:	6862      	ldr	r2, [r4, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bfde      	ittt	le
 8002f66:	2330      	movle	r3, #48	; 0x30
 8002f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f70:	ebae 0305 	sub.w	r3, lr, r5
 8002f74:	6123      	str	r3, [r4, #16]
 8002f76:	f8cd 8000 	str.w	r8, [sp]
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	aa03      	add	r2, sp, #12
 8002f7e:	4621      	mov	r1, r4
 8002f80:	4630      	mov	r0, r6
 8002f82:	f7ff feed 	bl	8002d60 <_printf_common>
 8002f86:	3001      	adds	r0, #1
 8002f88:	d155      	bne.n	8003036 <_printf_i+0x1e6>
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8e:	b005      	add	sp, #20
 8002f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f94:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002f98:	493c      	ldr	r1, [pc, #240]	; (800308c <_printf_i+0x23c>)
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002fa2:	f100 0504 	add.w	r5, r0, #4
 8002fa6:	601d      	str	r5, [r3, #0]
 8002fa8:	d001      	beq.n	8002fae <_printf_i+0x15e>
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	e002      	b.n	8002fb4 <_printf_i+0x164>
 8002fae:	0655      	lsls	r5, r2, #25
 8002fb0:	d5fb      	bpl.n	8002faa <_printf_i+0x15a>
 8002fb2:	8803      	ldrh	r3, [r0, #0]
 8002fb4:	07d0      	lsls	r0, r2, #31
 8002fb6:	bf44      	itt	mi
 8002fb8:	f042 0220 	orrmi.w	r2, r2, #32
 8002fbc:	6022      	strmi	r2, [r4, #0]
 8002fbe:	b91b      	cbnz	r3, 8002fc8 <_printf_i+0x178>
 8002fc0:	6822      	ldr	r2, [r4, #0]
 8002fc2:	f022 0220 	bic.w	r2, r2, #32
 8002fc6:	6022      	str	r2, [r4, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	e7b1      	b.n	8002f30 <_printf_i+0xe0>
 8002fcc:	4675      	mov	r5, lr
 8002fce:	fbb3 f0f2 	udiv	r0, r3, r2
 8002fd2:	fb02 3310 	mls	r3, r2, r0, r3
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d1f5      	bne.n	8002fce <_printf_i+0x17e>
 8002fe2:	e7b7      	b.n	8002f54 <_printf_i+0x104>
 8002fe4:	6808      	ldr	r0, [r1, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002fec:	6949      	ldr	r1, [r1, #20]
 8002fee:	d004      	beq.n	8002ffa <_printf_i+0x1aa>
 8002ff0:	1d10      	adds	r0, r2, #4
 8002ff2:	6018      	str	r0, [r3, #0]
 8002ff4:	6813      	ldr	r3, [r2, #0]
 8002ff6:	6019      	str	r1, [r3, #0]
 8002ff8:	e007      	b.n	800300a <_printf_i+0x1ba>
 8002ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ffe:	f102 0004 	add.w	r0, r2, #4
 8003002:	6018      	str	r0, [r3, #0]
 8003004:	6813      	ldr	r3, [r2, #0]
 8003006:	d0f6      	beq.n	8002ff6 <_printf_i+0x1a6>
 8003008:	8019      	strh	r1, [r3, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	4675      	mov	r5, lr
 800300e:	6123      	str	r3, [r4, #16]
 8003010:	e7b1      	b.n	8002f76 <_printf_i+0x126>
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	1d11      	adds	r1, r2, #4
 8003016:	6019      	str	r1, [r3, #0]
 8003018:	6815      	ldr	r5, [r2, #0]
 800301a:	2100      	movs	r1, #0
 800301c:	6862      	ldr	r2, [r4, #4]
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f836 	bl	8003090 <memchr>
 8003024:	b108      	cbz	r0, 800302a <_printf_i+0x1da>
 8003026:	1b40      	subs	r0, r0, r5
 8003028:	6060      	str	r0, [r4, #4]
 800302a:	6863      	ldr	r3, [r4, #4]
 800302c:	6123      	str	r3, [r4, #16]
 800302e:	2300      	movs	r3, #0
 8003030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003034:	e79f      	b.n	8002f76 <_printf_i+0x126>
 8003036:	6923      	ldr	r3, [r4, #16]
 8003038:	462a      	mov	r2, r5
 800303a:	4639      	mov	r1, r7
 800303c:	4630      	mov	r0, r6
 800303e:	47c0      	blx	r8
 8003040:	3001      	adds	r0, #1
 8003042:	d0a2      	beq.n	8002f8a <_printf_i+0x13a>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	079b      	lsls	r3, r3, #30
 8003048:	d507      	bpl.n	800305a <_printf_i+0x20a>
 800304a:	2500      	movs	r5, #0
 800304c:	f104 0919 	add.w	r9, r4, #25
 8003050:	68e3      	ldr	r3, [r4, #12]
 8003052:	9a03      	ldr	r2, [sp, #12]
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	429d      	cmp	r5, r3
 8003058:	db05      	blt.n	8003066 <_printf_i+0x216>
 800305a:	68e0      	ldr	r0, [r4, #12]
 800305c:	9b03      	ldr	r3, [sp, #12]
 800305e:	4298      	cmp	r0, r3
 8003060:	bfb8      	it	lt
 8003062:	4618      	movlt	r0, r3
 8003064:	e793      	b.n	8002f8e <_printf_i+0x13e>
 8003066:	2301      	movs	r3, #1
 8003068:	464a      	mov	r2, r9
 800306a:	4639      	mov	r1, r7
 800306c:	4630      	mov	r0, r6
 800306e:	47c0      	blx	r8
 8003070:	3001      	adds	r0, #1
 8003072:	d08a      	beq.n	8002f8a <_printf_i+0x13a>
 8003074:	3501      	adds	r5, #1
 8003076:	e7eb      	b.n	8003050 <_printf_i+0x200>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1a7      	bne.n	8002fcc <_printf_i+0x17c>
 800307c:	780b      	ldrb	r3, [r1, #0]
 800307e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003086:	e765      	b.n	8002f54 <_printf_i+0x104>
 8003088:	080040f6 	.word	0x080040f6
 800308c:	080040e5 	.word	0x080040e5

08003090 <memchr>:
 8003090:	b510      	push	{r4, lr}
 8003092:	b2c9      	uxtb	r1, r1
 8003094:	4402      	add	r2, r0
 8003096:	4290      	cmp	r0, r2
 8003098:	4603      	mov	r3, r0
 800309a:	d101      	bne.n	80030a0 <memchr+0x10>
 800309c:	2000      	movs	r0, #0
 800309e:	bd10      	pop	{r4, pc}
 80030a0:	781c      	ldrb	r4, [r3, #0]
 80030a2:	3001      	adds	r0, #1
 80030a4:	428c      	cmp	r4, r1
 80030a6:	d1f6      	bne.n	8003096 <memchr+0x6>
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd10      	pop	{r4, pc}

080030ac <memcpy>:
 80030ac:	b510      	push	{r4, lr}
 80030ae:	1e43      	subs	r3, r0, #1
 80030b0:	440a      	add	r2, r1
 80030b2:	4291      	cmp	r1, r2
 80030b4:	d100      	bne.n	80030b8 <memcpy+0xc>
 80030b6:	bd10      	pop	{r4, pc}
 80030b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030c0:	e7f7      	b.n	80030b2 <memcpy+0x6>

080030c2 <memmove>:
 80030c2:	4288      	cmp	r0, r1
 80030c4:	b510      	push	{r4, lr}
 80030c6:	eb01 0302 	add.w	r3, r1, r2
 80030ca:	d803      	bhi.n	80030d4 <memmove+0x12>
 80030cc:	1e42      	subs	r2, r0, #1
 80030ce:	4299      	cmp	r1, r3
 80030d0:	d10c      	bne.n	80030ec <memmove+0x2a>
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	4298      	cmp	r0, r3
 80030d6:	d2f9      	bcs.n	80030cc <memmove+0xa>
 80030d8:	1881      	adds	r1, r0, r2
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	42d3      	cmn	r3, r2
 80030de:	d100      	bne.n	80030e2 <memmove+0x20>
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80030ea:	e7f7      	b.n	80030dc <memmove+0x1a>
 80030ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030f4:	e7eb      	b.n	80030ce <memmove+0xc>
	...

080030f8 <_free_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	2900      	cmp	r1, #0
 80030fe:	d043      	beq.n	8003188 <_free_r+0x90>
 8003100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003104:	1f0c      	subs	r4, r1, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	bfb8      	it	lt
 800310a:	18e4      	addlt	r4, r4, r3
 800310c:	f000 f8d4 	bl	80032b8 <__malloc_lock>
 8003110:	4a1e      	ldr	r2, [pc, #120]	; (800318c <_free_r+0x94>)
 8003112:	6813      	ldr	r3, [r2, #0]
 8003114:	4610      	mov	r0, r2
 8003116:	b933      	cbnz	r3, 8003126 <_free_r+0x2e>
 8003118:	6063      	str	r3, [r4, #4]
 800311a:	6014      	str	r4, [r2, #0]
 800311c:	4628      	mov	r0, r5
 800311e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003122:	f000 b8ca 	b.w	80032ba <__malloc_unlock>
 8003126:	42a3      	cmp	r3, r4
 8003128:	d90b      	bls.n	8003142 <_free_r+0x4a>
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	1862      	adds	r2, r4, r1
 800312e:	4293      	cmp	r3, r2
 8003130:	bf01      	itttt	eq
 8003132:	681a      	ldreq	r2, [r3, #0]
 8003134:	685b      	ldreq	r3, [r3, #4]
 8003136:	1852      	addeq	r2, r2, r1
 8003138:	6022      	streq	r2, [r4, #0]
 800313a:	6063      	str	r3, [r4, #4]
 800313c:	6004      	str	r4, [r0, #0]
 800313e:	e7ed      	b.n	800311c <_free_r+0x24>
 8003140:	4613      	mov	r3, r2
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	b10a      	cbz	r2, 800314a <_free_r+0x52>
 8003146:	42a2      	cmp	r2, r4
 8003148:	d9fa      	bls.n	8003140 <_free_r+0x48>
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	1858      	adds	r0, r3, r1
 800314e:	42a0      	cmp	r0, r4
 8003150:	d10b      	bne.n	800316a <_free_r+0x72>
 8003152:	6820      	ldr	r0, [r4, #0]
 8003154:	4401      	add	r1, r0
 8003156:	1858      	adds	r0, r3, r1
 8003158:	4282      	cmp	r2, r0
 800315a:	6019      	str	r1, [r3, #0]
 800315c:	d1de      	bne.n	800311c <_free_r+0x24>
 800315e:	6810      	ldr	r0, [r2, #0]
 8003160:	6852      	ldr	r2, [r2, #4]
 8003162:	4401      	add	r1, r0
 8003164:	6019      	str	r1, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	e7d8      	b.n	800311c <_free_r+0x24>
 800316a:	d902      	bls.n	8003172 <_free_r+0x7a>
 800316c:	230c      	movs	r3, #12
 800316e:	602b      	str	r3, [r5, #0]
 8003170:	e7d4      	b.n	800311c <_free_r+0x24>
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	1821      	adds	r1, r4, r0
 8003176:	428a      	cmp	r2, r1
 8003178:	bf01      	itttt	eq
 800317a:	6811      	ldreq	r1, [r2, #0]
 800317c:	6852      	ldreq	r2, [r2, #4]
 800317e:	1809      	addeq	r1, r1, r0
 8003180:	6021      	streq	r1, [r4, #0]
 8003182:	6062      	str	r2, [r4, #4]
 8003184:	605c      	str	r4, [r3, #4]
 8003186:	e7c9      	b.n	800311c <_free_r+0x24>
 8003188:	bd38      	pop	{r3, r4, r5, pc}
 800318a:	bf00      	nop
 800318c:	200004a0 	.word	0x200004a0

08003190 <_malloc_r>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	1ccd      	adds	r5, r1, #3
 8003194:	f025 0503 	bic.w	r5, r5, #3
 8003198:	3508      	adds	r5, #8
 800319a:	2d0c      	cmp	r5, #12
 800319c:	bf38      	it	cc
 800319e:	250c      	movcc	r5, #12
 80031a0:	2d00      	cmp	r5, #0
 80031a2:	4606      	mov	r6, r0
 80031a4:	db01      	blt.n	80031aa <_malloc_r+0x1a>
 80031a6:	42a9      	cmp	r1, r5
 80031a8:	d903      	bls.n	80031b2 <_malloc_r+0x22>
 80031aa:	230c      	movs	r3, #12
 80031ac:	6033      	str	r3, [r6, #0]
 80031ae:	2000      	movs	r0, #0
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	f000 f881 	bl	80032b8 <__malloc_lock>
 80031b6:	4a23      	ldr	r2, [pc, #140]	; (8003244 <_malloc_r+0xb4>)
 80031b8:	6814      	ldr	r4, [r2, #0]
 80031ba:	4621      	mov	r1, r4
 80031bc:	b991      	cbnz	r1, 80031e4 <_malloc_r+0x54>
 80031be:	4c22      	ldr	r4, [pc, #136]	; (8003248 <_malloc_r+0xb8>)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	b91b      	cbnz	r3, 80031cc <_malloc_r+0x3c>
 80031c4:	4630      	mov	r0, r6
 80031c6:	f000 f867 	bl	8003298 <_sbrk_r>
 80031ca:	6020      	str	r0, [r4, #0]
 80031cc:	4629      	mov	r1, r5
 80031ce:	4630      	mov	r0, r6
 80031d0:	f000 f862 	bl	8003298 <_sbrk_r>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d126      	bne.n	8003226 <_malloc_r+0x96>
 80031d8:	230c      	movs	r3, #12
 80031da:	4630      	mov	r0, r6
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	f000 f86c 	bl	80032ba <__malloc_unlock>
 80031e2:	e7e4      	b.n	80031ae <_malloc_r+0x1e>
 80031e4:	680b      	ldr	r3, [r1, #0]
 80031e6:	1b5b      	subs	r3, r3, r5
 80031e8:	d41a      	bmi.n	8003220 <_malloc_r+0x90>
 80031ea:	2b0b      	cmp	r3, #11
 80031ec:	d90f      	bls.n	800320e <_malloc_r+0x7e>
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	18cc      	adds	r4, r1, r3
 80031f2:	50cd      	str	r5, [r1, r3]
 80031f4:	4630      	mov	r0, r6
 80031f6:	f000 f860 	bl	80032ba <__malloc_unlock>
 80031fa:	f104 000b 	add.w	r0, r4, #11
 80031fe:	1d23      	adds	r3, r4, #4
 8003200:	f020 0007 	bic.w	r0, r0, #7
 8003204:	1ac3      	subs	r3, r0, r3
 8003206:	d01b      	beq.n	8003240 <_malloc_r+0xb0>
 8003208:	425a      	negs	r2, r3
 800320a:	50e2      	str	r2, [r4, r3]
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	428c      	cmp	r4, r1
 8003210:	bf0b      	itete	eq
 8003212:	6863      	ldreq	r3, [r4, #4]
 8003214:	684b      	ldrne	r3, [r1, #4]
 8003216:	6013      	streq	r3, [r2, #0]
 8003218:	6063      	strne	r3, [r4, #4]
 800321a:	bf18      	it	ne
 800321c:	460c      	movne	r4, r1
 800321e:	e7e9      	b.n	80031f4 <_malloc_r+0x64>
 8003220:	460c      	mov	r4, r1
 8003222:	6849      	ldr	r1, [r1, #4]
 8003224:	e7ca      	b.n	80031bc <_malloc_r+0x2c>
 8003226:	1cc4      	adds	r4, r0, #3
 8003228:	f024 0403 	bic.w	r4, r4, #3
 800322c:	42a0      	cmp	r0, r4
 800322e:	d005      	beq.n	800323c <_malloc_r+0xac>
 8003230:	1a21      	subs	r1, r4, r0
 8003232:	4630      	mov	r0, r6
 8003234:	f000 f830 	bl	8003298 <_sbrk_r>
 8003238:	3001      	adds	r0, #1
 800323a:	d0cd      	beq.n	80031d8 <_malloc_r+0x48>
 800323c:	6025      	str	r5, [r4, #0]
 800323e:	e7d9      	b.n	80031f4 <_malloc_r+0x64>
 8003240:	bd70      	pop	{r4, r5, r6, pc}
 8003242:	bf00      	nop
 8003244:	200004a0 	.word	0x200004a0
 8003248:	200004a4 	.word	0x200004a4

0800324c <_realloc_r>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	4607      	mov	r7, r0
 8003250:	4614      	mov	r4, r2
 8003252:	460e      	mov	r6, r1
 8003254:	b921      	cbnz	r1, 8003260 <_realloc_r+0x14>
 8003256:	4611      	mov	r1, r2
 8003258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800325c:	f7ff bf98 	b.w	8003190 <_malloc_r>
 8003260:	b922      	cbnz	r2, 800326c <_realloc_r+0x20>
 8003262:	f7ff ff49 	bl	80030f8 <_free_r>
 8003266:	4625      	mov	r5, r4
 8003268:	4628      	mov	r0, r5
 800326a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800326c:	f000 f826 	bl	80032bc <_malloc_usable_size_r>
 8003270:	4284      	cmp	r4, r0
 8003272:	d90f      	bls.n	8003294 <_realloc_r+0x48>
 8003274:	4621      	mov	r1, r4
 8003276:	4638      	mov	r0, r7
 8003278:	f7ff ff8a 	bl	8003190 <_malloc_r>
 800327c:	4605      	mov	r5, r0
 800327e:	2800      	cmp	r0, #0
 8003280:	d0f2      	beq.n	8003268 <_realloc_r+0x1c>
 8003282:	4631      	mov	r1, r6
 8003284:	4622      	mov	r2, r4
 8003286:	f7ff ff11 	bl	80030ac <memcpy>
 800328a:	4631      	mov	r1, r6
 800328c:	4638      	mov	r0, r7
 800328e:	f7ff ff33 	bl	80030f8 <_free_r>
 8003292:	e7e9      	b.n	8003268 <_realloc_r+0x1c>
 8003294:	4635      	mov	r5, r6
 8003296:	e7e7      	b.n	8003268 <_realloc_r+0x1c>

08003298 <_sbrk_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	2300      	movs	r3, #0
 800329c:	4c05      	ldr	r4, [pc, #20]	; (80032b4 <_sbrk_r+0x1c>)
 800329e:	4605      	mov	r5, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	6023      	str	r3, [r4, #0]
 80032a4:	f7fd fd04 	bl	8000cb0 <_sbrk>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d102      	bne.n	80032b2 <_sbrk_r+0x1a>
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	b103      	cbz	r3, 80032b2 <_sbrk_r+0x1a>
 80032b0:	602b      	str	r3, [r5, #0]
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	200005f0 	.word	0x200005f0

080032b8 <__malloc_lock>:
 80032b8:	4770      	bx	lr

080032ba <__malloc_unlock>:
 80032ba:	4770      	bx	lr

080032bc <_malloc_usable_size_r>:
 80032bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80032c0:	2800      	cmp	r0, #0
 80032c2:	f1a0 0004 	sub.w	r0, r0, #4
 80032c6:	bfbc      	itt	lt
 80032c8:	580b      	ldrlt	r3, [r1, r0]
 80032ca:	18c0      	addlt	r0, r0, r3
 80032cc:	4770      	bx	lr
	...

080032d0 <_init>:
 80032d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d2:	bf00      	nop
 80032d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d6:	bc08      	pop	{r3}
 80032d8:	469e      	mov	lr, r3
 80032da:	4770      	bx	lr

080032dc <_fini>:
 80032dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032de:	bf00      	nop
 80032e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e2:	bc08      	pop	{r3}
 80032e4:	469e      	mov	lr, r3
 80032e6:	4770      	bx	lr
