
SolarTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08004f18  08004f18  00014f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800522c  0800522c  0001522c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006c8  20000000  08005230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000010c  200006c8  080058f8  000206c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  200007d4  080058f8  000207d4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  000206c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000efbf  00000000  00000000  000206f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023ae  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002605  00000000  00000000  00031a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000620  00000000  00000000  00034068  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000768  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003d1b  00000000  00000000  00034df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002252  00000000  00000000  00038b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003ad5d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000019a4  00000000  00000000  0003addc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200006c8 	.word	0x200006c8
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f00 	.word	0x08004f00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200006cc 	.word	0x200006cc
 800014c:	08004f00 	.word	0x08004f00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295
 8000a94:	f000 b97a 	b.w	8000d8c <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	9d08      	ldr	r5, [sp, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__udivmoddi4+0xb2>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d96c      	bls.n	8000ba0 <__udivmoddi4+0xf0>
 8000ac6:	fab2 fe82 	clz	lr, r2
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d00b      	beq.n	8000ae8 <__udivmoddi4+0x38>
 8000ad0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000adc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000ae4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ae8:	0c3a      	lsrs	r2, r7, #16
 8000aea:	fbbc f9f2 	udiv	r9, ip, r2
 8000aee:	b2bb      	uxth	r3, r7
 8000af0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000af4:	fb09 fa03 	mul.w	sl, r9, r3
 8000af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000afc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b00:	45b2      	cmp	sl, r6
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x6a>
 8000b04:	19f6      	adds	r6, r6, r7
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	f080 8125 	bcs.w	8000d58 <__udivmoddi4+0x2a8>
 8000b0e:	45b2      	cmp	sl, r6
 8000b10:	f240 8122 	bls.w	8000d58 <__udivmoddi4+0x2a8>
 8000b14:	f1a9 0902 	sub.w	r9, r9, #2
 8000b18:	443e      	add	r6, r7
 8000b1a:	eba6 060a 	sub.w	r6, r6, sl
 8000b1e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b22:	fb02 6610 	mls	r6, r2, r0, r6
 8000b26:	fb00 f303 	mul.w	r3, r0, r3
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x98>
 8000b34:	19e4      	adds	r4, r4, r7
 8000b36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3a:	f080 810b 	bcs.w	8000d54 <__udivmoddi4+0x2a4>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	f240 8108 	bls.w	8000d54 <__udivmoddi4+0x2a4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	1ae4      	subs	r4, r4, r3
 8000b4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d062      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5a:	602c      	str	r4, [r5, #0]
 8000b5c:	606b      	str	r3, [r5, #4]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0xc6>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d055      	beq.n	8000c16 <__udivmoddi4+0x166>
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b70:	4608      	mov	r0, r1
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <__udivmoddi4+0x1ee>
 8000b80:	42b3      	cmp	r3, r6
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xda>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80fc 	bhi.w	8000d82 <__udivmoddi4+0x2d2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	46b4      	mov	ip, r6
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d040      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	b912      	cbnz	r2, 8000ba8 <__udivmoddi4+0xf8>
 8000ba2:	2701      	movs	r7, #1
 8000ba4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ba8:	fab7 fe87 	clz	lr, r7
 8000bac:	f1be 0f00 	cmp.w	lr, #0
 8000bb0:	d135      	bne.n	8000c1e <__udivmoddi4+0x16e>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	1bf6      	subs	r6, r6, r7
 8000bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bba:	fa1f f887 	uxth.w	r8, r7
 8000bbe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000bc2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000bc6:	fb08 f002 	mul.w	r0, r8, r2
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d907      	bls.n	8000be4 <__udivmoddi4+0x134>
 8000bd4:	19f6      	adds	r6, r6, r7
 8000bd6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x132>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	f200 80d2 	bhi.w	8000d86 <__udivmoddi4+0x2d6>
 8000be2:	461a      	mov	r2, r3
 8000be4:	1a36      	subs	r6, r6, r0
 8000be6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000bea:	fb0c 6610 	mls	r6, ip, r0, r6
 8000bee:	fb08 f800 	mul.w	r8, r8, r0
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x15c>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x15a>
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	f200 80b9 	bhi.w	8000d7c <__udivmoddi4+0x2cc>
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	eba4 0408 	sub.w	r4, r4, r8
 8000c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c14:	e79c      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c22:	f1ce 0320 	rsb	r3, lr, #32
 8000c26:	fa26 f203 	lsr.w	r2, r6, r3
 8000c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c2e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c3e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c42:	fb01 f908 	mul.w	r9, r1, r8
 8000c46:	4333      	orrs	r3, r6
 8000c48:	0c1e      	lsrs	r6, r3, #16
 8000c4a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c4e:	45b1      	cmp	r9, r6
 8000c50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x1ba>
 8000c56:	19f6      	adds	r6, r6, r7
 8000c58:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c5c:	f080 808c 	bcs.w	8000d78 <__udivmoddi4+0x2c8>
 8000c60:	45b1      	cmp	r9, r6
 8000c62:	f240 8089 	bls.w	8000d78 <__udivmoddi4+0x2c8>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443e      	add	r6, r7
 8000c6a:	eba6 0609 	sub.w	r6, r6, r9
 8000c6e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c72:	fb0c 6210 	mls	r2, ip, r0, r6
 8000c76:	fb00 f908 	mul.w	r9, r0, r8
 8000c7a:	b29e      	uxth	r6, r3
 8000c7c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c80:	45b1      	cmp	r9, r6
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1e4>
 8000c84:	19f6      	adds	r6, r6, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d271      	bcs.n	8000d70 <__udivmoddi4+0x2c0>
 8000c8c:	45b1      	cmp	r9, r6
 8000c8e:	d96f      	bls.n	8000d70 <__udivmoddi4+0x2c0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443e      	add	r6, r7
 8000c94:	eba6 0609 	sub.w	r6, r6, r9
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	e78f      	b.n	8000bbe <__udivmoddi4+0x10e>
 8000c9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ca2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	ea48 0303 	orr.w	r3, r8, r3
 8000cac:	fa26 f407 	lsr.w	r4, r6, r7
 8000cb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cb4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb8:	fa1f fc83 	uxth.w	ip, r3
 8000cbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	fa20 f807 	lsr.w	r8, r0, r7
 8000cc6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000cca:	ea48 0806 	orr.w	r8, r8, r6
 8000cce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000cd2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cdc:	fa00 f601 	lsl.w	r6, r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x244>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d244      	bcs.n	8000d74 <__udivmoddi4+0x2c4>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d942      	bls.n	8000d74 <__udivmoddi4+0x2c4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	441c      	add	r4, r3
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d04:	fa1f f888 	uxth.w	r8, r8
 8000d08:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x270>
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	f100 3eff 	add.w	lr, r0, #4294967295
 8000d16:	d229      	bcs.n	8000d6c <__udivmoddi4+0x2bc>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d927      	bls.n	8000d6c <__udivmoddi4+0x2bc>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	441c      	add	r4, r3
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d2c:	45cc      	cmp	ip, r9
 8000d2e:	46c2      	mov	sl, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d315      	bcc.n	8000d60 <__udivmoddi4+0x2b0>
 8000d34:	d012      	beq.n	8000d5c <__udivmoddi4+0x2ac>
 8000d36:	b155      	cbz	r5, 8000d4e <__udivmoddi4+0x29e>
 8000d38:	ebb6 030a 	subs.w	r3, r6, sl
 8000d3c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d40:	fa06 f707 	lsl.w	r7, r6, r7
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	431f      	orrs	r7, r3
 8000d48:	40ce      	lsrs	r6, r1
 8000d4a:	602f      	str	r7, [r5, #0]
 8000d4c:	606e      	str	r6, [r5, #4]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	4610      	mov	r0, r2
 8000d56:	e6f7      	b.n	8000b48 <__udivmoddi4+0x98>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	e6de      	b.n	8000b1a <__udivmoddi4+0x6a>
 8000d5c:	4546      	cmp	r6, r8
 8000d5e:	d2ea      	bcs.n	8000d36 <__udivmoddi4+0x286>
 8000d60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d64:	eb69 0e03 	sbc.w	lr, r9, r3
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7e4      	b.n	8000d36 <__udivmoddi4+0x286>
 8000d6c:	4670      	mov	r0, lr
 8000d6e:	e7d7      	b.n	8000d20 <__udivmoddi4+0x270>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e78f      	b.n	8000c94 <__udivmoddi4+0x1e4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7bd      	b.n	8000cf4 <__udivmoddi4+0x244>
 8000d78:	4611      	mov	r1, r2
 8000d7a:	e776      	b.n	8000c6a <__udivmoddi4+0x1ba>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	e744      	b.n	8000c0c <__udivmoddi4+0x15c>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e706      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d86:	3a02      	subs	r2, #2
 8000d88:	443e      	add	r6, r7
 8000d8a:	e72b      	b.n	8000be4 <__udivmoddi4+0x134>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_InitTick+0x24>)
{
 8000d92:	b510      	push	{r4, lr}
 8000d94:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da0:	f000 f88c 	bl	8000ebc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	4621      	mov	r1, r4
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f846 	bl	8000e3c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000db0:	2000      	movs	r0, #0
 8000db2:	bd10      	pop	{r4, pc}
 8000db4:	20000054 	.word	0x20000054

08000db8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x20>)
{
 8000dba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc6:	f000 f827 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff ffe0 	bl	8000d90 <HAL_InitTick>
  HAL_MspInit();
 8000dd0:	f001 f81a 	bl	8001e08 <HAL_MspInit>
}
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	bd08      	pop	{r3, pc}
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ddc:	4a02      	ldr	r2, [pc, #8]	; (8000de8 <HAL_IncTick+0xc>)
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000724 	.word	0x20000724

08000dec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <HAL_GetTick+0x8>)
 8000dee:	6818      	ldr	r0, [r3, #0]
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000724 	.word	0x20000724

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000dfa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff fff6 	bl	8000dec <HAL_GetTick>
 8000e00:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 8000e02:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e04:	1c63      	adds	r3, r4, #1
  {
     wait++;
 8000e06:	bf18      	it	ne
 8000e08:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e0a:	f7ff ffef 	bl	8000dec <HAL_GetTick>
 8000e0e:	1b40      	subs	r0, r0, r5
 8000e10:	42a0      	cmp	r0, r4
 8000e12:	d3fa      	bcc.n	8000e0a <HAL_Delay+0x12>
  {
  }
}
 8000e14:	b003      	add	sp, #12
 8000e16:	bd30      	pop	{r4, r5, pc}

08000e18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e1a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e1e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	0c1b      	lsrs	r3, r3, #16
 8000e2a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e34:	60d3      	str	r3, [r2, #12]
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b530      	push	{r4, r5, lr}
 8000e40:	68dc      	ldr	r4, [r3, #12]
 8000e42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	bf28      	it	cs
 8000e50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e58:	bf98      	it	ls
 8000e5a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	fa05 f303 	lsl.w	r3, r5, r3
 8000e60:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e64:	bf88      	it	hi
 8000e66:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4019      	ands	r1, r3
 8000e6a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	fa05 f404 	lsl.w	r4, r5, r4
 8000e70:	3c01      	subs	r4, #1
 8000e72:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e74:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e76:	ea42 0201 	orr.w	r2, r2, r1
 8000e7a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	bfaf      	iteee	ge
 8000e80:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	4b06      	ldrlt	r3, [pc, #24]	; (8000ea0 <HAL_NVIC_SetPriority+0x64>)
 8000e86:	f000 000f 	andlt.w	r0, r0, #15
 8000e8a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	bfa5      	ittet	ge
 8000e8e:	b2d2      	uxtbge	r2, r2
 8000e90:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e9a:	bd30      	pop	{r4, r5, pc}
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	e000ed14 	.word	0xe000ed14

08000ea4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	0942      	lsrs	r2, r0, #5
 8000ea8:	f000 001f 	and.w	r0, r0, #31
 8000eac:	fa03 f000 	lsl.w	r0, r3, r0
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <HAL_NVIC_EnableIRQ+0x14>)
 8000eb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ec2:	d20a      	bcs.n	8000eda <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eea:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	bf0c      	ite	eq
 8000ef0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ef4:	f022 0204 	bicne.w	r2, r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	4770      	bx	lr
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f00:	4770      	bx	lr

08000f02 <HAL_SYSTICK_IRQHandler>:
{
 8000f02:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f04:	f7ff fffc 	bl	8000f00 <HAL_SYSTICK_Callback>
 8000f08:	bd08      	pop	{r3, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000f10:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	4616      	mov	r6, r2
 8000f14:	4b65      	ldr	r3, [pc, #404]	; (80010ac <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f16:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80010bc <HAL_GPIO_Init+0x1b0>
 8000f1a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80010c0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000f1e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000f24:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f28:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d17f      	bne.n	8001030 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f30:	684d      	ldr	r5, [r1, #4]
 8000f32:	2d12      	cmp	r5, #18
 8000f34:	f000 80af 	beq.w	8001096 <HAL_GPIO_Init+0x18a>
 8000f38:	f200 8088 	bhi.w	800104c <HAL_GPIO_Init+0x140>
 8000f3c:	2d02      	cmp	r5, #2
 8000f3e:	f000 80a7 	beq.w	8001090 <HAL_GPIO_Init+0x184>
 8000f42:	d87c      	bhi.n	800103e <HAL_GPIO_Init+0x132>
 8000f44:	2d00      	cmp	r5, #0
 8000f46:	f000 808e 	beq.w	8001066 <HAL_GPIO_Init+0x15a>
 8000f4a:	2d01      	cmp	r5, #1
 8000f4c:	f000 809e 	beq.w	800108c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000f50:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f54:	2cff      	cmp	r4, #255	; 0xff
 8000f56:	bf93      	iteet	ls
 8000f58:	4682      	movls	sl, r0
 8000f5a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f5e:	3d08      	subhi	r5, #8
 8000f60:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f64:	bf92      	itee	ls
 8000f66:	00b5      	lslls	r5, r6, #2
 8000f68:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f6c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000f6e:	fa09 f805 	lsl.w	r8, r9, r5
 8000f72:	ea2b 0808 	bic.w	r8, fp, r8
 8000f76:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7a:	bf88      	it	hi
 8000f7c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000f80:	ea48 0505 	orr.w	r5, r8, r5
 8000f84:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f88:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f8c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f90:	d04e      	beq.n	8001030 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f92:	4d47      	ldr	r5, [pc, #284]	; (80010b0 <HAL_GPIO_Init+0x1a4>)
 8000f94:	4f46      	ldr	r7, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x1a4>)
 8000f96:	69ad      	ldr	r5, [r5, #24]
 8000f98:	f026 0803 	bic.w	r8, r6, #3
 8000f9c:	f045 0501 	orr.w	r5, r5, #1
 8000fa0:	61bd      	str	r5, [r7, #24]
 8000fa2:	69bd      	ldr	r5, [r7, #24]
 8000fa4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fa8:	f005 0501 	and.w	r5, r5, #1
 8000fac:	9501      	str	r5, [sp, #4]
 8000fae:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fb2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fb8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000fbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000fc0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000fc4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc8:	4d3a      	ldr	r5, [pc, #232]	; (80010b4 <HAL_GPIO_Init+0x1a8>)
 8000fca:	42a8      	cmp	r0, r5
 8000fcc:	d068      	beq.n	80010a0 <HAL_GPIO_Init+0x194>
 8000fce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fd2:	42a8      	cmp	r0, r5
 8000fd4:	d066      	beq.n	80010a4 <HAL_GPIO_Init+0x198>
 8000fd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fda:	42a8      	cmp	r0, r5
 8000fdc:	d064      	beq.n	80010a8 <HAL_GPIO_Init+0x19c>
 8000fde:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fe2:	42a8      	cmp	r0, r5
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2503      	moveq	r5, #3
 8000fe8:	2504      	movne	r5, #4
 8000fea:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fee:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000ff2:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000ff6:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000ffc:	bf14      	ite	ne
 8000ffe:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8001000:	43a5      	biceq	r5, r4
 8001002:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001004:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001006:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 800100a:	bf14      	ite	ne
 800100c:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800100e:	43a5      	biceq	r5, r4
 8001010:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001012:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001014:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001018:	bf14      	ite	ne
 800101a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800101c:	43a5      	biceq	r5, r4
 800101e:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001020:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001022:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001026:	bf14      	ite	ne
 8001028:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800102a:	ea25 0404 	biceq.w	r4, r5, r4
 800102e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001030:	3601      	adds	r6, #1
 8001032:	2e10      	cmp	r6, #16
 8001034:	f47f af73 	bne.w	8000f1e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001038:	b003      	add	sp, #12
 800103a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800103e:	2d03      	cmp	r5, #3
 8001040:	d022      	beq.n	8001088 <HAL_GPIO_Init+0x17c>
 8001042:	2d11      	cmp	r5, #17
 8001044:	d184      	bne.n	8000f50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001046:	68ca      	ldr	r2, [r1, #12]
 8001048:	3204      	adds	r2, #4
          break;
 800104a:	e781      	b.n	8000f50 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800104c:	4f1a      	ldr	r7, [pc, #104]	; (80010b8 <HAL_GPIO_Init+0x1ac>)
 800104e:	42bd      	cmp	r5, r7
 8001050:	d009      	beq.n	8001066 <HAL_GPIO_Init+0x15a>
 8001052:	d812      	bhi.n	800107a <HAL_GPIO_Init+0x16e>
 8001054:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80010c4 <HAL_GPIO_Init+0x1b8>
 8001058:	454d      	cmp	r5, r9
 800105a:	d004      	beq.n	8001066 <HAL_GPIO_Init+0x15a>
 800105c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001060:	454d      	cmp	r5, r9
 8001062:	f47f af75 	bne.w	8000f50 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8001066:	688a      	ldr	r2, [r1, #8]
 8001068:	b1c2      	cbz	r2, 800109c <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800106a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800106c:	bf0c      	ite	eq
 800106e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001072:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001076:	2208      	movs	r2, #8
 8001078:	e76a      	b.n	8000f50 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800107a:	4575      	cmp	r5, lr
 800107c:	d0f3      	beq.n	8001066 <HAL_GPIO_Init+0x15a>
 800107e:	4565      	cmp	r5, ip
 8001080:	d0f1      	beq.n	8001066 <HAL_GPIO_Init+0x15a>
 8001082:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010c8 <HAL_GPIO_Init+0x1bc>
 8001086:	e7eb      	b.n	8001060 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001088:	2200      	movs	r2, #0
 800108a:	e761      	b.n	8000f50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800108c:	68ca      	ldr	r2, [r1, #12]
          break;
 800108e:	e75f      	b.n	8000f50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001090:	68ca      	ldr	r2, [r1, #12]
 8001092:	3208      	adds	r2, #8
          break;
 8001094:	e75c      	b.n	8000f50 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001096:	68ca      	ldr	r2, [r1, #12]
 8001098:	320c      	adds	r2, #12
          break;
 800109a:	e759      	b.n	8000f50 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109c:	2204      	movs	r2, #4
 800109e:	e757      	b.n	8000f50 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a0:	2500      	movs	r5, #0
 80010a2:	e7a2      	b.n	8000fea <HAL_GPIO_Init+0xde>
 80010a4:	2501      	movs	r5, #1
 80010a6:	e7a0      	b.n	8000fea <HAL_GPIO_Init+0xde>
 80010a8:	2502      	movs	r5, #2
 80010aa:	e79e      	b.n	8000fea <HAL_GPIO_Init+0xde>
 80010ac:	40010400 	.word	0x40010400
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010800 	.word	0x40010800
 80010b8:	10210000 	.word	0x10210000
 80010bc:	10310000 	.word	0x10310000
 80010c0:	10320000 	.word	0x10320000
 80010c4:	10110000 	.word	0x10110000
 80010c8:	10220000 	.word	0x10220000

080010cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	b10a      	cbz	r2, 80010d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	6101      	str	r1, [r0, #16]
 80010d0:	4770      	bx	lr
 80010d2:	0409      	lsls	r1, r1, #16
 80010d4:	e7fb      	b.n	80010ce <HAL_GPIO_WritePin+0x2>

080010d6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80010d6:	68c3      	ldr	r3, [r0, #12]
 80010d8:	4059      	eors	r1, r3
 80010da:	60c1      	str	r1, [r0, #12]
 80010dc:	4770      	bx	lr

080010de <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010de:	4770      	bx	lr

080010e0 <HAL_GPIO_EXTI_IRQHandler>:
{
 80010e0:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80010e4:	6959      	ldr	r1, [r3, #20]
 80010e6:	4201      	tst	r1, r0
 80010e8:	d002      	beq.n	80010f0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010ea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010ec:	f7ff fff7 	bl	80010de <HAL_GPIO_EXTI_Callback>
 80010f0:	bd08      	pop	{r3, pc}
 80010f2:	bf00      	nop
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f8:	6803      	ldr	r3, [r0, #0]
{
 80010fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	07db      	lsls	r3, r3, #31
{
 8001100:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	d410      	bmi.n	8001126 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	079f      	lsls	r7, r3, #30
 8001108:	d45e      	bmi.n	80011c8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800110a:	682b      	ldr	r3, [r5, #0]
 800110c:	0719      	lsls	r1, r3, #28
 800110e:	f100 8095 	bmi.w	800123c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	075a      	lsls	r2, r3, #29
 8001116:	f100 80bf 	bmi.w	8001298 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800111a:	69ea      	ldr	r2, [r5, #28]
 800111c:	2a00      	cmp	r2, #0
 800111e:	f040 812d 	bne.w	800137c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001122:	2000      	movs	r0, #0
 8001124:	e014      	b.n	8001150 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001126:	4c90      	ldr	r4, [pc, #576]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001128:	6863      	ldr	r3, [r4, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b04      	cmp	r3, #4
 8001130:	d007      	beq.n	8001142 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b08      	cmp	r3, #8
 800113a:	d10c      	bne.n	8001156 <HAL_RCC_OscConfig+0x5e>
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	03de      	lsls	r6, r3, #15
 8001140:	d509      	bpl.n	8001156 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	6823      	ldr	r3, [r4, #0]
 8001144:	039c      	lsls	r4, r3, #14
 8001146:	d5dd      	bpl.n	8001104 <HAL_RCC_OscConfig+0xc>
 8001148:	686b      	ldr	r3, [r5, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1da      	bne.n	8001104 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800114e:	2001      	movs	r0, #1
}
 8001150:	b002      	add	sp, #8
 8001152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001156:	686b      	ldr	r3, [r5, #4]
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800115c:	d110      	bne.n	8001180 <HAL_RCC_OscConfig+0x88>
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001166:	f7ff fe41 	bl	8000dec <HAL_GetTick>
 800116a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	0398      	lsls	r0, r3, #14
 8001170:	d4c8      	bmi.n	8001104 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001172:	f7ff fe3b 	bl	8000dec <HAL_GetTick>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	2864      	cmp	r0, #100	; 0x64
 800117a:	d9f7      	bls.n	800116c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800117c:	2003      	movs	r0, #3
 800117e:	e7e7      	b.n	8001150 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	b99b      	cbnz	r3, 80011aa <HAL_RCC_OscConfig+0xb2>
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	6023      	str	r3, [r4, #0]
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001192:	f7ff fe2b 	bl	8000dec <HAL_GetTick>
 8001196:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	0399      	lsls	r1, r3, #14
 800119c:	d5b2      	bpl.n	8001104 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119e:	f7ff fe25 	bl	8000dec <HAL_GetTick>
 80011a2:	1b80      	subs	r0, r0, r6
 80011a4:	2864      	cmp	r0, #100	; 0x64
 80011a6:	d9f7      	bls.n	8001198 <HAL_RCC_OscConfig+0xa0>
 80011a8:	e7e8      	b.n	800117c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	d103      	bne.n	80011ba <HAL_RCC_OscConfig+0xc2>
 80011b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b6:	6023      	str	r3, [r4, #0]
 80011b8:	e7d1      	b.n	800115e <HAL_RCC_OscConfig+0x66>
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6023      	str	r3, [r4, #0]
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	e7cd      	b.n	8001164 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c8:	4c67      	ldr	r4, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 80011ca:	6863      	ldr	r3, [r4, #4]
 80011cc:	f013 0f0c 	tst.w	r3, #12
 80011d0:	d007      	beq.n	80011e2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011d2:	6863      	ldr	r3, [r4, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d110      	bne.n	80011fe <HAL_RCC_OscConfig+0x106>
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	03da      	lsls	r2, r3, #15
 80011e0:	d40d      	bmi.n	80011fe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	079b      	lsls	r3, r3, #30
 80011e6:	d502      	bpl.n	80011ee <HAL_RCC_OscConfig+0xf6>
 80011e8:	692b      	ldr	r3, [r5, #16]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d1af      	bne.n	800114e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	696a      	ldr	r2, [r5, #20]
 80011f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011fa:	6023      	str	r3, [r4, #0]
 80011fc:	e785      	b.n	800110a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fe:	692a      	ldr	r2, [r5, #16]
 8001200:	4b5a      	ldr	r3, [pc, #360]	; (800136c <HAL_RCC_OscConfig+0x274>)
 8001202:	b16a      	cbz	r2, 8001220 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001208:	f7ff fdf0 	bl	8000dec <HAL_GetTick>
 800120c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	079f      	lsls	r7, r3, #30
 8001212:	d4ec      	bmi.n	80011ee <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fdea 	bl	8000dec <HAL_GetTick>
 8001218:	1b80      	subs	r0, r0, r6
 800121a:	2802      	cmp	r0, #2
 800121c:	d9f7      	bls.n	800120e <HAL_RCC_OscConfig+0x116>
 800121e:	e7ad      	b.n	800117c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001220:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001222:	f7ff fde3 	bl	8000dec <HAL_GetTick>
 8001226:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	0798      	lsls	r0, r3, #30
 800122c:	f57f af6d 	bpl.w	800110a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fddc 	bl	8000dec <HAL_GetTick>
 8001234:	1b80      	subs	r0, r0, r6
 8001236:	2802      	cmp	r0, #2
 8001238:	d9f6      	bls.n	8001228 <HAL_RCC_OscConfig+0x130>
 800123a:	e79f      	b.n	800117c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800123c:	69aa      	ldr	r2, [r5, #24]
 800123e:	4c4a      	ldr	r4, [pc, #296]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <HAL_RCC_OscConfig+0x278>)
 8001242:	b1da      	cbz	r2, 800127c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001248:	f7ff fdd0 	bl	8000dec <HAL_GetTick>
 800124c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001250:	079b      	lsls	r3, r3, #30
 8001252:	d50d      	bpl.n	8001270 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001254:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x27c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001260:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001262:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001264:	9b01      	ldr	r3, [sp, #4]
 8001266:	1e5a      	subs	r2, r3, #1
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <HAL_RCC_OscConfig+0x16a>
 800126e:	e750      	b.n	8001112 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fdbc 	bl	8000dec <HAL_GetTick>
 8001274:	1b80      	subs	r0, r0, r6
 8001276:	2802      	cmp	r0, #2
 8001278:	d9e9      	bls.n	800124e <HAL_RCC_OscConfig+0x156>
 800127a:	e77f      	b.n	800117c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800127c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800127e:	f7ff fdb5 	bl	8000dec <HAL_GetTick>
 8001282:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001286:	079f      	lsls	r7, r3, #30
 8001288:	f57f af43 	bpl.w	8001112 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fdae 	bl	8000dec <HAL_GetTick>
 8001290:	1b80      	subs	r0, r0, r6
 8001292:	2802      	cmp	r0, #2
 8001294:	d9f6      	bls.n	8001284 <HAL_RCC_OscConfig+0x18c>
 8001296:	e771      	b.n	800117c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001298:	4c33      	ldr	r4, [pc, #204]	; (8001368 <HAL_RCC_OscConfig+0x270>)
 800129a:	69e3      	ldr	r3, [r4, #28]
 800129c:	00d8      	lsls	r0, r3, #3
 800129e:	d424      	bmi.n	80012ea <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80012a0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	69e3      	ldr	r3, [r4, #28]
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	61e3      	str	r3, [r4, #28]
 80012aa:	69e3      	ldr	r3, [r4, #28]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4e30      	ldr	r6, [pc, #192]	; (8001378 <HAL_RCC_OscConfig+0x280>)
 80012b6:	6833      	ldr	r3, [r6, #0]
 80012b8:	05d9      	lsls	r1, r3, #23
 80012ba:	d518      	bpl.n	80012ee <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	68eb      	ldr	r3, [r5, #12]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d126      	bne.n	8001310 <HAL_RCC_OscConfig+0x218>
 80012c2:	6a23      	ldr	r3, [r4, #32]
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012ca:	f7ff fd8f 	bl	8000dec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012d2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	6a23      	ldr	r3, [r4, #32]
 80012d6:	079b      	lsls	r3, r3, #30
 80012d8:	d53f      	bpl.n	800135a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80012da:	2f00      	cmp	r7, #0
 80012dc:	f43f af1d 	beq.w	800111a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	69e3      	ldr	r3, [r4, #28]
 80012e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e6:	61e3      	str	r3, [r4, #28]
 80012e8:	e717      	b.n	800111a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2700      	movs	r7, #0
 80012ec:	e7e2      	b.n	80012b4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ee:	6833      	ldr	r3, [r6, #0]
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012f6:	f7ff fd79 	bl	8000dec <HAL_GetTick>
 80012fa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	6833      	ldr	r3, [r6, #0]
 80012fe:	05da      	lsls	r2, r3, #23
 8001300:	d4dc      	bmi.n	80012bc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001302:	f7ff fd73 	bl	8000dec <HAL_GetTick>
 8001306:	eba0 0008 	sub.w	r0, r0, r8
 800130a:	2864      	cmp	r0, #100	; 0x64
 800130c:	d9f6      	bls.n	80012fc <HAL_RCC_OscConfig+0x204>
 800130e:	e735      	b.n	800117c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	b9ab      	cbnz	r3, 800133e <HAL_RCC_OscConfig+0x246>
 8001312:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	6223      	str	r3, [r4, #32]
 800131e:	6a23      	ldr	r3, [r4, #32]
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001326:	f7ff fd61 	bl	8000dec <HAL_GetTick>
 800132a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	6a23      	ldr	r3, [r4, #32]
 800132e:	0798      	lsls	r0, r3, #30
 8001330:	d5d3      	bpl.n	80012da <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff fd5b 	bl	8000dec <HAL_GetTick>
 8001336:	1b80      	subs	r0, r0, r6
 8001338:	4540      	cmp	r0, r8
 800133a:	d9f7      	bls.n	800132c <HAL_RCC_OscConfig+0x234>
 800133c:	e71e      	b.n	800117c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	2b05      	cmp	r3, #5
 8001340:	6a23      	ldr	r3, [r4, #32]
 8001342:	d103      	bne.n	800134c <HAL_RCC_OscConfig+0x254>
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	6223      	str	r3, [r4, #32]
 800134a:	e7ba      	b.n	80012c2 <HAL_RCC_OscConfig+0x1ca>
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6223      	str	r3, [r4, #32]
 8001352:	6a23      	ldr	r3, [r4, #32]
 8001354:	f023 0304 	bic.w	r3, r3, #4
 8001358:	e7b6      	b.n	80012c8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff fd47 	bl	8000dec <HAL_GetTick>
 800135e:	eba0 0008 	sub.w	r0, r0, r8
 8001362:	42b0      	cmp	r0, r6
 8001364:	d9b6      	bls.n	80012d4 <HAL_RCC_OscConfig+0x1dc>
 8001366:	e709      	b.n	800117c <HAL_RCC_OscConfig+0x84>
 8001368:	40021000 	.word	0x40021000
 800136c:	42420000 	.word	0x42420000
 8001370:	42420480 	.word	0x42420480
 8001374:	20000054 	.word	0x20000054
 8001378:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800137c:	4c22      	ldr	r4, [pc, #136]	; (8001408 <HAL_RCC_OscConfig+0x310>)
 800137e:	6863      	ldr	r3, [r4, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	f43f aee2 	beq.w	800114e <HAL_RCC_OscConfig+0x56>
 800138a:	2300      	movs	r3, #0
 800138c:	4e1f      	ldr	r6, [pc, #124]	; (800140c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001390:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001392:	d12b      	bne.n	80013ec <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001394:	f7ff fd2a 	bl	8000dec <HAL_GetTick>
 8001398:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	0199      	lsls	r1, r3, #6
 800139e:	d41f      	bmi.n	80013e0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a0:	6a2b      	ldr	r3, [r5, #32]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a6:	d105      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013a8:	6862      	ldr	r2, [r4, #4]
 80013aa:	68a9      	ldr	r1, [r5, #8]
 80013ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013b0:	430a      	orrs	r2, r1
 80013b2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013b6:	6862      	ldr	r2, [r4, #4]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80013be:	4313      	orrs	r3, r2
 80013c0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013c2:	2301      	movs	r3, #1
 80013c4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013c6:	f7ff fd11 	bl	8000dec <HAL_GetTick>
 80013ca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	019a      	lsls	r2, r3, #6
 80013d0:	f53f aea7 	bmi.w	8001122 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fd0a 	bl	8000dec <HAL_GetTick>
 80013d8:	1b40      	subs	r0, r0, r5
 80013da:	2802      	cmp	r0, #2
 80013dc:	d9f6      	bls.n	80013cc <HAL_RCC_OscConfig+0x2d4>
 80013de:	e6cd      	b.n	800117c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fd04 	bl	8000dec <HAL_GetTick>
 80013e4:	1bc0      	subs	r0, r0, r7
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d9d7      	bls.n	800139a <HAL_RCC_OscConfig+0x2a2>
 80013ea:	e6c7      	b.n	800117c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80013ec:	f7ff fcfe 	bl	8000dec <HAL_GetTick>
 80013f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	f57f ae94 	bpl.w	8001122 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fcf7 	bl	8000dec <HAL_GetTick>
 80013fe:	1b40      	subs	r0, r0, r5
 8001400:	2802      	cmp	r0, #2
 8001402:	d9f6      	bls.n	80013f2 <HAL_RCC_OscConfig+0x2fa>
 8001404:	e6ba      	b.n	800117c <HAL_RCC_OscConfig+0x84>
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	42420060 	.word	0x42420060

08001410 <HAL_RCC_GetSysClockFreq>:
{
 8001410:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8001414:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001416:	ac02      	add	r4, sp, #8
 8001418:	f103 0510 	add.w	r5, r3, #16
 800141c:	4622      	mov	r2, r4
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	6859      	ldr	r1, [r3, #4]
 8001422:	3308      	adds	r3, #8
 8001424:	c203      	stmia	r2!, {r0, r1}
 8001426:	42ab      	cmp	r3, r5
 8001428:	4614      	mov	r4, r2
 800142a:	d1f7      	bne.n	800141c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800142c:	2301      	movs	r3, #1
 800142e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001432:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001434:	4912      	ldr	r1, [pc, #72]	; (8001480 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001436:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800143a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800143c:	f003 020c 	and.w	r2, r3, #12
 8001440:	2a08      	cmp	r2, #8
 8001442:	d118      	bne.n	8001476 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001444:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001448:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800144a:	bf48      	it	mi
 800144c:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800144e:	a806      	add	r0, sp, #24
 8001450:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001452:	bf48      	it	mi
 8001454:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001458:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800145c:	bf41      	itttt	mi
 800145e:	aa06      	addmi	r2, sp, #24
 8001460:	189b      	addmi	r3, r3, r2
 8001462:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001466:	4b07      	ldrmi	r3, [pc, #28]	; (8001484 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001468:	bf54      	ite	pl
 800146a:	4b07      	ldrpl	r3, [pc, #28]	; (8001488 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800146c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001470:	4358      	muls	r0, r3
}
 8001472:	b007      	add	sp, #28
 8001474:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001478:	e7fb      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x62>
 800147a:	bf00      	nop
 800147c:	08004f18 	.word	0x08004f18
 8001480:	40021000 	.word	0x40021000
 8001484:	007a1200 	.word	0x007a1200
 8001488:	003d0900 	.word	0x003d0900

0800148c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800148c:	4a4d      	ldr	r2, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x138>)
{
 800148e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001492:	6813      	ldr	r3, [r2, #0]
{
 8001494:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	428b      	cmp	r3, r1
{
 800149c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800149e:	d328      	bcc.n	80014f2 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	682a      	ldr	r2, [r5, #0]
 80014a2:	0791      	lsls	r1, r2, #30
 80014a4:	d432      	bmi.n	800150c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	07d2      	lsls	r2, r2, #31
 80014a8:	d438      	bmi.n	800151c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80014aa:	4a46      	ldr	r2, [pc, #280]	; (80015c4 <HAL_RCC_ClockConfig+0x138>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	429e      	cmp	r6, r3
 80014b4:	d373      	bcc.n	800159e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b6:	682a      	ldr	r2, [r5, #0]
 80014b8:	4c43      	ldr	r4, [pc, #268]	; (80015c8 <HAL_RCC_ClockConfig+0x13c>)
 80014ba:	f012 0f04 	tst.w	r2, #4
 80014be:	d179      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	0713      	lsls	r3, r2, #28
 80014c2:	d506      	bpl.n	80014d2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	692a      	ldr	r2, [r5, #16]
 80014c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014d0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014d2:	f7ff ff9d 	bl	8001410 <HAL_RCC_GetSysClockFreq>
 80014d6:	6863      	ldr	r3, [r4, #4]
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <HAL_RCC_ClockConfig+0x140>)
 80014da:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	40d8      	lsrs	r0, r3
 80014e2:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_RCC_ClockConfig+0x144>)
 80014e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fc52 	bl	8000d90 <HAL_InitTick>
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
}
 80014ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	f023 0307 	bic.w	r3, r3, #7
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	4299      	cmp	r1, r3
 8001504:	d0cc      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001506:	2001      	movs	r0, #1
 8001508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	492e      	ldr	r1, [pc, #184]	; (80015c8 <HAL_RCC_ClockConfig+0x13c>)
 800150e:	68a8      	ldr	r0, [r5, #8]
 8001510:	684b      	ldr	r3, [r1, #4]
 8001512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001516:	4303      	orrs	r3, r0
 8001518:	604b      	str	r3, [r1, #4]
 800151a:	e7c4      	b.n	80014a6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151c:	686a      	ldr	r2, [r5, #4]
 800151e:	4c2a      	ldr	r4, [pc, #168]	; (80015c8 <HAL_RCC_ClockConfig+0x13c>)
 8001520:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	d0ec      	beq.n	8001506 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	f023 0303 	bic.w	r3, r3, #3
 8001536:	4313      	orrs	r3, r2
 8001538:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800153a:	f7ff fc57 	bl	8000dec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001540:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	2b01      	cmp	r3, #1
 8001544:	d114      	bne.n	8001570 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001546:	6863      	ldr	r3, [r4, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b04      	cmp	r3, #4
 800154e:	d0ac      	beq.n	80014aa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fc4c 	bl	8000dec <HAL_GetTick>
 8001554:	1bc0      	subs	r0, r0, r7
 8001556:	4540      	cmp	r0, r8
 8001558:	d9f5      	bls.n	8001546 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800155a:	2003      	movs	r0, #3
 800155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001560:	2a02      	cmp	r2, #2
 8001562:	d102      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001568:	e7df      	b.n	800152a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	f013 0f02 	tst.w	r3, #2
 800156e:	e7dc      	b.n	800152a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001570:	2b02      	cmp	r3, #2
 8001572:	d10f      	bne.n	8001594 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	6863      	ldr	r3, [r4, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d095      	beq.n	80014aa <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157e:	f7ff fc35 	bl	8000dec <HAL_GetTick>
 8001582:	1bc0      	subs	r0, r0, r7
 8001584:	4540      	cmp	r0, r8
 8001586:	d9f5      	bls.n	8001574 <HAL_RCC_ClockConfig+0xe8>
 8001588:	e7e7      	b.n	800155a <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158a:	f7ff fc2f 	bl	8000dec <HAL_GetTick>
 800158e:	1bc0      	subs	r0, r0, r7
 8001590:	4540      	cmp	r0, r8
 8001592:	d8e2      	bhi.n	800155a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001594:	6863      	ldr	r3, [r4, #4]
 8001596:	f013 0f0c 	tst.w	r3, #12
 800159a:	d1f6      	bne.n	800158a <HAL_RCC_ClockConfig+0xfe>
 800159c:	e785      	b.n	80014aa <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	f023 0307 	bic.w	r3, r3, #7
 80015a4:	4333      	orrs	r3, r6
 80015a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	429e      	cmp	r6, r3
 80015b0:	d1a9      	bne.n	8001506 <HAL_RCC_ClockConfig+0x7a>
 80015b2:	e780      	b.n	80014b6 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	6863      	ldr	r3, [r4, #4]
 80015b6:	68e9      	ldr	r1, [r5, #12]
 80015b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015bc:	430b      	orrs	r3, r1
 80015be:	6063      	str	r3, [r4, #4]
 80015c0:	e77e      	b.n	80014c0 <HAL_RCC_ClockConfig+0x34>
 80015c2:	bf00      	nop
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	08004f89 	.word	0x08004f89
 80015d0:	20000054 	.word	0x20000054

080015d4 <HAL_RCC_GetHCLKFreq>:
}
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <HAL_RCC_GetHCLKFreq+0x8>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000054 	.word	0x20000054

080015e0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015ea:	5cd3      	ldrb	r3, [r2, r3]
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015ee:	6810      	ldr	r0, [r2, #0]
}    
 80015f0:	40d8      	lsrs	r0, r3
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000
 80015f8:	08004f99 	.word	0x08004f99
 80015fc:	20000054 	.word	0x20000054

08001600 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800160a:	5cd3      	ldrb	r3, [r2, r3]
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800160e:	6810      	ldr	r0, [r2, #0]
} 
 8001610:	40d8      	lsrs	r0, r3
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000
 8001618:	08004f99 	.word	0x08004f99
 800161c:	20000054 	.word	0x20000054

08001620 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001620:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001622:	4604      	mov	r4, r0
 8001624:	2800      	cmp	r0, #0
 8001626:	d034      	beq.n	8001692 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800162c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001630:	b90b      	cbnz	r3, 8001636 <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001632:	f000 fbbf 	bl	8001db4 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001636:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001638:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800163a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800163e:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001640:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001646:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001648:	6863      	ldr	r3, [r4, #4]
 800164a:	69a2      	ldr	r2, [r4, #24]
 800164c:	4303      	orrs	r3, r0
 800164e:	68e0      	ldr	r0, [r4, #12]
 8001650:	4303      	orrs	r3, r0
 8001652:	6920      	ldr	r0, [r4, #16]
 8001654:	4303      	orrs	r3, r0
 8001656:	6960      	ldr	r0, [r4, #20]
 8001658:	4303      	orrs	r3, r0
 800165a:	69e0      	ldr	r0, [r4, #28]
 800165c:	4303      	orrs	r3, r0
 800165e:	6a20      	ldr	r0, [r4, #32]
 8001660:	4303      	orrs	r3, r0
 8001662:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001664:	4303      	orrs	r3, r0
 8001666:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800166a:	4303      	orrs	r3, r0
 800166c:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800166e:	0c12      	lsrs	r2, r2, #16
 8001670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001672:	f002 0204 	and.w	r2, r2, #4
 8001676:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001678:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800167a:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800167c:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800167e:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001680:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001686:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001688:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800168a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800168c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001690:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
}
 8001694:	bd10      	pop	{r4, pc}
	...

08001698 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800169c:	6805      	ldr	r5, [r0, #0]
 800169e:	68c2      	ldr	r2, [r0, #12]
 80016a0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016a2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016a8:	4313      	orrs	r3, r2
 80016aa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80016ae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80016b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80016b8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016bc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80016be:	4313      	orrs	r3, r2
 80016c0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016c2:	696b      	ldr	r3, [r5, #20]
 80016c4:	6982      	ldr	r2, [r0, #24]
 80016c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ca:	4313      	orrs	r3, r2
 80016cc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <UART_SetConfig+0x138>)
{
 80016d0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80016d2:	429d      	cmp	r5, r3
 80016d4:	f04f 0419 	mov.w	r4, #25
 80016d8:	d146      	bne.n	8001768 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016da:	f7ff ff91 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 80016de:	fb04 f300 	mul.w	r3, r4, r0
 80016e2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80016e6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80016ea:	00b6      	lsls	r6, r6, #2
 80016ec:	fbb3 f3f6 	udiv	r3, r3, r6
 80016f0:	fbb3 f3f8 	udiv	r3, r3, r8
 80016f4:	011e      	lsls	r6, r3, #4
 80016f6:	f7ff ff83 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 80016fa:	4360      	muls	r0, r4
 80016fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	fbb0 f7f3 	udiv	r7, r0, r3
 8001706:	f7ff ff7b 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 800170a:	4360      	muls	r0, r4
 800170c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	fbb3 f3f8 	udiv	r3, r3, r8
 800171a:	fb08 7313 	mls	r3, r8, r3, r7
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	3332      	adds	r3, #50	; 0x32
 8001722:	fbb3 f3f8 	udiv	r3, r3, r8
 8001726:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800172a:	f7ff ff69 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
 800172e:	4360      	muls	r0, r4
 8001730:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	fbb0 faf2 	udiv	sl, r0, r2
 800173a:	f7ff ff61 	bl	8001600 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800173e:	4360      	muls	r0, r4
 8001740:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	fbb3 f3f8 	udiv	r3, r3, r8
 800174e:	fb08 a313 	mls	r3, r8, r3, sl
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	3332      	adds	r3, #50	; 0x32
 8001756:	fbb3 f3f8 	udiv	r3, r3, r8
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	433b      	orrs	r3, r7
 8001760:	4433      	add	r3, r6
 8001762:	60ab      	str	r3, [r5, #8]
 8001764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001768:	f7ff ff3a 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 800176c:	fb04 f300 	mul.w	r3, r4, r0
 8001770:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001774:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001778:	00b6      	lsls	r6, r6, #2
 800177a:	fbb3 f3f6 	udiv	r3, r3, r6
 800177e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001782:	011e      	lsls	r6, r3, #4
 8001784:	f7ff ff2c 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8001788:	4360      	muls	r0, r4
 800178a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fbb0 f7f3 	udiv	r7, r0, r3
 8001794:	f7ff ff24 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 8001798:	4360      	muls	r0, r4
 800179a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a4:	fbb3 f3f8 	udiv	r3, r3, r8
 80017a8:	fb08 7313 	mls	r3, r8, r3, r7
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	3332      	adds	r3, #50	; 0x32
 80017b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80017b4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80017b8:	f7ff ff12 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 80017bc:	4360      	muls	r0, r4
 80017be:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	fbb0 faf2 	udiv	sl, r0, r2
 80017c8:	f7ff ff0a 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
 80017cc:	e7b7      	b.n	800173e <UART_SetConfig+0xa6>
 80017ce:	bf00      	nop
 80017d0:	40013800 	.word	0x40013800

080017d4 <HAL_UART_Init>:
{
 80017d4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80017d6:	4604      	mov	r4, r0
 80017d8:	b340      	cbz	r0, 800182c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80017da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80017de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017e2:	b91b      	cbnz	r3, 80017ec <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80017e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80017e8:	f000 fbe0 	bl	8001fac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80017ec:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80017ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80017f4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80017f6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80017f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017fc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80017fe:	f7ff ff4b 	bl	8001698 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001802:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001804:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800180c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001814:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800181c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800181e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001820:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001822:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001826:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800182a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
}
 800182e:	bd10      	pop	{r4, pc}

08001830 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001830:	4b37      	ldr	r3, [pc, #220]	; (8001910 <MX_GPIO_Init+0xe0>)
{
 8001832:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001836:	699a      	ldr	r2, [r3, #24]
{
 8001838:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 8001842:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800191c <MX_GPIO_Init+0xec>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001846:	f002 0220 	and.w	r2, r2, #32
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001850:	4e30      	ldr	r6, [pc, #192]	; (8001914 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	f042 0204 	orr.w	r2, r2, #4
 8001856:	619a      	str	r2, [r3, #24]
 8001858:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 800185a:	4640      	mov	r0, r8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	f002 0204 	and.w	r2, r2, #4
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001864:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001866:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8001920 <MX_GPIO_Init+0xf0>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	f042 0208 	orr.w	r2, r2, #8
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 8001872:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	f002 0208 	and.w	r2, r2, #8
 8001878:	9202      	str	r2, [sp, #8]
 800187a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	f042 0210 	orr.w	r2, r2, #16
 8001884:	619a      	str	r2, [r3, #24]
 8001886:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	9303      	str	r3, [sp, #12]
 8001890:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, GPIO_PIN_RESET);
 8001892:	f7ff fc1b 	bl	80010cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001896:	4630      	mov	r0, r6
 8001898:	2200      	movs	r2, #0
 800189a:	2102      	movs	r1, #2
 800189c:	f7ff fc16 	bl	80010cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	4648      	mov	r0, r9
 80018a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a8:	f7ff fc10 	bl	80010cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ae:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	a904      	add	r1, sp, #16
 80018b6:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018be:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f7ff fb24 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CS_Pin;
 80018c4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(NRF24_CS_GPIO_Port, &GPIO_InitStruct);
 80018c6:	4640      	mov	r0, r8
 80018c8:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Pin = NRF24_CS_Pin;
 80018cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(NRF24_CS_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f7ff fb1a 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_GPIO_Init+0xe8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 80018da:	a904      	add	r1, sp, #16
 80018dc:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = NRF24_INT_Pin;
 80018e0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRF24_INT_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f7ff fb12 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80018e8:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80018ea:	a904      	add	r1, sp, #16
 80018ec:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80018ee:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f7ff fb09 	bl	8000f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018fa:	4622      	mov	r2, r4
 80018fc:	4621      	mov	r1, r4
 80018fe:	2006      	movs	r0, #6
 8001900:	f7ff fa9c 	bl	8000e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001904:	2006      	movs	r0, #6
 8001906:	f7ff facd 	bl	8000ea4 <HAL_NVIC_EnableIRQ>

}
 800190a:	b009      	add	sp, #36	; 0x24
 800190c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	40010c00 	.word	0x40010c00
 8001918:	10110000 	.word	0x10110000
 800191c:	40010800 	.word	0x40010800
 8001920:	40011000 	.word	0x40011000

08001924 <sendDebug>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void sendDebug(char* format,...)
{
 8001924:	b40f      	push	{r0, r1, r2, r3}
 8001926:	b500      	push	{lr}
 8001928:	b0a3      	sub	sp, #140	; 0x8c
 800192a:	ab24      	add	r3, sp, #144	; 0x90
 800192c:	f853 2b04 	ldr.w	r2, [r3], #4
	char sendBuf[128];
	va_list args;
	/* initialize valist for num number of arguments */
	va_start(args, format);
	vsnprintf(sendBuf,sizeof(sendBuf) - 1, format, args);
 8001930:	217f      	movs	r1, #127	; 0x7f
 8001932:	a802      	add	r0, sp, #8
	va_start(args, format);
 8001934:	9301      	str	r3, [sp, #4]
	vsnprintf(sendBuf,sizeof(sendBuf) - 1, format, args);
 8001936:	f000 fbf3 	bl	8002120 <vsnprintf>
	/* clean memory reserved for valist */
	va_end(args);
	USARTWriteBuffer(USART2,(uint8_t*)sendBuf,strlen(sendBuf));
 800193a:	a802      	add	r0, sp, #8
 800193c:	f7fe fc08 	bl	8000150 <strlen>
 8001940:	a902      	add	r1, sp, #8
 8001942:	b282      	uxth	r2, r0
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <sendDebug+0x30>)
 8001946:	f000 fb60 	bl	800200a <USARTWriteBuffer>
}
 800194a:	b023      	add	sp, #140	; 0x8c
 800194c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001950:	b004      	add	sp, #16
 8001952:	4770      	bx	lr
 8001954:	40004400 	.word	0x40004400

08001958 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 800195c:	b510      	push	{r4, lr}
 800195e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001960:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001962:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001964:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001968:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800196a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001970:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001972:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001976:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001978:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197a:	f7ff fbbd 	bl	80010f8 <HAL_RCC_OscConfig>
 800197e:	b100      	cbz	r0, 8001982 <SystemClock_Config+0x2a>
 8001980:	e7fe      	b.n	8001980 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001986:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800198e:	4621      	mov	r1, r4
 8001990:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001992:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001994:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001996:	f7ff fd79 	bl	800148c <HAL_RCC_ClockConfig>
 800199a:	4604      	mov	r4, r0
 800199c:	b100      	cbz	r0, 80019a0 <SystemClock_Config+0x48>
 800199e:	e7fe      	b.n	800199e <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80019a0:	f7ff fe18 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80019ac:	f7ff fa86 	bl	8000ebc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019b0:	2004      	movs	r0, #4
 80019b2:	f7ff fa99 	bl	8000ee8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019b6:	4622      	mov	r2, r4
 80019b8:	4621      	mov	r1, r4
 80019ba:	f04f 30ff 	mov.w	r0, #4294967295
 80019be:	f7ff fa3d 	bl	8000e3c <HAL_NVIC_SetPriority>
}
 80019c2:	b010      	add	sp, #64	; 0x40
 80019c4:	bd10      	pop	{r4, pc}
	...

080019c8 <main>:
{
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80019ca:	f7ff f9f5 	bl	8000db8 <HAL_Init>
  SystemClock_Config();
 80019ce:	f7ff ffc3 	bl	8001958 <SystemClock_Config>
  MX_GPIO_Init();
 80019d2:	f7ff ff2d 	bl	8001830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019d6:	f000 fac9 	bl	8001f6c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80019da:	f000 f9c1 	bl	8001d60 <MX_SPI1_Init>
  DEBUG("NRF24L01 start!\r\n");
 80019de:	4826      	ldr	r0, [pc, #152]	; (8001a78 <main+0xb0>)
 80019e0:	f7ff ffa0 	bl	8001924 <sendDebug>
  NRF24Init();
 80019e4:	f000 f87e 	bl	8001ae4 <NRF24Init>
  NRF24Config(&NRF24Ctx);
 80019e8:	4824      	ldr	r0, [pc, #144]	; (8001a7c <main+0xb4>)
 80019ea:	f000 f8f5 	bl	8001bd8 <NRF24Config>
  NRF24SetRxAddress(&NRF24Ctx);
 80019ee:	4823      	ldr	r0, [pc, #140]	; (8001a7c <main+0xb4>)
 80019f0:	f000 f998 	bl	8001d24 <NRF24SetRxAddress>
  NRF24SetTxAddress(&NRF24Ctx);
 80019f4:	4821      	ldr	r0, [pc, #132]	; (8001a7c <main+0xb4>)
 80019f6:	f000 f9a4 	bl	8001d42 <NRF24SetTxAddress>
		memset(NRF24Ctx.TXData, 0, sizeof(NRF24Ctx.TXData));
 80019fa:	4d20      	ldr	r5, [pc, #128]	; (8001a7c <main+0xb4>)
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019fc:	4f20      	ldr	r7, [pc, #128]	; (8001a80 <main+0xb8>)
		memset(NRF24Ctx.TXData, 0, sizeof(NRF24Ctx.TXData));
 80019fe:	f105 0632 	add.w	r6, r5, #50	; 0x32
		Task100ms = false;
 8001a02:	2400      	movs	r4, #0
	  if(Task10ms)
 8001a04:	481f      	ldr	r0, [pc, #124]	; (8001a84 <main+0xbc>)
	  if(Task100ms)
 8001a06:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <main+0xc0>)
	  if(Task1s)
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <main+0xc4>)
	  if(Task10ms)
 8001a0a:	7801      	ldrb	r1, [r0, #0]
	  if(Task100ms)
 8001a0c:	7811      	ldrb	r1, [r2, #0]
 8001a0e:	b101      	cbz	r1, 8001a12 <main+0x4a>
		Task100ms = false;
 8001a10:	7014      	strb	r4, [r2, #0]
	  if(Task1s)
 8001a12:	7819      	ldrb	r1, [r3, #0]
 8001a14:	2900      	cmp	r1, #0
 8001a16:	d0f8      	beq.n	8001a0a <main+0x42>
		  Task1s = false;
 8001a18:	2400      	movs	r4, #0
		memset(NRF24Ctx.TXData, 0, sizeof(NRF24Ctx.TXData));
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	4630      	mov	r0, r6
		  Task1s = false;
 8001a20:	701c      	strb	r4, [r3, #0]
		memset(NRF24Ctx.TXData, 0, sizeof(NRF24Ctx.TXData));
 8001a22:	f000 fb49 	bl	80020b8 <memset>
		for(uint8_t i = 0; i < NRF24Ctx.PayloadSize; i++)
 8001a26:	4621      	mov	r1, r4
 8001a28:	7c2a      	ldrb	r2, [r5, #16]
 8001a2a:	b2cb      	uxtb	r3, r1
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d318      	bcc.n	8001a62 <main+0x9a>
		NRF24Send(&NRF24Ctx);
 8001a30:	4628      	mov	r0, r5
 8001a32:	f000 f91c 	bl	8001c6e <NRF24Send>
		while(NRF24IsSending());
 8001a36:	f000 f872 	bl	8001b1e <NRF24IsSending>
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d1fb      	bne.n	8001a36 <main+0x6e>
		uint8_t sendStatus = NRF24LastMessageStatus();
 8001a3e:	f000 f877 	bl	8001b30 <NRF24LastMessageStatus>
		if(sendStatus == NRF24_TRANSMISSON_OK)
 8001a42:	b998      	cbnz	r0, 8001a6c <main+0xa4>
			DEBUG("Transmition OK!\r\n");
 8001a44:	4812      	ldr	r0, [pc, #72]	; (8001a90 <main+0xc8>)
 8001a46:	f7ff ff6d 	bl	8001924 <sendDebug>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4e:	4638      	mov	r0, r7
 8001a50:	f7ff fb41 	bl	80010d6 <HAL_GPIO_TogglePin>
		sendStatus = NRF24RetransmissionCount();
 8001a54:	f000 f942 	bl	8001cdc <NRF24RetransmissionCount>
		DEBUG("Retransmition count: %u!\r\n",sendStatus);
 8001a58:	4601      	mov	r1, r0
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <main+0xcc>)
 8001a5c:	f7ff ff62 	bl	8001924 <sendDebug>
 8001a60:	e7cf      	b.n	8001a02 <main+0x3a>
			NRF24Ctx.TXData[i] = i;
 8001a62:	1868      	adds	r0, r5, r1
 8001a64:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
 8001a68:	3101      	adds	r1, #1
 8001a6a:	e7de      	b.n	8001a2a <main+0x62>
		else if(sendStatus == NRF24_MESSAGE_LOST)
 8001a6c:	2801      	cmp	r0, #1
 8001a6e:	d1f1      	bne.n	8001a54 <main+0x8c>
			DEBUG("Transmition ERROR!\r\n");
 8001a70:	4809      	ldr	r0, [pc, #36]	; (8001a98 <main+0xd0>)
 8001a72:	f7ff ff57 	bl	8001924 <sendDebug>
 8001a76:	e7ed      	b.n	8001a54 <main+0x8c>
 8001a78:	08004f28 	.word	0x08004f28
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	40011000 	.word	0x40011000
 8001a84:	200006e9 	.word	0x200006e9
 8001a88:	200006e8 	.word	0x200006e8
 8001a8c:	200006ea 	.word	0x200006ea
 8001a90:	08004f3a 	.word	0x08004f3a
 8001a94:	08004f61 	.word	0x08004f61
 8001a98:	08004f4c 	.word	0x08004f4c

08001a9c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001a9c:	e7fe      	b.n	8001a9c <_Error_Handler>
	...

08001aa0 <spi_transfer>:
/* software spi routine */
uint8_t spi_transfer(uint8_t tx)
{
	uint8_t rx_data = 0;

	SPI1->DR = tx;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <spi_transfer+0x20>)
 8001aa2:	60d8      	str	r0, [r3, #12]
	while(!(SPI1->SR & SPI_SR_TXE)){;}
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	0790      	lsls	r0, r2, #30
 8001aa8:	d5fc      	bpl.n	8001aa4 <spi_transfer+0x4>
	while(!(SPI1->SR & SPI_SR_RXNE)){;}
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	07d1      	lsls	r1, r2, #31
 8001aae:	d5fc      	bpl.n	8001aaa <spi_transfer+0xa>
	while((SPI1->SR & SPI_SR_BSY)){;}
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <spi_transfer+0x20>)
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	0612      	lsls	r2, r2, #24
 8001ab6:	d4fc      	bmi.n	8001ab2 <spi_transfer+0x12>
	rx_data = SPI1->DR;
 8001ab8:	68d8      	ldr	r0, [r3, #12]
		
	return rx_data;
}
 8001aba:	b2c0      	uxtb	r0, r0
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <NRF24ChipEnable>:

void NRF24ChipEnable(GPIO_PinState state)
{
	HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, state);
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4801      	ldr	r0, [pc, #4]	; (8001ad0 <NRF24ChipEnable+0xc>)
 8001aca:	f7ff baff 	b.w	80010cc <HAL_GPIO_WritePin>
 8001ace:	bf00      	nop
 8001ad0:	40010c00 	.word	0x40010c00

08001ad4 <NRF24ChipSelect>:
}
/* ------------------------------------------------------------------------- */
void NRF24ChipSelect(GPIO_PinState state)
{
	HAL_GPIO_WritePin(NRF24_CS_GPIO_Port, NRF24_CS_Pin, state);
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	4801      	ldr	r0, [pc, #4]	; (8001ae0 <NRF24ChipSelect+0xc>)
 8001ada:	f7ff baf7 	b.w	80010cc <HAL_GPIO_WritePin>
 8001ade:	bf00      	nop
 8001ae0:	40010800 	.word	0x40010800

08001ae4 <NRF24Init>:
}

/* init the hardware pins */
nrf24_error_t NRF24Init(void)
{
 8001ae4:	b508      	push	{r3, lr}
	NRF24ChipEnable(HIGH);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff ffec 	bl	8001ac4 <NRF24ChipEnable>
	HAL_Delay(500);
 8001aec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af0:	f7ff f982 	bl	8000df8 <HAL_Delay>
	NRF24ChipEnable(LOW);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ffe5 	bl	8001ac4 <NRF24ChipEnable>
	NRF24ChipSelect(HIGH);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff ffea 	bl	8001ad4 <NRF24ChipSelect>

	return NRF_SUCCESS;
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	bd08      	pop	{r3, pc}

08001b04 <NRF24GetStatus>:

	return true; /* true */
}

uint8_t NRF24GetStatus(void)
{
 8001b04:	b510      	push	{r4, lr}
	uint8_t rv;
	NRF24ChipSelect(LOW);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff ffe4 	bl	8001ad4 <NRF24ChipSelect>
	rv = spi_transfer(NOP);
 8001b0c:	20ff      	movs	r0, #255	; 0xff
 8001b0e:	f7ff ffc7 	bl	8001aa0 <spi_transfer>
 8001b12:	4604      	mov	r4, r0
	NRF24ChipSelect(HIGH);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff ffdd 	bl	8001ad4 <NRF24ChipSelect>
	return rv;
}
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	bd10      	pop	{r4, pc}

08001b1e <NRF24IsSending>:
{
 8001b1e:	b508      	push	{r3, lr}
	status = NRF24GetStatus();
 8001b20:	f7ff fff0 	bl	8001b04 <NRF24GetStatus>
	if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 8001b24:	f010 0f30 	tst.w	r0, #48	; 0x30
}
 8001b28:	bf0c      	ite	eq
 8001b2a:	2001      	moveq	r0, #1
 8001b2c:	2000      	movne	r0, #0
 8001b2e:	bd08      	pop	{r3, pc}

08001b30 <NRF24LastMessageStatus>:

uint8_t NRF24LastMessageStatus(void)
{
 8001b30:	b508      	push	{r3, lr}
	uint8_t rv;

	rv = NRF24GetStatus();
 8001b32:	f7ff ffe7 	bl	8001b04 <NRF24GetStatus>

	/* Transmission went OK */
	if((rv & ((1 << TX_DS))))
 8001b36:	0683      	lsls	r3, r0, #26
 8001b38:	d405      	bmi.n	8001b46 <NRF24LastMessageStatus+0x16>
	{
		return NRF24_TRANSMISSON_OK;
	}
	/* Maximum retransmission count is reached */
	/* Last message probably went missing ... */
	else if((rv & ((1 << MAX_RT))))
 8001b3a:	f010 0f10 	tst.w	r0, #16
		return NRF24_MESSAGE_LOST;
	}  
	/* Probably still sending ... */
	else
	{
		return 0xFF;
 8001b3e:	bf14      	ite	ne
 8001b40:	2001      	movne	r0, #1
 8001b42:	20ff      	moveq	r0, #255	; 0xff
 8001b44:	bd08      	pop	{r3, pc}
		return NRF24_TRANSMISSON_OK;
 8001b46:	2000      	movs	r0, #0
	}
}
 8001b48:	bd08      	pop	{r3, pc}

08001b4a <NRF24ReceiveBuffer>:
	NRF24ConfigRegister(CONFIG,NRF24_CONFIG);
}

/* send and receive multiple bytes over SPI */
void NRF24ReceiveBuffer(uint8_t* DataIn, uint8_t Len)
{
 8001b4a:	3901      	subs	r1, #1
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	1e45      	subs	r5, r0, #1
 8001b50:	1844      	adds	r4, r0, r1
	uint8_t i;

	for(i = 0; i < Len; i++)
 8001b52:	42a5      	cmp	r5, r4
 8001b54:	d100      	bne.n	8001b58 <NRF24ReceiveBuffer+0xe>
	{
		DataIn[i] = spi_transfer(0xff);
	}
}
 8001b56:	bd38      	pop	{r3, r4, r5, pc}
		DataIn[i] = spi_transfer(0xff);
 8001b58:	20ff      	movs	r0, #255	; 0xff
 8001b5a:	f7ff ffa1 	bl	8001aa0 <spi_transfer>
 8001b5e:	f805 0f01 	strb.w	r0, [r5, #1]!
 8001b62:	e7f6      	b.n	8001b52 <NRF24ReceiveBuffer+0x8>

08001b64 <NRF24TransmitBuffer>:

/* send multiple bytes over SPI */
void NRF24TransmitBuffer(uint8_t* Data,uint8_t Len)
{
 8001b64:	3901      	subs	r1, #1
 8001b66:	b538      	push	{r3, r4, r5, lr}
 8001b68:	1e45      	subs	r5, r0, #1
 8001b6a:	1844      	adds	r4, r0, r1
	uint8_t i;

	for(i = 0;i < Len;i++)
 8001b6c:	42a5      	cmp	r5, r4
 8001b6e:	d100      	bne.n	8001b72 <NRF24TransmitBuffer+0xe>
	{
		spi_transfer(Data[i]);
	}
}
 8001b70:	bd38      	pop	{r3, r4, r5, pc}
		spi_transfer(Data[i]);
 8001b72:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8001b76:	f7ff ff93 	bl	8001aa0 <spi_transfer>
 8001b7a:	e7f7      	b.n	8001b6c <NRF24TransmitBuffer+0x8>

08001b7c <NRF24ConfigRegister>:

/* Clocks only one byte into the given NRF24 register */
void NRF24ConfigRegister(uint8_t Address, uint8_t Value)
{
 8001b7c:	b538      	push	{r3, r4, r5, lr}
 8001b7e:	4604      	mov	r4, r0
 8001b80:	460d      	mov	r5, r1
	NRF24ChipSelect(LOW);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff ffa6 	bl	8001ad4 <NRF24ChipSelect>
	spi_transfer(W_REGISTER | (REGISTER_MASK & Address));
 8001b88:	f004 001f 	and.w	r0, r4, #31
 8001b8c:	f040 0020 	orr.w	r0, r0, #32
 8001b90:	f7ff ff86 	bl	8001aa0 <spi_transfer>
	spi_transfer(Value);
 8001b94:	4628      	mov	r0, r5
 8001b96:	f7ff ff83 	bl	8001aa0 <spi_transfer>
	NRF24ChipSelect(HIGH);
}
 8001b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	NRF24ChipSelect(HIGH);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f7ff bf98 	b.w	8001ad4 <NRF24ChipSelect>

08001ba4 <NRF24PowerUpRx>:
{     
 8001ba4:	b508      	push	{r3, lr}
	NRF24ChipSelect(LOW);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff ff94 	bl	8001ad4 <NRF24ChipSelect>
	spi_transfer(FLUSH_RX);
 8001bac:	20e2      	movs	r0, #226	; 0xe2
 8001bae:	f7ff ff77 	bl	8001aa0 <spi_transfer>
	NRF24ChipSelect(HIGH);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f7ff ff8e 	bl	8001ad4 <NRF24ChipSelect>
	NRF24ConfigRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8001bb8:	2170      	movs	r1, #112	; 0x70
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f7ff ffde 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ChipEnable(LOW);    
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff ff7f 	bl	8001ac4 <NRF24ChipEnable>
	NRF24ConfigRegister(CONFIG,NRF24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	210b      	movs	r1, #11
 8001bca:	f7ff ffd7 	bl	8001b7c <NRF24ConfigRegister>
}
 8001bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24ChipEnable(HIGH);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7ff bf76 	b.w	8001ac4 <NRF24ChipEnable>

08001bd8 <NRF24Config>:
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
	NRF24PayloadSize = ctxNRF24->PayloadSize;
 8001bdc:	7c02      	ldrb	r2, [r0, #16]
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <NRF24Config+0x7c>)
	NRF24ConfigRegister(RF_CH,ctxNRF24->Channel);
 8001be0:	7c41      	ldrb	r1, [r0, #17]
 8001be2:	2005      	movs	r0, #5
	NRF24PayloadSize = ctxNRF24->PayloadSize;
 8001be4:	701a      	strb	r2, [r3, #0]
	NRF24ConfigRegister(RF_CH,ctxNRF24->Channel);
 8001be6:	f7ff ffc9 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8001bea:	2100      	movs	r1, #0
 8001bec:	2011      	movs	r0, #17
 8001bee:	f7ff ffc5 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RX_PW_P1, ctxNRF24->PayloadSize); // Data payload pipe
 8001bf2:	7c21      	ldrb	r1, [r4, #16]
 8001bf4:	2012      	movs	r0, #18
 8001bf6:	f7ff ffc1 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RX_PW_P2, 0x00); // Pipe not used 
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2013      	movs	r0, #19
 8001bfe:	f7ff ffbd 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RX_PW_P3, 0x00); // Pipe not used 
 8001c02:	2100      	movs	r1, #0
 8001c04:	2014      	movs	r0, #20
 8001c06:	f7ff ffb9 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RX_PW_P4, 0x00); // Pipe not used 
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2015      	movs	r0, #21
 8001c0e:	f7ff ffb5 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RX_PW_P5, 0x00); // Pipe not used 
 8001c12:	2100      	movs	r1, #0
 8001c14:	2016      	movs	r0, #22
 8001c16:	f7ff ffb1 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	f7ff ffad 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(CONFIG,NRF24_CONFIG);
 8001c22:	2108      	movs	r1, #8
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ffa9 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<<ENAA_P5));
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f7ff ffa5 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<ERX_P5));
 8001c32:	2103      	movs	r1, #3
 8001c34:	2002      	movs	r0, #2
 8001c36:	f7ff ffa1 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 8001c3a:	214f      	movs	r1, #79	; 0x4f
 8001c3c:	2004      	movs	r0, #4
 8001c3e:	f7ff ff9d 	bl	8001b7c <NRF24ConfigRegister>
	NRF24ConfigRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_P5));
 8001c42:	2100      	movs	r1, #0
 8001c44:	201c      	movs	r0, #28
 8001c46:	f7ff ff99 	bl	8001b7c <NRF24ConfigRegister>
}
 8001c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24PowerUpRx();
 8001c4e:	f7ff bfa9 	b.w	8001ba4 <NRF24PowerUpRx>
 8001c52:	bf00      	nop
 8001c54:	20000728 	.word	0x20000728

08001c58 <NRF24PowerUpTx>:
{
 8001c58:	b508      	push	{r3, lr}
	NRF24ConfigRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 8001c5a:	2170      	movs	r1, #112	; 0x70
 8001c5c:	2007      	movs	r0, #7
 8001c5e:	f7ff ff8d 	bl	8001b7c <NRF24ConfigRegister>
}
 8001c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	NRF24ConfigRegister(CONFIG,NRF24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 8001c66:	210a      	movs	r1, #10
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff bf87 	b.w	8001b7c <NRF24ConfigRegister>

08001c6e <NRF24Send>:
{    
 8001c6e:	b510      	push	{r4, lr}
 8001c70:	4604      	mov	r4, r0
	NRF24ChipEnable(LOW);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff ff26 	bl	8001ac4 <NRF24ChipEnable>
	NRF24PowerUpTx();
 8001c78:	f7ff ffee 	bl	8001c58 <NRF24PowerUpTx>
		NRF24ChipSelect(LOW);           
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ff29 	bl	8001ad4 <NRF24ChipSelect>
		spi_transfer(FLUSH_TX);     
 8001c82:	20e1      	movs	r0, #225	; 0xe1
 8001c84:	f7ff ff0c 	bl	8001aa0 <spi_transfer>
		NRF24ChipSelect(HIGH);                    
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff ff23 	bl	8001ad4 <NRF24ChipSelect>
	NRF24ChipSelect(LOW);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff ff20 	bl	8001ad4 <NRF24ChipSelect>
	spi_transfer(W_TX_PAYLOAD);
 8001c94:	20a0      	movs	r0, #160	; 0xa0
 8001c96:	f7ff ff03 	bl	8001aa0 <spi_transfer>
	NRF24TransmitBuffer(ctxNRF24->TXData,ctxNRF24->PayloadSize);
 8001c9a:	7c21      	ldrb	r1, [r4, #16]
 8001c9c:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8001ca0:	f7ff ff60 	bl	8001b64 <NRF24TransmitBuffer>
	NRF24ChipSelect(HIGH);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff ff15 	bl	8001ad4 <NRF24ChipSelect>
}
 8001caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24ChipEnable(HIGH);    
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff bf08 	b.w	8001ac4 <NRF24ChipEnable>

08001cb4 <NRF24ReadRegister>:

/* Read single register from NRF24 */
void NRF24ReadRegister(uint8_t Address, uint8_t* Data, uint8_t Len)
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
 8001cb6:	4606      	mov	r6, r0
 8001cb8:	460c      	mov	r4, r1
 8001cba:	4615      	mov	r5, r2
	NRF24ChipSelect(LOW);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff ff09 	bl	8001ad4 <NRF24ChipSelect>
	spi_transfer(R_REGISTER | (REGISTER_MASK & Address));
 8001cc2:	f006 001f 	and.w	r0, r6, #31
 8001cc6:	f7ff feeb 	bl	8001aa0 <spi_transfer>
	NRF24ReceiveBuffer(Data,Len);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7ff ff3c 	bl	8001b4a <NRF24ReceiveBuffer>
	NRF24ChipSelect(HIGH);
}
 8001cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	NRF24ChipSelect(HIGH);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f7ff befc 	b.w	8001ad4 <NRF24ChipSelect>

08001cdc <NRF24RetransmissionCount>:
{
 8001cdc:	b507      	push	{r0, r1, r2, lr}
	NRF24ReadRegister(OBSERVE_TX,&rv,1);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f10d 0107 	add.w	r1, sp, #7
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f7ff ffe5 	bl	8001cb4 <NRF24ReadRegister>
	rv = rv & 0x0F;
 8001cea:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001cee:	f000 000f 	and.w	r0, r0, #15
 8001cf2:	b003      	add	sp, #12
 8001cf4:	f85d fb04 	ldr.w	pc, [sp], #4

08001cf8 <NRF24WriteRegister>:

/* Write to a single register of nrf24 */
void NRF24WriteRegister(uint8_t Address, uint8_t* Data, uint8_t Len) 
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	460d      	mov	r5, r1
 8001cfe:	4616      	mov	r6, r2
	NRF24ChipSelect(LOW);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fee7 	bl	8001ad4 <NRF24ChipSelect>
	spi_transfer(W_REGISTER | (REGISTER_MASK & Address));
 8001d06:	f004 001f 	and.w	r0, r4, #31
 8001d0a:	f040 0020 	orr.w	r0, r0, #32
 8001d0e:	f7ff fec7 	bl	8001aa0 <spi_transfer>
	NRF24TransmitBuffer(Data,Len);
 8001d12:	4628      	mov	r0, r5
 8001d14:	4631      	mov	r1, r6
 8001d16:	f7ff ff25 	bl	8001b64 <NRF24TransmitBuffer>
	NRF24ChipSelect(HIGH);
}
 8001d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	NRF24ChipSelect(HIGH);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff bed8 	b.w	8001ad4 <NRF24ChipSelect>

08001d24 <NRF24SetRxAddress>:
{
 8001d24:	b510      	push	{r4, lr}
 8001d26:	4604      	mov	r4, r0
	NRF24ChipEnable(LOW);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fecb 	bl	8001ac4 <NRF24ChipEnable>
	NRF24WriteRegister(RX_ADDR_P1, ctxNRF24->RXAddress, NRF24_ADDR_LEN);
 8001d2e:	4621      	mov	r1, r4
 8001d30:	200b      	movs	r0, #11
 8001d32:	2205      	movs	r2, #5
 8001d34:	f7ff ffe0 	bl	8001cf8 <NRF24WriteRegister>
}
 8001d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24ChipEnable(HIGH);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff bec1 	b.w	8001ac4 <NRF24ChipEnable>

08001d42 <NRF24SetTxAddress>:
{
 8001d42:	b510      	push	{r4, lr}
	NRF24WriteRegister(RX_ADDR_P0,ctxNRF24->TXAddress,NRF24_ADDR_LEN);
 8001d44:	f100 0408 	add.w	r4, r0, #8
 8001d48:	4621      	mov	r1, r4
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f7ff ffd3 	bl	8001cf8 <NRF24WriteRegister>
	NRF24WriteRegister(TX_ADDR,ctxNRF24->TXAddress,NRF24_ADDR_LEN);
 8001d52:	4621      	mov	r1, r4
}
 8001d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	NRF24WriteRegister(TX_ADDR,ctxNRF24->TXAddress,NRF24_ADDR_LEN);
 8001d58:	2205      	movs	r2, #5
 8001d5a:	2010      	movs	r0, #16
 8001d5c:	f7ff bfcc 	b.w	8001cf8 <NRF24WriteRegister>

08001d60 <MX_SPI1_Init>:
/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d60:	f44f 7382 	mov.w	r3, #260	; 0x104
{
 8001d64:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4810      	ldr	r0, [pc, #64]	; (8001da8 <MX_SPI1_Init+0x48>)
  hspi1.Instance = SPI1;
 8001d68:	4c10      	ldr	r4, [pc, #64]	; (8001dac <MX_SPI1_Init+0x4c>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	e884 0009 	stmia.w	r4, {r0, r3}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d72:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d74:	61a2      	str	r2, [r4, #24]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d76:	60a3      	str	r3, [r4, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d78:	60e3      	str	r3, [r4, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7a:	6123      	str	r3, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d7c:	6163      	str	r3, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d7e:	2220      	movs	r2, #32
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d80:	6223      	str	r3, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d82:	6263      	str	r3, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d84:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d86:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d88:	4620      	mov	r0, r4
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d8a:	61e2      	str	r2, [r4, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d8e:	f7ff fc47 	bl	8001620 <HAL_SPI_Init>
 8001d92:	b118      	cbz	r0, 8001d9c <MX_SPI1_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001d94:	2145      	movs	r1, #69	; 0x45
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_SPI1_Init+0x50>)
 8001d98:	f7ff fe80 	bl	8001a9c <_Error_Handler>
  }

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(&hspi1);
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	bd10      	pop	{r4, pc}
 8001da8:	40013000 	.word	0x40013000
 8001dac:	2000072c 	.word	0x2000072c
 8001db0:	08004f7c 	.word	0x08004f7c

08001db4 <HAL_SPI_MspInit>:

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001db6:	6802      	ldr	r2, [r0, #0]
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_SPI_MspInit+0x4c>)
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d11d      	bne.n	8001dfa <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dbe:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001dc2:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = NRF24_SCK_Pin|NRF24_MOSI_Pin;
 8001dd8:	23a0      	movs	r3, #160	; 0xa0
 8001dda:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f7ff f892 	bl	8000f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF24_MISO_Pin;
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dec:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8001dee:	a902      	add	r1, sp, #8
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(NRF24_MISO_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f7ff f889 	bl	8000f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dfa:	b007      	add	sp, #28
 8001dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e00:	40013000 	.word	0x40013000
 8001e04:	40010800 	.word	0x40010800

08001e08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_MspInit+0x9c>)
{
 8001e0a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	619a      	str	r2, [r3, #24]
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	f002 0201 	and.w	r2, r2, #1
 8001e1c:	9200      	str	r2, [sp, #0]
 8001e1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	69da      	ldr	r2, [r3, #28]
 8001e22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e26:	61da      	str	r2, [r3, #28]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e32:	f7fe fff1 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f06f 000b 	mvn.w	r0, #11
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	f7fe fffd 	bl	8000e3c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f06f 000a 	mvn.w	r0, #10
 8001e48:	4611      	mov	r1, r2
 8001e4a:	f7fe fff7 	bl	8000e3c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f06f 0009 	mvn.w	r0, #9
 8001e54:	4611      	mov	r1, r2
 8001e56:	f7fe fff1 	bl	8000e3c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f06f 0004 	mvn.w	r0, #4
 8001e60:	4611      	mov	r1, r2
 8001e62:	f7fe ffeb 	bl	8000e3c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f06f 0003 	mvn.w	r0, #3
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	f7fe ffe5 	bl	8000e3c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f06f 0001 	mvn.w	r0, #1
 8001e78:	4611      	mov	r1, r2
 8001e7a:	f7fe ffdf 	bl	8000e3c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	4611      	mov	r1, r2
 8001e86:	f7fe ffd9 	bl	8000e3c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_MspInit+0xa0>)
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e9c:	b003      	add	sp, #12
 8001e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000

08001eac <NMI_Handler>:
 8001eac:	4770      	bx	lr

08001eae <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler>

08001eb0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001eb0:	e7fe      	b.n	8001eb0 <MemManage_Handler>

08001eb2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler>

08001eb4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler>

08001eb6 <SVC_Handler>:
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Cnt++;

  if(!(Cnt % 10))
 8001ebc:	210a      	movs	r1, #10
  Cnt++;
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <SysTick_Handler+0x4c>)
{
 8001ec0:	b510      	push	{r4, lr}
  Cnt++;
 8001ec2:	6803      	ldr	r3, [r0, #0]
 8001ec4:	3301      	adds	r3, #1
  if(!(Cnt % 10))
 8001ec6:	fbb3 f2f1 	udiv	r2, r3, r1
 8001eca:	fb01 3212 	mls	r2, r1, r2, r3
  Cnt++;
 8001ece:	6003      	str	r3, [r0, #0]
  if(!(Cnt % 10))
 8001ed0:	b9a2      	cbnz	r2, 8001efc <SysTick_Handler+0x40>
  {
	  Task10ms = true;
	  if(!(Cnt % 100))
 8001ed2:	2464      	movs	r4, #100	; 0x64
	  Task10ms = true;
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <SysTick_Handler+0x50>)
 8001ed8:	7011      	strb	r1, [r2, #0]
	  if(!(Cnt % 100))
 8001eda:	fbb3 f2f4 	udiv	r2, r3, r4
 8001ede:	fb04 3212 	mls	r2, r4, r2, r3
 8001ee2:	b95a      	cbnz	r2, 8001efc <SysTick_Handler+0x40>
	  {
		  Task100ms = true;
		  if(!(Cnt % 1000))
 8001ee4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		  Task100ms = true;
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <SysTick_Handler+0x54>)
 8001eea:	7011      	strb	r1, [r2, #0]
		  if(!(Cnt % 1000))
 8001eec:	fbb3 f2f4 	udiv	r2, r3, r4
 8001ef0:	fb04 3312 	mls	r3, r4, r2, r3
 8001ef4:	b913      	cbnz	r3, 8001efc <SysTick_Handler+0x40>
		  {
			  Cnt = 0;
 8001ef6:	6003      	str	r3, [r0, #0]
			  Task1s = true;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <SysTick_Handler+0x58>)
 8001efa:	7019      	strb	r1, [r3, #0]
		  }
	  }
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efc:	f7fe ff6e 	bl	8000ddc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SYSTICK_IRQHandler();
 8001f04:	f7fe bffd 	b.w	8000f02 <HAL_SYSTICK_IRQHandler>
 8001f08:	200006e4 	.word	0x200006e4
 8001f0c:	200006e9 	.word	0x200006e9
 8001f10:	200006e8 	.word	0x200006e8
 8001f14:	200006ea 	.word	0x200006ea

08001f18 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff b8e1 	b.w	80010e0 <HAL_GPIO_EXTI_IRQHandler>
	...

08001f20 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <SystemInit+0x40>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <SystemInit+0x44>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f44:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f52:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <SystemInit+0x48>)
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	f8ff0000 	.word	0xf8ff0000
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f6c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001f6e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001f72:	480b      	ldr	r0, [pc, #44]	; (8001fa0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MX_USART2_UART_Init+0x38>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f76:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001f78:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f7e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f80:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f82:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f84:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8a:	f7ff fc23 	bl	80017d4 <HAL_UART_Init>
 8001f8e:	b128      	cbz	r0, 8001f9c <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8001f94:	2142      	movs	r1, #66	; 0x42
 8001f96:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_USART2_UART_Init+0x3c>)
 8001f98:	f7ff bd80 	b.w	8001a9c <_Error_Handler>
 8001f9c:	bd08      	pop	{r3, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000784 	.word	0x20000784
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	08004fa1 	.word	0x08004fa1

08001fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8001fae:	6802      	ldr	r2, [r0, #0]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_UART_MspInit+0x4c>)
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11d      	bne.n	8001ff2 <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001fba:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fc2:	61da      	str	r2, [r3, #28]
 8001fc4:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	480d      	ldr	r0, [pc, #52]	; (8001ffc <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	f7fe ff96 	bl	8000f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	a902      	add	r1, sp, #8
 8001fe8:	4804      	ldr	r0, [pc, #16]	; (8001ffc <HAL_UART_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f7fe ff8d 	bl	8000f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ff2:	b007      	add	sp, #28
 8001ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40010800 	.word	0x40010800

08002000 <USARTPutch>:
} 

/* USER CODE BEGIN 1 */
void USARTPutch(USART_TypeDef* Uart, uint8_t Byte)
{
	while((Uart->SR & USART_SR_TC) == 0);
 8002000:	6803      	ldr	r3, [r0, #0]
 8002002:	065b      	lsls	r3, r3, #25
 8002004:	d5fc      	bpl.n	8002000 <USARTPutch>
	Uart->DR = Byte;
 8002006:	6041      	str	r1, [r0, #4]
 8002008:	4770      	bx	lr

0800200a <USARTWriteBuffer>:
		USARTPutch(Uart,*Buffer);
		Buffer++;
	}
}
void USARTWriteBuffer(USART_TypeDef* Uart, uint8_t* Buffer, uint16_t Len)
{
 800200a:	b538      	push	{r3, r4, r5, lr}
 800200c:	4605      	mov	r5, r0
 800200e:	460c      	mov	r4, r1
 8002010:	440a      	add	r2, r1
	uint16_t Cnt = Len;
	while(Cnt--)
 8002012:	4294      	cmp	r4, r2
 8002014:	d100      	bne.n	8002018 <USARTWriteBuffer+0xe>
	{
		USARTPutch(Uart,*Buffer);
		Buffer++;
	}
}
 8002016:	bd38      	pop	{r3, r4, r5, pc}
		USARTPutch(Uart,*Buffer);
 8002018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff ffef 	bl	8002000 <USARTPutch>
 8002022:	e7f6      	b.n	8002012 <USARTWriteBuffer+0x8>

08002024 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002024:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002026:	e003      	b.n	8002030 <LoopCopyDataInit>

08002028 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800202a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800202c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800202e:	3104      	adds	r1, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002030:	480a      	ldr	r0, [pc, #40]	; (800205c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002034:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002036:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002038:	d3f6      	bcc.n	8002028 <CopyDataInit>
  ldr r2, =_sbss
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800203c:	e002      	b.n	8002044 <LoopFillZerobss>

0800203e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002040:	f842 3b04 	str.w	r3, [r2], #4

08002044 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002046:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002048:	d3f9      	bcc.n	800203e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800204a:	f7ff ff69 	bl	8001f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f000 f80f 	bl	8002070 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002052:	f7ff fcb9 	bl	80019c8 <main>
  bx lr
 8002056:	4770      	bx	lr
  ldr r3, =_sidata
 8002058:	08005230 	.word	0x08005230
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002060:	200006c8 	.word	0x200006c8
  ldr r2, =_sbss
 8002064:	200006c8 	.word	0x200006c8
  ldr r3, = _ebss
 8002068:	200007d4 	.word	0x200007d4

0800206c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800206c:	e7fe      	b.n	800206c <ADC1_2_IRQHandler>
	...

08002070 <__libc_init_array>:
 8002070:	b570      	push	{r4, r5, r6, lr}
 8002072:	2500      	movs	r5, #0
 8002074:	4e0c      	ldr	r6, [pc, #48]	; (80020a8 <__libc_init_array+0x38>)
 8002076:	4c0d      	ldr	r4, [pc, #52]	; (80020ac <__libc_init_array+0x3c>)
 8002078:	1ba4      	subs	r4, r4, r6
 800207a:	10a4      	asrs	r4, r4, #2
 800207c:	42a5      	cmp	r5, r4
 800207e:	d109      	bne.n	8002094 <__libc_init_array+0x24>
 8002080:	f002 ff3e 	bl	8004f00 <_init>
 8002084:	2500      	movs	r5, #0
 8002086:	4e0a      	ldr	r6, [pc, #40]	; (80020b0 <__libc_init_array+0x40>)
 8002088:	4c0a      	ldr	r4, [pc, #40]	; (80020b4 <__libc_init_array+0x44>)
 800208a:	1ba4      	subs	r4, r4, r6
 800208c:	10a4      	asrs	r4, r4, #2
 800208e:	42a5      	cmp	r5, r4
 8002090:	d105      	bne.n	800209e <__libc_init_array+0x2e>
 8002092:	bd70      	pop	{r4, r5, r6, pc}
 8002094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002098:	4798      	blx	r3
 800209a:	3501      	adds	r5, #1
 800209c:	e7ee      	b.n	800207c <__libc_init_array+0xc>
 800209e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020a2:	4798      	blx	r3
 80020a4:	3501      	adds	r5, #1
 80020a6:	e7f2      	b.n	800208e <__libc_init_array+0x1e>
 80020a8:	08005228 	.word	0x08005228
 80020ac:	08005228 	.word	0x08005228
 80020b0:	08005228 	.word	0x08005228
 80020b4:	0800522c 	.word	0x0800522c

080020b8 <memset>:
 80020b8:	4603      	mov	r3, r0
 80020ba:	4402      	add	r2, r0
 80020bc:	4293      	cmp	r3, r2
 80020be:	d100      	bne.n	80020c2 <memset+0xa>
 80020c0:	4770      	bx	lr
 80020c2:	f803 1b01 	strb.w	r1, [r3], #1
 80020c6:	e7f9      	b.n	80020bc <memset+0x4>

080020c8 <_vsnprintf_r>:
 80020c8:	b530      	push	{r4, r5, lr}
 80020ca:	1e14      	subs	r4, r2, #0
 80020cc:	4605      	mov	r5, r0
 80020ce:	b09b      	sub	sp, #108	; 0x6c
 80020d0:	4618      	mov	r0, r3
 80020d2:	da05      	bge.n	80020e0 <_vsnprintf_r+0x18>
 80020d4:	238b      	movs	r3, #139	; 0x8b
 80020d6:	f04f 30ff 	mov.w	r0, #4294967295
 80020da:	602b      	str	r3, [r5, #0]
 80020dc:	b01b      	add	sp, #108	; 0x6c
 80020de:	bd30      	pop	{r4, r5, pc}
 80020e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80020e4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80020e8:	bf0c      	ite	eq
 80020ea:	4623      	moveq	r3, r4
 80020ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	9305      	str	r3, [sp, #20]
 80020f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f8:	9100      	str	r1, [sp, #0]
 80020fa:	9104      	str	r1, [sp, #16]
 80020fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002100:	4602      	mov	r2, r0
 8002102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002104:	4669      	mov	r1, sp
 8002106:	4628      	mov	r0, r5
 8002108:	f000 f818 	bl	800213c <_svfprintf_r>
 800210c:	1c43      	adds	r3, r0, #1
 800210e:	bfbc      	itt	lt
 8002110:	238b      	movlt	r3, #139	; 0x8b
 8002112:	602b      	strlt	r3, [r5, #0]
 8002114:	2c00      	cmp	r4, #0
 8002116:	d0e1      	beq.n	80020dc <_vsnprintf_r+0x14>
 8002118:	2200      	movs	r2, #0
 800211a:	9b00      	ldr	r3, [sp, #0]
 800211c:	701a      	strb	r2, [r3, #0]
 800211e:	e7dd      	b.n	80020dc <_vsnprintf_r+0x14>

08002120 <vsnprintf>:
 8002120:	b507      	push	{r0, r1, r2, lr}
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	460a      	mov	r2, r1
 8002128:	4601      	mov	r1, r0
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <vsnprintf+0x18>)
 800212c:	6800      	ldr	r0, [r0, #0]
 800212e:	f7ff ffcb 	bl	80020c8 <_vsnprintf_r>
 8002132:	b003      	add	sp, #12
 8002134:	f85d fb04 	ldr.w	pc, [sp], #4
 8002138:	20000058 	.word	0x20000058

0800213c <_svfprintf_r>:
 800213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002140:	b0bf      	sub	sp, #252	; 0xfc
 8002142:	4689      	mov	r9, r1
 8002144:	4615      	mov	r5, r2
 8002146:	461f      	mov	r7, r3
 8002148:	4682      	mov	sl, r0
 800214a:	f001 fe29 	bl	8003da0 <_localeconv_r>
 800214e:	6803      	ldr	r3, [r0, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	9311      	str	r3, [sp, #68]	; 0x44
 8002154:	f7fd fffc 	bl	8000150 <strlen>
 8002158:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800215c:	900a      	str	r0, [sp, #40]	; 0x28
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	d518      	bpl.n	8002194 <_svfprintf_r+0x58>
 8002162:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002166:	b9ab      	cbnz	r3, 8002194 <_svfprintf_r+0x58>
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	4650      	mov	r0, sl
 800216c:	f001 fe2e 	bl	8003dcc <_malloc_r>
 8002170:	f8c9 0000 	str.w	r0, [r9]
 8002174:	f8c9 0010 	str.w	r0, [r9, #16]
 8002178:	b948      	cbnz	r0, 800218e <_svfprintf_r+0x52>
 800217a:	230c      	movs	r3, #12
 800217c:	f8ca 3000 	str.w	r3, [sl]
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	930b      	str	r3, [sp, #44]	; 0x2c
 8002186:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002188:	b03f      	add	sp, #252	; 0xfc
 800218a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800218e:	2340      	movs	r3, #64	; 0x40
 8002190:	f8c9 3014 	str.w	r3, [r9, #20]
 8002194:	2300      	movs	r3, #0
 8002196:	ac2e      	add	r4, sp, #184	; 0xb8
 8002198:	9421      	str	r4, [sp, #132]	; 0x84
 800219a:	9323      	str	r3, [sp, #140]	; 0x8c
 800219c:	9322      	str	r3, [sp, #136]	; 0x88
 800219e:	9509      	str	r5, [sp, #36]	; 0x24
 80021a0:	9307      	str	r3, [sp, #28]
 80021a2:	930d      	str	r3, [sp, #52]	; 0x34
 80021a4:	930e      	str	r3, [sp, #56]	; 0x38
 80021a6:	9315      	str	r3, [sp, #84]	; 0x54
 80021a8:	9314      	str	r3, [sp, #80]	; 0x50
 80021aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80021ac:	9312      	str	r3, [sp, #72]	; 0x48
 80021ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80021b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80021b2:	462b      	mov	r3, r5
 80021b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021b8:	b112      	cbz	r2, 80021c0 <_svfprintf_r+0x84>
 80021ba:	2a25      	cmp	r2, #37	; 0x25
 80021bc:	f040 8083 	bne.w	80022c6 <_svfprintf_r+0x18a>
 80021c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021c2:	1aee      	subs	r6, r5, r3
 80021c4:	d00d      	beq.n	80021e2 <_svfprintf_r+0xa6>
 80021c6:	e884 0048 	stmia.w	r4, {r3, r6}
 80021ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80021cc:	4433      	add	r3, r6
 80021ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80021d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80021d2:	3301      	adds	r3, #1
 80021d4:	2b07      	cmp	r3, #7
 80021d6:	9322      	str	r3, [sp, #136]	; 0x88
 80021d8:	dc77      	bgt.n	80022ca <_svfprintf_r+0x18e>
 80021da:	3408      	adds	r4, #8
 80021dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021de:	4433      	add	r3, r6
 80021e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80021e2:	782b      	ldrb	r3, [r5, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 8725 	beq.w	8003034 <_svfprintf_r+0xef8>
 80021ea:	2300      	movs	r3, #0
 80021ec:	1c69      	adds	r1, r5, #1
 80021ee:	461a      	mov	r2, r3
 80021f0:	f04f 3bff 	mov.w	fp, #4294967295
 80021f4:	461d      	mov	r5, r3
 80021f6:	200a      	movs	r0, #10
 80021f8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80021fc:	930c      	str	r3, [sp, #48]	; 0x30
 80021fe:	1c4e      	adds	r6, r1, #1
 8002200:	7809      	ldrb	r1, [r1, #0]
 8002202:	9609      	str	r6, [sp, #36]	; 0x24
 8002204:	9106      	str	r1, [sp, #24]
 8002206:	9906      	ldr	r1, [sp, #24]
 8002208:	3920      	subs	r1, #32
 800220a:	2958      	cmp	r1, #88	; 0x58
 800220c:	f200 8414 	bhi.w	8002a38 <_svfprintf_r+0x8fc>
 8002210:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002214:	041200a5 	.word	0x041200a5
 8002218:	00aa0412 	.word	0x00aa0412
 800221c:	04120412 	.word	0x04120412
 8002220:	04120412 	.word	0x04120412
 8002224:	04120412 	.word	0x04120412
 8002228:	006500ad 	.word	0x006500ad
 800222c:	00b50412 	.word	0x00b50412
 8002230:	041200b8 	.word	0x041200b8
 8002234:	00d800d5 	.word	0x00d800d5
 8002238:	00d800d8 	.word	0x00d800d8
 800223c:	00d800d8 	.word	0x00d800d8
 8002240:	00d800d8 	.word	0x00d800d8
 8002244:	00d800d8 	.word	0x00d800d8
 8002248:	04120412 	.word	0x04120412
 800224c:	04120412 	.word	0x04120412
 8002250:	04120412 	.word	0x04120412
 8002254:	04120412 	.word	0x04120412
 8002258:	04120412 	.word	0x04120412
 800225c:	0122010c 	.word	0x0122010c
 8002260:	01220412 	.word	0x01220412
 8002264:	04120412 	.word	0x04120412
 8002268:	04120412 	.word	0x04120412
 800226c:	041200eb 	.word	0x041200eb
 8002270:	033c0412 	.word	0x033c0412
 8002274:	04120412 	.word	0x04120412
 8002278:	04120412 	.word	0x04120412
 800227c:	03a40412 	.word	0x03a40412
 8002280:	04120412 	.word	0x04120412
 8002284:	04120085 	.word	0x04120085
 8002288:	04120412 	.word	0x04120412
 800228c:	04120412 	.word	0x04120412
 8002290:	04120412 	.word	0x04120412
 8002294:	04120412 	.word	0x04120412
 8002298:	00fe0412 	.word	0x00fe0412
 800229c:	0122006b 	.word	0x0122006b
 80022a0:	01220122 	.word	0x01220122
 80022a4:	006b00ee 	.word	0x006b00ee
 80022a8:	04120412 	.word	0x04120412
 80022ac:	041200f1 	.word	0x041200f1
 80022b0:	033e031e 	.word	0x033e031e
 80022b4:	00f80372 	.word	0x00f80372
 80022b8:	03830412 	.word	0x03830412
 80022bc:	03a60412 	.word	0x03a60412
 80022c0:	04120412 	.word	0x04120412
 80022c4:	03be      	.short	0x03be
 80022c6:	461d      	mov	r5, r3
 80022c8:	e773      	b.n	80021b2 <_svfprintf_r+0x76>
 80022ca:	aa21      	add	r2, sp, #132	; 0x84
 80022cc:	4649      	mov	r1, r9
 80022ce:	4650      	mov	r0, sl
 80022d0:	f002 fa90 	bl	80047f4 <__ssprint_r>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	f040 868e 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 80022da:	ac2e      	add	r4, sp, #184	; 0xb8
 80022dc:	e77e      	b.n	80021dc <_svfprintf_r+0xa0>
 80022de:	2301      	movs	r3, #1
 80022e0:	222b      	movs	r2, #43	; 0x2b
 80022e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80022e4:	e78b      	b.n	80021fe <_svfprintf_r+0xc2>
 80022e6:	460f      	mov	r7, r1
 80022e8:	e7fb      	b.n	80022e2 <_svfprintf_r+0x1a6>
 80022ea:	b10b      	cbz	r3, 80022f0 <_svfprintf_r+0x1b4>
 80022ec:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80022f0:	06ae      	lsls	r6, r5, #26
 80022f2:	f140 80a1 	bpl.w	8002438 <_svfprintf_r+0x2fc>
 80022f6:	3707      	adds	r7, #7
 80022f8:	f027 0707 	bic.w	r7, r7, #7
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	9308      	str	r3, [sp, #32]
 8002302:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002306:	2e00      	cmp	r6, #0
 8002308:	f177 0300 	sbcs.w	r3, r7, #0
 800230c:	da05      	bge.n	800231a <_svfprintf_r+0x1de>
 800230e:	232d      	movs	r3, #45	; 0x2d
 8002310:	4276      	negs	r6, r6
 8002312:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002316:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800231a:	2301      	movs	r3, #1
 800231c:	e2c7      	b.n	80028ae <_svfprintf_r+0x772>
 800231e:	b10b      	cbz	r3, 8002324 <_svfprintf_r+0x1e8>
 8002320:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002324:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <_svfprintf_r+0x46c>)
 8002326:	9315      	str	r3, [sp, #84]	; 0x54
 8002328:	06ab      	lsls	r3, r5, #26
 800232a:	f140 8336 	bpl.w	800299a <_svfprintf_r+0x85e>
 800232e:	3707      	adds	r7, #7
 8002330:	f027 0707 	bic.w	r7, r7, #7
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	9308      	str	r3, [sp, #32]
 800233a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800233e:	07e8      	lsls	r0, r5, #31
 8002340:	d50b      	bpl.n	800235a <_svfprintf_r+0x21e>
 8002342:	ea56 0307 	orrs.w	r3, r6, r7
 8002346:	d008      	beq.n	800235a <_svfprintf_r+0x21e>
 8002348:	2330      	movs	r3, #48	; 0x30
 800234a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800234e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002352:	f045 0502 	orr.w	r5, r5, #2
 8002356:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 800235a:	2302      	movs	r3, #2
 800235c:	e2a4      	b.n	80028a8 <_svfprintf_r+0x76c>
 800235e:	2a00      	cmp	r2, #0
 8002360:	d1bf      	bne.n	80022e2 <_svfprintf_r+0x1a6>
 8002362:	2301      	movs	r3, #1
 8002364:	2220      	movs	r2, #32
 8002366:	e7bc      	b.n	80022e2 <_svfprintf_r+0x1a6>
 8002368:	f045 0501 	orr.w	r5, r5, #1
 800236c:	e7b9      	b.n	80022e2 <_svfprintf_r+0x1a6>
 800236e:	683e      	ldr	r6, [r7, #0]
 8002370:	1d39      	adds	r1, r7, #4
 8002372:	2e00      	cmp	r6, #0
 8002374:	960c      	str	r6, [sp, #48]	; 0x30
 8002376:	dab6      	bge.n	80022e6 <_svfprintf_r+0x1aa>
 8002378:	460f      	mov	r7, r1
 800237a:	4276      	negs	r6, r6
 800237c:	960c      	str	r6, [sp, #48]	; 0x30
 800237e:	f045 0504 	orr.w	r5, r5, #4
 8002382:	e7ae      	b.n	80022e2 <_svfprintf_r+0x1a6>
 8002384:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002386:	1c4e      	adds	r6, r1, #1
 8002388:	7809      	ldrb	r1, [r1, #0]
 800238a:	292a      	cmp	r1, #42	; 0x2a
 800238c:	9106      	str	r1, [sp, #24]
 800238e:	d010      	beq.n	80023b2 <_svfprintf_r+0x276>
 8002390:	f04f 0b00 	mov.w	fp, #0
 8002394:	9609      	str	r6, [sp, #36]	; 0x24
 8002396:	9906      	ldr	r1, [sp, #24]
 8002398:	3930      	subs	r1, #48	; 0x30
 800239a:	2909      	cmp	r1, #9
 800239c:	f63f af33 	bhi.w	8002206 <_svfprintf_r+0xca>
 80023a0:	fb00 1b0b 	mla	fp, r0, fp, r1
 80023a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80023a6:	460e      	mov	r6, r1
 80023a8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80023ac:	9106      	str	r1, [sp, #24]
 80023ae:	9609      	str	r6, [sp, #36]	; 0x24
 80023b0:	e7f1      	b.n	8002396 <_svfprintf_r+0x25a>
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	9609      	str	r6, [sp, #36]	; 0x24
 80023b6:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 80023ba:	3704      	adds	r7, #4
 80023bc:	e791      	b.n	80022e2 <_svfprintf_r+0x1a6>
 80023be:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80023c2:	e78e      	b.n	80022e2 <_svfprintf_r+0x1a6>
 80023c4:	2100      	movs	r1, #0
 80023c6:	910c      	str	r1, [sp, #48]	; 0x30
 80023c8:	9906      	ldr	r1, [sp, #24]
 80023ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80023cc:	3930      	subs	r1, #48	; 0x30
 80023ce:	fb00 1106 	mla	r1, r0, r6, r1
 80023d2:	910c      	str	r1, [sp, #48]	; 0x30
 80023d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80023d6:	460e      	mov	r6, r1
 80023d8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80023dc:	9106      	str	r1, [sp, #24]
 80023de:	9906      	ldr	r1, [sp, #24]
 80023e0:	9609      	str	r6, [sp, #36]	; 0x24
 80023e2:	3930      	subs	r1, #48	; 0x30
 80023e4:	2909      	cmp	r1, #9
 80023e6:	d9ef      	bls.n	80023c8 <_svfprintf_r+0x28c>
 80023e8:	e70d      	b.n	8002206 <_svfprintf_r+0xca>
 80023ea:	f045 0508 	orr.w	r5, r5, #8
 80023ee:	e778      	b.n	80022e2 <_svfprintf_r+0x1a6>
 80023f0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80023f4:	e775      	b.n	80022e2 <_svfprintf_r+0x1a6>
 80023f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80023f8:	7809      	ldrb	r1, [r1, #0]
 80023fa:	296c      	cmp	r1, #108	; 0x6c
 80023fc:	d105      	bne.n	800240a <_svfprintf_r+0x2ce>
 80023fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002400:	3101      	adds	r1, #1
 8002402:	9109      	str	r1, [sp, #36]	; 0x24
 8002404:	f045 0520 	orr.w	r5, r5, #32
 8002408:	e76b      	b.n	80022e2 <_svfprintf_r+0x1a6>
 800240a:	f045 0510 	orr.w	r5, r5, #16
 800240e:	e768      	b.n	80022e2 <_svfprintf_r+0x1a6>
 8002410:	2600      	movs	r6, #0
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	9308      	str	r3, [sp, #32]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800241c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002420:	f04f 0b01 	mov.w	fp, #1
 8002424:	4637      	mov	r7, r6
 8002426:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800242a:	e11c      	b.n	8002666 <_svfprintf_r+0x52a>
 800242c:	b10b      	cbz	r3, 8002432 <_svfprintf_r+0x2f6>
 800242e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002432:	f045 0510 	orr.w	r5, r5, #16
 8002436:	e75b      	b.n	80022f0 <_svfprintf_r+0x1b4>
 8002438:	f015 0f10 	tst.w	r5, #16
 800243c:	f107 0304 	add.w	r3, r7, #4
 8002440:	d003      	beq.n	800244a <_svfprintf_r+0x30e>
 8002442:	683e      	ldr	r6, [r7, #0]
 8002444:	9308      	str	r3, [sp, #32]
 8002446:	17f7      	asrs	r7, r6, #31
 8002448:	e75d      	b.n	8002306 <_svfprintf_r+0x1ca>
 800244a:	683e      	ldr	r6, [r7, #0]
 800244c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002450:	9308      	str	r3, [sp, #32]
 8002452:	bf18      	it	ne
 8002454:	b236      	sxthne	r6, r6
 8002456:	e7f6      	b.n	8002446 <_svfprintf_r+0x30a>
 8002458:	b10b      	cbz	r3, 800245e <_svfprintf_r+0x322>
 800245a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800245e:	3707      	adds	r7, #7
 8002460:	f027 0707 	bic.w	r7, r7, #7
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	9308      	str	r3, [sp, #32]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	930d      	str	r3, [sp, #52]	; 0x34
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002476:	930e      	str	r3, [sp, #56]	; 0x38
 8002478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800247a:	4638      	mov	r0, r7
 800247c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8002480:	4631      	mov	r1, r6
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <_svfprintf_r+0x470>)
 8002484:	f7fe fabe 	bl	8000a04 <__aeabi_dcmpun>
 8002488:	2800      	cmp	r0, #0
 800248a:	f040 85dc 	bne.w	8003046 <_svfprintf_r+0xf0a>
 800248e:	f04f 32ff 	mov.w	r2, #4294967295
 8002492:	4b46      	ldr	r3, [pc, #280]	; (80025ac <_svfprintf_r+0x470>)
 8002494:	4638      	mov	r0, r7
 8002496:	4631      	mov	r1, r6
 8002498:	f7fe fa96 	bl	80009c8 <__aeabi_dcmple>
 800249c:	2800      	cmp	r0, #0
 800249e:	f040 85d2 	bne.w	8003046 <_svfprintf_r+0xf0a>
 80024a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80024a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80024a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80024a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80024aa:	f7fe fa83 	bl	80009b4 <__aeabi_dcmplt>
 80024ae:	b110      	cbz	r0, 80024b6 <_svfprintf_r+0x37a>
 80024b0:	232d      	movs	r3, #45	; 0x2d
 80024b2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80024b6:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <_svfprintf_r+0x474>)
 80024b8:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <_svfprintf_r+0x478>)
 80024ba:	9906      	ldr	r1, [sp, #24]
 80024bc:	f04f 0b03 	mov.w	fp, #3
 80024c0:	2947      	cmp	r1, #71	; 0x47
 80024c2:	bfcc      	ite	gt
 80024c4:	4690      	movgt	r8, r2
 80024c6:	4698      	movle	r8, r3
 80024c8:	2600      	movs	r6, #0
 80024ca:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80024ce:	4637      	mov	r7, r6
 80024d0:	e0c9      	b.n	8002666 <_svfprintf_r+0x52a>
 80024d2:	f1bb 3fff 	cmp.w	fp, #4294967295
 80024d6:	d026      	beq.n	8002526 <_svfprintf_r+0x3ea>
 80024d8:	9b06      	ldr	r3, [sp, #24]
 80024da:	f023 0320 	bic.w	r3, r3, #32
 80024de:	2b47      	cmp	r3, #71	; 0x47
 80024e0:	d104      	bne.n	80024ec <_svfprintf_r+0x3b0>
 80024e2:	f1bb 0f00 	cmp.w	fp, #0
 80024e6:	bf08      	it	eq
 80024e8:	f04f 0b01 	moveq.w	fp, #1
 80024ec:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80024f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80024f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024f4:	1e1f      	subs	r7, r3, #0
 80024f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024f8:	bfa8      	it	ge
 80024fa:	9710      	strge	r7, [sp, #64]	; 0x40
 80024fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80024fe:	bfbd      	ittte	lt
 8002500:	463b      	movlt	r3, r7
 8002502:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002506:	9310      	strlt	r3, [sp, #64]	; 0x40
 8002508:	2300      	movge	r3, #0
 800250a:	bfb8      	it	lt
 800250c:	232d      	movlt	r3, #45	; 0x2d
 800250e:	9316      	str	r3, [sp, #88]	; 0x58
 8002510:	9b06      	ldr	r3, [sp, #24]
 8002512:	f023 0720 	bic.w	r7, r3, #32
 8002516:	2f46      	cmp	r7, #70	; 0x46
 8002518:	d008      	beq.n	800252c <_svfprintf_r+0x3f0>
 800251a:	2f45      	cmp	r7, #69	; 0x45
 800251c:	d142      	bne.n	80025a4 <_svfprintf_r+0x468>
 800251e:	f10b 0601 	add.w	r6, fp, #1
 8002522:	2302      	movs	r3, #2
 8002524:	e004      	b.n	8002530 <_svfprintf_r+0x3f4>
 8002526:	f04f 0b06 	mov.w	fp, #6
 800252a:	e7df      	b.n	80024ec <_svfprintf_r+0x3b0>
 800252c:	465e      	mov	r6, fp
 800252e:	2303      	movs	r3, #3
 8002530:	aa1f      	add	r2, sp, #124	; 0x7c
 8002532:	9204      	str	r2, [sp, #16]
 8002534:	aa1c      	add	r2, sp, #112	; 0x70
 8002536:	9203      	str	r2, [sp, #12]
 8002538:	aa1b      	add	r2, sp, #108	; 0x6c
 800253a:	9202      	str	r2, [sp, #8]
 800253c:	e88d 0048 	stmia.w	sp, {r3, r6}
 8002540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002544:	4650      	mov	r0, sl
 8002546:	f000 fe57 	bl	80031f8 <_dtoa_r>
 800254a:	2f47      	cmp	r7, #71	; 0x47
 800254c:	4680      	mov	r8, r0
 800254e:	d102      	bne.n	8002556 <_svfprintf_r+0x41a>
 8002550:	07e8      	lsls	r0, r5, #31
 8002552:	f140 8585 	bpl.w	8003060 <_svfprintf_r+0xf24>
 8002556:	eb08 0306 	add.w	r3, r8, r6
 800255a:	2f46      	cmp	r7, #70	; 0x46
 800255c:	9307      	str	r3, [sp, #28]
 800255e:	d111      	bne.n	8002584 <_svfprintf_r+0x448>
 8002560:	f898 3000 	ldrb.w	r3, [r8]
 8002564:	2b30      	cmp	r3, #48	; 0x30
 8002566:	d109      	bne.n	800257c <_svfprintf_r+0x440>
 8002568:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800256a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800256c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800256e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002570:	f7fe fa16 	bl	80009a0 <__aeabi_dcmpeq>
 8002574:	b910      	cbnz	r0, 800257c <_svfprintf_r+0x440>
 8002576:	f1c6 0601 	rsb	r6, r6, #1
 800257a:	961b      	str	r6, [sp, #108]	; 0x6c
 800257c:	9a07      	ldr	r2, [sp, #28]
 800257e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002580:	441a      	add	r2, r3
 8002582:	9207      	str	r2, [sp, #28]
 8002584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002588:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800258a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800258c:	f7fe fa08 	bl	80009a0 <__aeabi_dcmpeq>
 8002590:	b990      	cbnz	r0, 80025b8 <_svfprintf_r+0x47c>
 8002592:	2230      	movs	r2, #48	; 0x30
 8002594:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002596:	9907      	ldr	r1, [sp, #28]
 8002598:	4299      	cmp	r1, r3
 800259a:	d90f      	bls.n	80025bc <_svfprintf_r+0x480>
 800259c:	1c59      	adds	r1, r3, #1
 800259e:	911f      	str	r1, [sp, #124]	; 0x7c
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e7f7      	b.n	8002594 <_svfprintf_r+0x458>
 80025a4:	465e      	mov	r6, fp
 80025a6:	e7bc      	b.n	8002522 <_svfprintf_r+0x3e6>
 80025a8:	08004fc0 	.word	0x08004fc0
 80025ac:	7fefffff 	.word	0x7fefffff
 80025b0:	08004fb0 	.word	0x08004fb0
 80025b4:	08004fb4 	.word	0x08004fb4
 80025b8:	9b07      	ldr	r3, [sp, #28]
 80025ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80025bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80025be:	2f47      	cmp	r7, #71	; 0x47
 80025c0:	eba3 0308 	sub.w	r3, r3, r8
 80025c4:	9307      	str	r3, [sp, #28]
 80025c6:	f040 8100 	bne.w	80027ca <_svfprintf_r+0x68e>
 80025ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80025cc:	1cd9      	adds	r1, r3, #3
 80025ce:	db02      	blt.n	80025d6 <_svfprintf_r+0x49a>
 80025d0:	459b      	cmp	fp, r3
 80025d2:	f280 8126 	bge.w	8002822 <_svfprintf_r+0x6e6>
 80025d6:	9b06      	ldr	r3, [sp, #24]
 80025d8:	3b02      	subs	r3, #2
 80025da:	9306      	str	r3, [sp, #24]
 80025dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80025de:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80025e2:	1e53      	subs	r3, r2, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bfa8      	it	ge
 80025e8:	222b      	movge	r2, #43	; 0x2b
 80025ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80025ec:	bfbc      	itt	lt
 80025ee:	f1c2 0301 	rsblt	r3, r2, #1
 80025f2:	222d      	movlt	r2, #45	; 0x2d
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 80025fa:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 80025fe:	f340 8100 	ble.w	8002802 <_svfprintf_r+0x6c6>
 8002602:	260a      	movs	r6, #10
 8002604:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8002608:	fb93 f0f6 	sdiv	r0, r3, r6
 800260c:	fb06 3310 	mls	r3, r6, r0, r3
 8002610:	2809      	cmp	r0, #9
 8002612:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002616:	f802 3c01 	strb.w	r3, [r2, #-1]
 800261a:	f102 31ff 	add.w	r1, r2, #4294967295
 800261e:	4603      	mov	r3, r0
 8002620:	f300 80e8 	bgt.w	80027f4 <_svfprintf_r+0x6b8>
 8002624:	3330      	adds	r3, #48	; 0x30
 8002626:	f801 3c01 	strb.w	r3, [r1, #-1]
 800262a:	3a02      	subs	r2, #2
 800262c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8002630:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8002634:	4282      	cmp	r2, r0
 8002636:	4619      	mov	r1, r3
 8002638:	f0c0 80de 	bcc.w	80027f8 <_svfprintf_r+0x6bc>
 800263c:	9a07      	ldr	r2, [sp, #28]
 800263e:	ab1d      	add	r3, sp, #116	; 0x74
 8002640:	1acb      	subs	r3, r1, r3
 8002642:	2a01      	cmp	r2, #1
 8002644:	9314      	str	r3, [sp, #80]	; 0x50
 8002646:	eb03 0b02 	add.w	fp, r3, r2
 800264a:	dc02      	bgt.n	8002652 <_svfprintf_r+0x516>
 800264c:	f015 0701 	ands.w	r7, r5, #1
 8002650:	d002      	beq.n	8002658 <_svfprintf_r+0x51c>
 8002652:	2700      	movs	r7, #0
 8002654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002656:	449b      	add	fp, r3
 8002658:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800265a:	b113      	cbz	r3, 8002662 <_svfprintf_r+0x526>
 800265c:	232d      	movs	r3, #45	; 0x2d
 800265e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002662:	2600      	movs	r6, #0
 8002664:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8002666:	455e      	cmp	r6, fp
 8002668:	4633      	mov	r3, r6
 800266a:	bfb8      	it	lt
 800266c:	465b      	movlt	r3, fp
 800266e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002670:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002674:	b113      	cbz	r3, 800267c <_svfprintf_r+0x540>
 8002676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002678:	3301      	adds	r3, #1
 800267a:	930f      	str	r3, [sp, #60]	; 0x3c
 800267c:	f015 0302 	ands.w	r3, r5, #2
 8002680:	9316      	str	r3, [sp, #88]	; 0x58
 8002682:	bf1e      	ittt	ne
 8002684:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 8002686:	3302      	addne	r3, #2
 8002688:	930f      	strne	r3, [sp, #60]	; 0x3c
 800268a:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800268e:	9317      	str	r3, [sp, #92]	; 0x5c
 8002690:	d118      	bne.n	80026c4 <_svfprintf_r+0x588>
 8002692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	9310      	str	r3, [sp, #64]	; 0x40
 800269c:	dd12      	ble.n	80026c4 <_svfprintf_r+0x588>
 800269e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	4bab      	ldr	r3, [pc, #684]	; (8002950 <_svfprintf_r+0x814>)
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	f300 81d9 	bgt.w	8002a5c <_svfprintf_r+0x920>
 80026aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80026ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80026ae:	6063      	str	r3, [r4, #4]
 80026b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80026b2:	4413      	add	r3, r2
 80026b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80026b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80026b8:	3301      	adds	r3, #1
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	9322      	str	r3, [sp, #136]	; 0x88
 80026be:	f300 81e6 	bgt.w	8002a8e <_svfprintf_r+0x952>
 80026c2:	3408      	adds	r4, #8
 80026c4:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80026c8:	b173      	cbz	r3, 80026e8 <_svfprintf_r+0x5ac>
 80026ca:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80026ce:	6023      	str	r3, [r4, #0]
 80026d0:	2301      	movs	r3, #1
 80026d2:	6063      	str	r3, [r4, #4]
 80026d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80026d6:	3301      	adds	r3, #1
 80026d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80026da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80026dc:	3301      	adds	r3, #1
 80026de:	2b07      	cmp	r3, #7
 80026e0:	9322      	str	r3, [sp, #136]	; 0x88
 80026e2:	f300 81de 	bgt.w	8002aa2 <_svfprintf_r+0x966>
 80026e6:	3408      	adds	r4, #8
 80026e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80026ea:	b16b      	cbz	r3, 8002708 <_svfprintf_r+0x5cc>
 80026ec:	ab1a      	add	r3, sp, #104	; 0x68
 80026ee:	6023      	str	r3, [r4, #0]
 80026f0:	2302      	movs	r3, #2
 80026f2:	6063      	str	r3, [r4, #4]
 80026f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80026f6:	3302      	adds	r3, #2
 80026f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80026fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80026fc:	3301      	adds	r3, #1
 80026fe:	2b07      	cmp	r3, #7
 8002700:	9322      	str	r3, [sp, #136]	; 0x88
 8002702:	f300 81d8 	bgt.w	8002ab6 <_svfprintf_r+0x97a>
 8002706:	3408      	adds	r4, #8
 8002708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d118      	bne.n	8002740 <_svfprintf_r+0x604>
 800270e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	9310      	str	r3, [sp, #64]	; 0x40
 8002718:	dd12      	ble.n	8002740 <_svfprintf_r+0x604>
 800271a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800271c:	2b10      	cmp	r3, #16
 800271e:	4b8d      	ldr	r3, [pc, #564]	; (8002954 <_svfprintf_r+0x818>)
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	f300 81d2 	bgt.w	8002aca <_svfprintf_r+0x98e>
 8002726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002728:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800272a:	6063      	str	r3, [r4, #4]
 800272c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800272e:	4413      	add	r3, r2
 8002730:	9323      	str	r3, [sp, #140]	; 0x8c
 8002732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002734:	3301      	adds	r3, #1
 8002736:	2b07      	cmp	r3, #7
 8002738:	9322      	str	r3, [sp, #136]	; 0x88
 800273a:	f300 81df 	bgt.w	8002afc <_svfprintf_r+0x9c0>
 800273e:	3408      	adds	r4, #8
 8002740:	eba6 060b 	sub.w	r6, r6, fp
 8002744:	2e00      	cmp	r6, #0
 8002746:	dd0f      	ble.n	8002768 <_svfprintf_r+0x62c>
 8002748:	4b82      	ldr	r3, [pc, #520]	; (8002954 <_svfprintf_r+0x818>)
 800274a:	2e10      	cmp	r6, #16
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	f300 81df 	bgt.w	8002b10 <_svfprintf_r+0x9d4>
 8002752:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002754:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8002756:	3301      	adds	r3, #1
 8002758:	6066      	str	r6, [r4, #4]
 800275a:	2b07      	cmp	r3, #7
 800275c:	4406      	add	r6, r0
 800275e:	9623      	str	r6, [sp, #140]	; 0x8c
 8002760:	9322      	str	r3, [sp, #136]	; 0x88
 8002762:	f300 81ec 	bgt.w	8002b3e <_svfprintf_r+0xa02>
 8002766:	3408      	adds	r4, #8
 8002768:	05eb      	lsls	r3, r5, #23
 800276a:	f100 81f2 	bmi.w	8002b52 <_svfprintf_r+0xa16>
 800276e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002770:	e884 0900 	stmia.w	r4, {r8, fp}
 8002774:	445b      	add	r3, fp
 8002776:	9323      	str	r3, [sp, #140]	; 0x8c
 8002778:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800277a:	3301      	adds	r3, #1
 800277c:	2b07      	cmp	r3, #7
 800277e:	9322      	str	r3, [sp, #136]	; 0x88
 8002780:	f340 8419 	ble.w	8002fb6 <_svfprintf_r+0xe7a>
 8002784:	aa21      	add	r2, sp, #132	; 0x84
 8002786:	4649      	mov	r1, r9
 8002788:	4650      	mov	r0, sl
 800278a:	f002 f833 	bl	80047f4 <__ssprint_r>
 800278e:	2800      	cmp	r0, #0
 8002790:	f040 8431 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002794:	ac2e      	add	r4, sp, #184	; 0xb8
 8002796:	076b      	lsls	r3, r5, #29
 8002798:	f100 8410 	bmi.w	8002fbc <_svfprintf_r+0xe80>
 800279c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800279e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80027a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80027a2:	428a      	cmp	r2, r1
 80027a4:	bfac      	ite	ge
 80027a6:	189b      	addge	r3, r3, r2
 80027a8:	185b      	addlt	r3, r3, r1
 80027aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80027ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80027ae:	b13b      	cbz	r3, 80027c0 <_svfprintf_r+0x684>
 80027b0:	aa21      	add	r2, sp, #132	; 0x84
 80027b2:	4649      	mov	r1, r9
 80027b4:	4650      	mov	r0, sl
 80027b6:	f002 f81d 	bl	80047f4 <__ssprint_r>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	f040 841b 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 80027c0:	2300      	movs	r3, #0
 80027c2:	9f08      	ldr	r7, [sp, #32]
 80027c4:	9322      	str	r3, [sp, #136]	; 0x88
 80027c6:	ac2e      	add	r4, sp, #184	; 0xb8
 80027c8:	e4f2      	b.n	80021b0 <_svfprintf_r+0x74>
 80027ca:	9b06      	ldr	r3, [sp, #24]
 80027cc:	2b65      	cmp	r3, #101	; 0x65
 80027ce:	f77f af05 	ble.w	80025dc <_svfprintf_r+0x4a0>
 80027d2:	9b06      	ldr	r3, [sp, #24]
 80027d4:	2b66      	cmp	r3, #102	; 0x66
 80027d6:	d124      	bne.n	8002822 <_svfprintf_r+0x6e6>
 80027d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	dd19      	ble.n	8002812 <_svfprintf_r+0x6d6>
 80027de:	f1bb 0f00 	cmp.w	fp, #0
 80027e2:	d101      	bne.n	80027e8 <_svfprintf_r+0x6ac>
 80027e4:	07ea      	lsls	r2, r5, #31
 80027e6:	d502      	bpl.n	80027ee <_svfprintf_r+0x6b2>
 80027e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027ea:	4413      	add	r3, r2
 80027ec:	445b      	add	r3, fp
 80027ee:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80027f0:	469b      	mov	fp, r3
 80027f2:	e731      	b.n	8002658 <_svfprintf_r+0x51c>
 80027f4:	460a      	mov	r2, r1
 80027f6:	e707      	b.n	8002608 <_svfprintf_r+0x4cc>
 80027f8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80027fc:	f803 1b01 	strb.w	r1, [r3], #1
 8002800:	e718      	b.n	8002634 <_svfprintf_r+0x4f8>
 8002802:	2230      	movs	r2, #48	; 0x30
 8002804:	4413      	add	r3, r2
 8002806:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800280a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800280e:	a91e      	add	r1, sp, #120	; 0x78
 8002810:	e714      	b.n	800263c <_svfprintf_r+0x500>
 8002812:	f1bb 0f00 	cmp.w	fp, #0
 8002816:	d101      	bne.n	800281c <_svfprintf_r+0x6e0>
 8002818:	07eb      	lsls	r3, r5, #31
 800281a:	d515      	bpl.n	8002848 <_svfprintf_r+0x70c>
 800281c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800281e:	3301      	adds	r3, #1
 8002820:	e7e4      	b.n	80027ec <_svfprintf_r+0x6b0>
 8002822:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002824:	9b07      	ldr	r3, [sp, #28]
 8002826:	429a      	cmp	r2, r3
 8002828:	db06      	blt.n	8002838 <_svfprintf_r+0x6fc>
 800282a:	07ef      	lsls	r7, r5, #31
 800282c:	d50e      	bpl.n	800284c <_svfprintf_r+0x710>
 800282e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002830:	4413      	add	r3, r2
 8002832:	2267      	movs	r2, #103	; 0x67
 8002834:	9206      	str	r2, [sp, #24]
 8002836:	e7da      	b.n	80027ee <_svfprintf_r+0x6b2>
 8002838:	9b07      	ldr	r3, [sp, #28]
 800283a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800283c:	2a00      	cmp	r2, #0
 800283e:	440b      	add	r3, r1
 8002840:	dcf7      	bgt.n	8002832 <_svfprintf_r+0x6f6>
 8002842:	f1c2 0201 	rsb	r2, r2, #1
 8002846:	e7f3      	b.n	8002830 <_svfprintf_r+0x6f4>
 8002848:	2301      	movs	r3, #1
 800284a:	e7d0      	b.n	80027ee <_svfprintf_r+0x6b2>
 800284c:	4613      	mov	r3, r2
 800284e:	e7f0      	b.n	8002832 <_svfprintf_r+0x6f6>
 8002850:	b10b      	cbz	r3, 8002856 <_svfprintf_r+0x71a>
 8002852:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002856:	f015 0f20 	tst.w	r5, #32
 800285a:	f107 0304 	add.w	r3, r7, #4
 800285e:	d008      	beq.n	8002872 <_svfprintf_r+0x736>
 8002860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	17ce      	asrs	r6, r1, #31
 8002866:	4608      	mov	r0, r1
 8002868:	4631      	mov	r1, r6
 800286a:	e9c2 0100 	strd	r0, r1, [r2]
 800286e:	461f      	mov	r7, r3
 8002870:	e49e      	b.n	80021b0 <_svfprintf_r+0x74>
 8002872:	06ee      	lsls	r6, r5, #27
 8002874:	d503      	bpl.n	800287e <_svfprintf_r+0x742>
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800287a:	6011      	str	r1, [r2, #0]
 800287c:	e7f7      	b.n	800286e <_svfprintf_r+0x732>
 800287e:	0668      	lsls	r0, r5, #25
 8002880:	d5f9      	bpl.n	8002876 <_svfprintf_r+0x73a>
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8002888:	8011      	strh	r1, [r2, #0]
 800288a:	e7f0      	b.n	800286e <_svfprintf_r+0x732>
 800288c:	f045 0510 	orr.w	r5, r5, #16
 8002890:	f015 0320 	ands.w	r3, r5, #32
 8002894:	d022      	beq.n	80028dc <_svfprintf_r+0x7a0>
 8002896:	3707      	adds	r7, #7
 8002898:	f027 0707 	bic.w	r7, r7, #7
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	9308      	str	r3, [sp, #32]
 80028a2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80028a6:	2300      	movs	r3, #0
 80028a8:	2200      	movs	r2, #0
 80028aa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80028ae:	f1bb 3fff 	cmp.w	fp, #4294967295
 80028b2:	f000 83db 	beq.w	800306c <_svfprintf_r+0xf30>
 80028b6:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80028ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80028bc:	ea56 0207 	orrs.w	r2, r6, r7
 80028c0:	f040 83d9 	bne.w	8003076 <_svfprintf_r+0xf3a>
 80028c4:	f1bb 0f00 	cmp.w	fp, #0
 80028c8:	f000 80aa 	beq.w	8002a20 <_svfprintf_r+0x8e4>
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d076      	beq.n	80029be <_svfprintf_r+0x882>
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	f000 8091 	beq.w	80029f8 <_svfprintf_r+0x8bc>
 80028d6:	2600      	movs	r6, #0
 80028d8:	2700      	movs	r7, #0
 80028da:	e3d2      	b.n	8003082 <_svfprintf_r+0xf46>
 80028dc:	1d3a      	adds	r2, r7, #4
 80028de:	f015 0110 	ands.w	r1, r5, #16
 80028e2:	9208      	str	r2, [sp, #32]
 80028e4:	d002      	beq.n	80028ec <_svfprintf_r+0x7b0>
 80028e6:	683e      	ldr	r6, [r7, #0]
 80028e8:	2700      	movs	r7, #0
 80028ea:	e7dd      	b.n	80028a8 <_svfprintf_r+0x76c>
 80028ec:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80028f0:	d0f9      	beq.n	80028e6 <_svfprintf_r+0x7aa>
 80028f2:	883e      	ldrh	r6, [r7, #0]
 80028f4:	2700      	movs	r7, #0
 80028f6:	e7d6      	b.n	80028a6 <_svfprintf_r+0x76a>
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	9308      	str	r3, [sp, #32]
 80028fc:	2330      	movs	r3, #48	; 0x30
 80028fe:	2278      	movs	r2, #120	; 0x78
 8002900:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <_svfprintf_r+0x81c>)
 8002906:	683e      	ldr	r6, [r7, #0]
 8002908:	9315      	str	r3, [sp, #84]	; 0x54
 800290a:	2700      	movs	r7, #0
 800290c:	f045 0502 	orr.w	r5, r5, #2
 8002910:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8002914:	2302      	movs	r3, #2
 8002916:	9206      	str	r2, [sp, #24]
 8002918:	e7c6      	b.n	80028a8 <_svfprintf_r+0x76c>
 800291a:	2600      	movs	r6, #0
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002922:	9308      	str	r3, [sp, #32]
 8002924:	f8d7 8000 	ldr.w	r8, [r7]
 8002928:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800292c:	d00a      	beq.n	8002944 <_svfprintf_r+0x808>
 800292e:	465a      	mov	r2, fp
 8002930:	4631      	mov	r1, r6
 8002932:	4640      	mov	r0, r8
 8002934:	f001 fc56 	bl	80041e4 <memchr>
 8002938:	2800      	cmp	r0, #0
 800293a:	f000 808d 	beq.w	8002a58 <_svfprintf_r+0x91c>
 800293e:	eba0 0b08 	sub.w	fp, r0, r8
 8002942:	e5c4      	b.n	80024ce <_svfprintf_r+0x392>
 8002944:	4640      	mov	r0, r8
 8002946:	f7fd fc03 	bl	8000150 <strlen>
 800294a:	4683      	mov	fp, r0
 800294c:	e5bf      	b.n	80024ce <_svfprintf_r+0x392>
 800294e:	bf00      	nop
 8002950:	08004fe4 	.word	0x08004fe4
 8002954:	08004ff4 	.word	0x08004ff4
 8002958:	08004fd1 	.word	0x08004fd1
 800295c:	f045 0510 	orr.w	r5, r5, #16
 8002960:	06a9      	lsls	r1, r5, #26
 8002962:	d509      	bpl.n	8002978 <_svfprintf_r+0x83c>
 8002964:	3707      	adds	r7, #7
 8002966:	f027 0707 	bic.w	r7, r7, #7
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	9308      	str	r3, [sp, #32]
 8002970:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002974:	2301      	movs	r3, #1
 8002976:	e797      	b.n	80028a8 <_svfprintf_r+0x76c>
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	f015 0f10 	tst.w	r5, #16
 800297e:	9308      	str	r3, [sp, #32]
 8002980:	d001      	beq.n	8002986 <_svfprintf_r+0x84a>
 8002982:	683e      	ldr	r6, [r7, #0]
 8002984:	e002      	b.n	800298c <_svfprintf_r+0x850>
 8002986:	066a      	lsls	r2, r5, #25
 8002988:	d5fb      	bpl.n	8002982 <_svfprintf_r+0x846>
 800298a:	883e      	ldrh	r6, [r7, #0]
 800298c:	2700      	movs	r7, #0
 800298e:	e7f1      	b.n	8002974 <_svfprintf_r+0x838>
 8002990:	b10b      	cbz	r3, 8002996 <_svfprintf_r+0x85a>
 8002992:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002996:	4ba3      	ldr	r3, [pc, #652]	; (8002c24 <_svfprintf_r+0xae8>)
 8002998:	e4c5      	b.n	8002326 <_svfprintf_r+0x1ea>
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	f015 0f10 	tst.w	r5, #16
 80029a0:	9308      	str	r3, [sp, #32]
 80029a2:	d001      	beq.n	80029a8 <_svfprintf_r+0x86c>
 80029a4:	683e      	ldr	r6, [r7, #0]
 80029a6:	e002      	b.n	80029ae <_svfprintf_r+0x872>
 80029a8:	066e      	lsls	r6, r5, #25
 80029aa:	d5fb      	bpl.n	80029a4 <_svfprintf_r+0x868>
 80029ac:	883e      	ldrh	r6, [r7, #0]
 80029ae:	2700      	movs	r7, #0
 80029b0:	e4c5      	b.n	800233e <_svfprintf_r+0x202>
 80029b2:	4643      	mov	r3, r8
 80029b4:	e366      	b.n	8003084 <_svfprintf_r+0xf48>
 80029b6:	2f00      	cmp	r7, #0
 80029b8:	bf08      	it	eq
 80029ba:	2e0a      	cmpeq	r6, #10
 80029bc:	d205      	bcs.n	80029ca <_svfprintf_r+0x88e>
 80029be:	3630      	adds	r6, #48	; 0x30
 80029c0:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 80029c4:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80029c8:	e377      	b.n	80030ba <_svfprintf_r+0xf7e>
 80029ca:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80029ce:	4630      	mov	r0, r6
 80029d0:	4639      	mov	r1, r7
 80029d2:	220a      	movs	r2, #10
 80029d4:	2300      	movs	r3, #0
 80029d6:	f7fe f853 	bl	8000a80 <__aeabi_uldivmod>
 80029da:	3230      	adds	r2, #48	; 0x30
 80029dc:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80029e0:	2300      	movs	r3, #0
 80029e2:	4630      	mov	r0, r6
 80029e4:	4639      	mov	r1, r7
 80029e6:	220a      	movs	r2, #10
 80029e8:	f7fe f84a 	bl	8000a80 <__aeabi_uldivmod>
 80029ec:	4606      	mov	r6, r0
 80029ee:	460f      	mov	r7, r1
 80029f0:	ea56 0307 	orrs.w	r3, r6, r7
 80029f4:	d1eb      	bne.n	80029ce <_svfprintf_r+0x892>
 80029f6:	e360      	b.n	80030ba <_svfprintf_r+0xf7e>
 80029f8:	2600      	movs	r6, #0
 80029fa:	2700      	movs	r7, #0
 80029fc:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8002a00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002a02:	f006 030f 	and.w	r3, r6, #15
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	093a      	lsrs	r2, r7, #4
 8002a0a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002a0e:	0933      	lsrs	r3, r6, #4
 8002a10:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002a14:	461e      	mov	r6, r3
 8002a16:	4617      	mov	r7, r2
 8002a18:	ea56 0307 	orrs.w	r3, r6, r7
 8002a1c:	d1f0      	bne.n	8002a00 <_svfprintf_r+0x8c4>
 8002a1e:	e34c      	b.n	80030ba <_svfprintf_r+0xf7e>
 8002a20:	b93b      	cbnz	r3, 8002a32 <_svfprintf_r+0x8f6>
 8002a22:	07ea      	lsls	r2, r5, #31
 8002a24:	d505      	bpl.n	8002a32 <_svfprintf_r+0x8f6>
 8002a26:	2330      	movs	r3, #48	; 0x30
 8002a28:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8002a2c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002a30:	e343      	b.n	80030ba <_svfprintf_r+0xf7e>
 8002a32:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8002a36:	e340      	b.n	80030ba <_svfprintf_r+0xf7e>
 8002a38:	b10b      	cbz	r3, 8002a3e <_svfprintf_r+0x902>
 8002a3a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002a3e:	9b06      	ldr	r3, [sp, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 82f7 	beq.w	8003034 <_svfprintf_r+0xef8>
 8002a46:	2600      	movs	r6, #0
 8002a48:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002a4c:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 8002a50:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002a54:	9708      	str	r7, [sp, #32]
 8002a56:	e4e3      	b.n	8002420 <_svfprintf_r+0x2e4>
 8002a58:	4606      	mov	r6, r0
 8002a5a:	e538      	b.n	80024ce <_svfprintf_r+0x392>
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	6063      	str	r3, [r4, #4]
 8002a60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a62:	3310      	adds	r3, #16
 8002a64:	9323      	str	r3, [sp, #140]	; 0x8c
 8002a66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a68:	3301      	adds	r3, #1
 8002a6a:	2b07      	cmp	r3, #7
 8002a6c:	9322      	str	r3, [sp, #136]	; 0x88
 8002a6e:	dc04      	bgt.n	8002a7a <_svfprintf_r+0x93e>
 8002a70:	3408      	adds	r4, #8
 8002a72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a74:	3b10      	subs	r3, #16
 8002a76:	9310      	str	r3, [sp, #64]	; 0x40
 8002a78:	e611      	b.n	800269e <_svfprintf_r+0x562>
 8002a7a:	aa21      	add	r2, sp, #132	; 0x84
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	4650      	mov	r0, sl
 8002a80:	f001 feb8 	bl	80047f4 <__ssprint_r>
 8002a84:	2800      	cmp	r0, #0
 8002a86:	f040 82b6 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002a8a:	ac2e      	add	r4, sp, #184	; 0xb8
 8002a8c:	e7f1      	b.n	8002a72 <_svfprintf_r+0x936>
 8002a8e:	aa21      	add	r2, sp, #132	; 0x84
 8002a90:	4649      	mov	r1, r9
 8002a92:	4650      	mov	r0, sl
 8002a94:	f001 feae 	bl	80047f4 <__ssprint_r>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	f040 82ac 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002a9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002aa0:	e610      	b.n	80026c4 <_svfprintf_r+0x588>
 8002aa2:	aa21      	add	r2, sp, #132	; 0x84
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	4650      	mov	r0, sl
 8002aa8:	f001 fea4 	bl	80047f4 <__ssprint_r>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	f040 82a2 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002ab2:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ab4:	e618      	b.n	80026e8 <_svfprintf_r+0x5ac>
 8002ab6:	aa21      	add	r2, sp, #132	; 0x84
 8002ab8:	4649      	mov	r1, r9
 8002aba:	4650      	mov	r0, sl
 8002abc:	f001 fe9a 	bl	80047f4 <__ssprint_r>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	f040 8298 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002ac6:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ac8:	e61e      	b.n	8002708 <_svfprintf_r+0x5cc>
 8002aca:	2310      	movs	r3, #16
 8002acc:	6063      	str	r3, [r4, #4]
 8002ace:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ad0:	3310      	adds	r3, #16
 8002ad2:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	2b07      	cmp	r3, #7
 8002ada:	9322      	str	r3, [sp, #136]	; 0x88
 8002adc:	dc04      	bgt.n	8002ae8 <_svfprintf_r+0x9ac>
 8002ade:	3408      	adds	r4, #8
 8002ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002ae2:	3b10      	subs	r3, #16
 8002ae4:	9310      	str	r3, [sp, #64]	; 0x40
 8002ae6:	e618      	b.n	800271a <_svfprintf_r+0x5de>
 8002ae8:	aa21      	add	r2, sp, #132	; 0x84
 8002aea:	4649      	mov	r1, r9
 8002aec:	4650      	mov	r0, sl
 8002aee:	f001 fe81 	bl	80047f4 <__ssprint_r>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	f040 827f 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002af8:	ac2e      	add	r4, sp, #184	; 0xb8
 8002afa:	e7f1      	b.n	8002ae0 <_svfprintf_r+0x9a4>
 8002afc:	aa21      	add	r2, sp, #132	; 0x84
 8002afe:	4649      	mov	r1, r9
 8002b00:	4650      	mov	r0, sl
 8002b02:	f001 fe77 	bl	80047f4 <__ssprint_r>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f040 8275 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002b0c:	ac2e      	add	r4, sp, #184	; 0xb8
 8002b0e:	e617      	b.n	8002740 <_svfprintf_r+0x604>
 8002b10:	2310      	movs	r3, #16
 8002b12:	6063      	str	r3, [r4, #4]
 8002b14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b16:	3310      	adds	r3, #16
 8002b18:	9323      	str	r3, [sp, #140]	; 0x8c
 8002b1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	2b07      	cmp	r3, #7
 8002b20:	9322      	str	r3, [sp, #136]	; 0x88
 8002b22:	dc02      	bgt.n	8002b2a <_svfprintf_r+0x9ee>
 8002b24:	3408      	adds	r4, #8
 8002b26:	3e10      	subs	r6, #16
 8002b28:	e60e      	b.n	8002748 <_svfprintf_r+0x60c>
 8002b2a:	aa21      	add	r2, sp, #132	; 0x84
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	4650      	mov	r0, sl
 8002b30:	f001 fe60 	bl	80047f4 <__ssprint_r>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	f040 825e 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002b3a:	ac2e      	add	r4, sp, #184	; 0xb8
 8002b3c:	e7f3      	b.n	8002b26 <_svfprintf_r+0x9ea>
 8002b3e:	aa21      	add	r2, sp, #132	; 0x84
 8002b40:	4649      	mov	r1, r9
 8002b42:	4650      	mov	r0, sl
 8002b44:	f001 fe56 	bl	80047f4 <__ssprint_r>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	f040 8254 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002b4e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002b50:	e60a      	b.n	8002768 <_svfprintf_r+0x62c>
 8002b52:	9b06      	ldr	r3, [sp, #24]
 8002b54:	2b65      	cmp	r3, #101	; 0x65
 8002b56:	f340 81a9 	ble.w	8002eac <_svfprintf_r+0xd70>
 8002b5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002b60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002b62:	f7fd ff1d 	bl	80009a0 <__aeabi_dcmpeq>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d062      	beq.n	8002c30 <_svfprintf_r+0xaf4>
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <_svfprintf_r+0xaec>)
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	6063      	str	r3, [r4, #4]
 8002b72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b74:	3301      	adds	r3, #1
 8002b76:	9323      	str	r3, [sp, #140]	; 0x8c
 8002b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	2b07      	cmp	r3, #7
 8002b7e:	9322      	str	r3, [sp, #136]	; 0x88
 8002b80:	dc25      	bgt.n	8002bce <_svfprintf_r+0xa92>
 8002b82:	3408      	adds	r4, #8
 8002b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002b86:	9a07      	ldr	r2, [sp, #28]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	db02      	blt.n	8002b92 <_svfprintf_r+0xa56>
 8002b8c:	07ee      	lsls	r6, r5, #31
 8002b8e:	f57f ae02 	bpl.w	8002796 <_svfprintf_r+0x65a>
 8002b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b9a:	6063      	str	r3, [r4, #4]
 8002b9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002b9e:	4413      	add	r3, r2
 8002ba0:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	2b07      	cmp	r3, #7
 8002ba8:	9322      	str	r3, [sp, #136]	; 0x88
 8002baa:	dc1a      	bgt.n	8002be2 <_svfprintf_r+0xaa6>
 8002bac:	3408      	adds	r4, #8
 8002bae:	9b07      	ldr	r3, [sp, #28]
 8002bb0:	1e5e      	subs	r6, r3, #1
 8002bb2:	2e00      	cmp	r6, #0
 8002bb4:	f77f adef 	ble.w	8002796 <_svfprintf_r+0x65a>
 8002bb8:	f04f 0810 	mov.w	r8, #16
 8002bbc:	4f1b      	ldr	r7, [pc, #108]	; (8002c2c <_svfprintf_r+0xaf0>)
 8002bbe:	2e10      	cmp	r6, #16
 8002bc0:	6027      	str	r7, [r4, #0]
 8002bc2:	dc18      	bgt.n	8002bf6 <_svfprintf_r+0xaba>
 8002bc4:	6066      	str	r6, [r4, #4]
 8002bc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002bc8:	441e      	add	r6, r3
 8002bca:	9623      	str	r6, [sp, #140]	; 0x8c
 8002bcc:	e5d4      	b.n	8002778 <_svfprintf_r+0x63c>
 8002bce:	aa21      	add	r2, sp, #132	; 0x84
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4650      	mov	r0, sl
 8002bd4:	f001 fe0e 	bl	80047f4 <__ssprint_r>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	f040 820c 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002bde:	ac2e      	add	r4, sp, #184	; 0xb8
 8002be0:	e7d0      	b.n	8002b84 <_svfprintf_r+0xa48>
 8002be2:	aa21      	add	r2, sp, #132	; 0x84
 8002be4:	4649      	mov	r1, r9
 8002be6:	4650      	mov	r0, sl
 8002be8:	f001 fe04 	bl	80047f4 <__ssprint_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	f040 8202 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002bf2:	ac2e      	add	r4, sp, #184	; 0xb8
 8002bf4:	e7db      	b.n	8002bae <_svfprintf_r+0xa72>
 8002bf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002bf8:	f8c4 8004 	str.w	r8, [r4, #4]
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c02:	3301      	adds	r3, #1
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	9322      	str	r3, [sp, #136]	; 0x88
 8002c08:	dc02      	bgt.n	8002c10 <_svfprintf_r+0xad4>
 8002c0a:	3408      	adds	r4, #8
 8002c0c:	3e10      	subs	r6, #16
 8002c0e:	e7d6      	b.n	8002bbe <_svfprintf_r+0xa82>
 8002c10:	aa21      	add	r2, sp, #132	; 0x84
 8002c12:	4649      	mov	r1, r9
 8002c14:	4650      	mov	r0, sl
 8002c16:	f001 fded 	bl	80047f4 <__ssprint_r>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	f040 81eb 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002c20:	ac2e      	add	r4, sp, #184	; 0xb8
 8002c22:	e7f3      	b.n	8002c0c <_svfprintf_r+0xad0>
 8002c24:	08004fd1 	.word	0x08004fd1
 8002c28:	08004fe2 	.word	0x08004fe2
 8002c2c:	08004ff4 	.word	0x08004ff4
 8002c30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	dc7a      	bgt.n	8002d2c <_svfprintf_r+0xbf0>
 8002c36:	4b9b      	ldr	r3, [pc, #620]	; (8002ea4 <_svfprintf_r+0xd68>)
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	6063      	str	r3, [r4, #4]
 8002c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c40:	3301      	adds	r3, #1
 8002c42:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c46:	3301      	adds	r3, #1
 8002c48:	2b07      	cmp	r3, #7
 8002c4a:	9322      	str	r3, [sp, #136]	; 0x88
 8002c4c:	dc44      	bgt.n	8002cd8 <_svfprintf_r+0xb9c>
 8002c4e:	3408      	adds	r4, #8
 8002c50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002c52:	b923      	cbnz	r3, 8002c5e <_svfprintf_r+0xb22>
 8002c54:	9b07      	ldr	r3, [sp, #28]
 8002c56:	b913      	cbnz	r3, 8002c5e <_svfprintf_r+0xb22>
 8002c58:	07e8      	lsls	r0, r5, #31
 8002c5a:	f57f ad9c 	bpl.w	8002796 <_svfprintf_r+0x65a>
 8002c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c66:	6063      	str	r3, [r4, #4]
 8002c68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c70:	3301      	adds	r3, #1
 8002c72:	2b07      	cmp	r3, #7
 8002c74:	9322      	str	r3, [sp, #136]	; 0x88
 8002c76:	dc39      	bgt.n	8002cec <_svfprintf_r+0xbb0>
 8002c78:	f104 0308 	add.w	r3, r4, #8
 8002c7c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8002c7e:	2e00      	cmp	r6, #0
 8002c80:	da19      	bge.n	8002cb6 <_svfprintf_r+0xb7a>
 8002c82:	2410      	movs	r4, #16
 8002c84:	4f88      	ldr	r7, [pc, #544]	; (8002ea8 <_svfprintf_r+0xd6c>)
 8002c86:	4276      	negs	r6, r6
 8002c88:	2e10      	cmp	r6, #16
 8002c8a:	601f      	str	r7, [r3, #0]
 8002c8c:	dc38      	bgt.n	8002d00 <_svfprintf_r+0xbc4>
 8002c8e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002c90:	605e      	str	r6, [r3, #4]
 8002c92:	4416      	add	r6, r2
 8002c94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002c96:	9623      	str	r6, [sp, #140]	; 0x8c
 8002c98:	3201      	adds	r2, #1
 8002c9a:	2a07      	cmp	r2, #7
 8002c9c:	f103 0308 	add.w	r3, r3, #8
 8002ca0:	9222      	str	r2, [sp, #136]	; 0x88
 8002ca2:	dd08      	ble.n	8002cb6 <_svfprintf_r+0xb7a>
 8002ca4:	aa21      	add	r2, sp, #132	; 0x84
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	4650      	mov	r0, sl
 8002caa:	f001 fda3 	bl	80047f4 <__ssprint_r>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	f040 81a1 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002cb4:	ab2e      	add	r3, sp, #184	; 0xb8
 8002cb6:	9a07      	ldr	r2, [sp, #28]
 8002cb8:	9907      	ldr	r1, [sp, #28]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002cbe:	f8c3 8000 	str.w	r8, [r3]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	9223      	str	r2, [sp, #140]	; 0x8c
 8002cc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002cc8:	3201      	adds	r2, #1
 8002cca:	2a07      	cmp	r2, #7
 8002ccc:	9222      	str	r2, [sp, #136]	; 0x88
 8002cce:	f73f ad59 	bgt.w	8002784 <_svfprintf_r+0x648>
 8002cd2:	f103 0408 	add.w	r4, r3, #8
 8002cd6:	e55e      	b.n	8002796 <_svfprintf_r+0x65a>
 8002cd8:	aa21      	add	r2, sp, #132	; 0x84
 8002cda:	4649      	mov	r1, r9
 8002cdc:	4650      	mov	r0, sl
 8002cde:	f001 fd89 	bl	80047f4 <__ssprint_r>
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	f040 8187 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002ce8:	ac2e      	add	r4, sp, #184	; 0xb8
 8002cea:	e7b1      	b.n	8002c50 <_svfprintf_r+0xb14>
 8002cec:	aa21      	add	r2, sp, #132	; 0x84
 8002cee:	4649      	mov	r1, r9
 8002cf0:	4650      	mov	r0, sl
 8002cf2:	f001 fd7f 	bl	80047f4 <__ssprint_r>
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	f040 817d 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002cfc:	ab2e      	add	r3, sp, #184	; 0xb8
 8002cfe:	e7bd      	b.n	8002c7c <_svfprintf_r+0xb40>
 8002d00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002d02:	605c      	str	r4, [r3, #4]
 8002d04:	3210      	adds	r2, #16
 8002d06:	9223      	str	r2, [sp, #140]	; 0x8c
 8002d08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002d0a:	3201      	adds	r2, #1
 8002d0c:	2a07      	cmp	r2, #7
 8002d0e:	9222      	str	r2, [sp, #136]	; 0x88
 8002d10:	dc02      	bgt.n	8002d18 <_svfprintf_r+0xbdc>
 8002d12:	3308      	adds	r3, #8
 8002d14:	3e10      	subs	r6, #16
 8002d16:	e7b7      	b.n	8002c88 <_svfprintf_r+0xb4c>
 8002d18:	aa21      	add	r2, sp, #132	; 0x84
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	4650      	mov	r0, sl
 8002d1e:	f001 fd69 	bl	80047f4 <__ssprint_r>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	f040 8167 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002d28:	ab2e      	add	r3, sp, #184	; 0xb8
 8002d2a:	e7f3      	b.n	8002d14 <_svfprintf_r+0xbd8>
 8002d2c:	9b07      	ldr	r3, [sp, #28]
 8002d2e:	42bb      	cmp	r3, r7
 8002d30:	bfa8      	it	ge
 8002d32:	463b      	movge	r3, r7
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	461e      	mov	r6, r3
 8002d38:	dd0b      	ble.n	8002d52 <_svfprintf_r+0xc16>
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d3e:	f8c4 8000 	str.w	r8, [r4]
 8002d42:	4433      	add	r3, r6
 8002d44:	9323      	str	r3, [sp, #140]	; 0x8c
 8002d46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d48:	3301      	adds	r3, #1
 8002d4a:	2b07      	cmp	r3, #7
 8002d4c:	9322      	str	r3, [sp, #136]	; 0x88
 8002d4e:	dc5f      	bgt.n	8002e10 <_svfprintf_r+0xcd4>
 8002d50:	3408      	adds	r4, #8
 8002d52:	2e00      	cmp	r6, #0
 8002d54:	bfb4      	ite	lt
 8002d56:	463e      	movlt	r6, r7
 8002d58:	1bbe      	subge	r6, r7, r6
 8002d5a:	2e00      	cmp	r6, #0
 8002d5c:	dd0f      	ble.n	8002d7e <_svfprintf_r+0xc42>
 8002d5e:	f8df b148 	ldr.w	fp, [pc, #328]	; 8002ea8 <_svfprintf_r+0xd6c>
 8002d62:	2e10      	cmp	r6, #16
 8002d64:	f8c4 b000 	str.w	fp, [r4]
 8002d68:	dc5c      	bgt.n	8002e24 <_svfprintf_r+0xce8>
 8002d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d6c:	6066      	str	r6, [r4, #4]
 8002d6e:	441e      	add	r6, r3
 8002d70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d72:	9623      	str	r6, [sp, #140]	; 0x8c
 8002d74:	3301      	adds	r3, #1
 8002d76:	2b07      	cmp	r3, #7
 8002d78:	9322      	str	r3, [sp, #136]	; 0x88
 8002d7a:	dc6a      	bgt.n	8002e52 <_svfprintf_r+0xd16>
 8002d7c:	3408      	adds	r4, #8
 8002d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002d80:	9a07      	ldr	r2, [sp, #28]
 8002d82:	4293      	cmp	r3, r2
 8002d84:	db01      	blt.n	8002d8a <_svfprintf_r+0xc4e>
 8002d86:	07e9      	lsls	r1, r5, #31
 8002d88:	d50d      	bpl.n	8002da6 <_svfprintf_r+0xc6a>
 8002d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d8e:	6023      	str	r3, [r4, #0]
 8002d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d92:	6063      	str	r3, [r4, #4]
 8002d94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d96:	4413      	add	r3, r2
 8002d98:	9323      	str	r3, [sp, #140]	; 0x8c
 8002d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	2b07      	cmp	r3, #7
 8002da0:	9322      	str	r3, [sp, #136]	; 0x88
 8002da2:	dc60      	bgt.n	8002e66 <_svfprintf_r+0xd2a>
 8002da4:	3408      	adds	r4, #8
 8002da6:	9b07      	ldr	r3, [sp, #28]
 8002da8:	9a07      	ldr	r2, [sp, #28]
 8002daa:	1bde      	subs	r6, r3, r7
 8002dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	429e      	cmp	r6, r3
 8002db2:	bfa8      	it	ge
 8002db4:	461e      	movge	r6, r3
 8002db6:	2e00      	cmp	r6, #0
 8002db8:	dd0b      	ble.n	8002dd2 <_svfprintf_r+0xc96>
 8002dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002dbc:	4447      	add	r7, r8
 8002dbe:	4433      	add	r3, r6
 8002dc0:	9323      	str	r3, [sp, #140]	; 0x8c
 8002dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002dc4:	6027      	str	r7, [r4, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	6066      	str	r6, [r4, #4]
 8002dcc:	9322      	str	r3, [sp, #136]	; 0x88
 8002dce:	dc54      	bgt.n	8002e7a <_svfprintf_r+0xd3e>
 8002dd0:	3408      	adds	r4, #8
 8002dd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002dd4:	9a07      	ldr	r2, [sp, #28]
 8002dd6:	2e00      	cmp	r6, #0
 8002dd8:	eba2 0303 	sub.w	r3, r2, r3
 8002ddc:	bfb4      	ite	lt
 8002dde:	461e      	movlt	r6, r3
 8002de0:	1b9e      	subge	r6, r3, r6
 8002de2:	2e00      	cmp	r6, #0
 8002de4:	f77f acd7 	ble.w	8002796 <_svfprintf_r+0x65a>
 8002de8:	f04f 0810 	mov.w	r8, #16
 8002dec:	4f2e      	ldr	r7, [pc, #184]	; (8002ea8 <_svfprintf_r+0xd6c>)
 8002dee:	2e10      	cmp	r6, #16
 8002df0:	6027      	str	r7, [r4, #0]
 8002df2:	f77f aee7 	ble.w	8002bc4 <_svfprintf_r+0xa88>
 8002df6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002df8:	f8c4 8004 	str.w	r8, [r4, #4]
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	9323      	str	r3, [sp, #140]	; 0x8c
 8002e00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e02:	3301      	adds	r3, #1
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	9322      	str	r3, [sp, #136]	; 0x88
 8002e08:	dc41      	bgt.n	8002e8e <_svfprintf_r+0xd52>
 8002e0a:	3408      	adds	r4, #8
 8002e0c:	3e10      	subs	r6, #16
 8002e0e:	e7ee      	b.n	8002dee <_svfprintf_r+0xcb2>
 8002e10:	aa21      	add	r2, sp, #132	; 0x84
 8002e12:	4649      	mov	r1, r9
 8002e14:	4650      	mov	r0, sl
 8002e16:	f001 fced 	bl	80047f4 <__ssprint_r>
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	f040 80eb 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002e20:	ac2e      	add	r4, sp, #184	; 0xb8
 8002e22:	e796      	b.n	8002d52 <_svfprintf_r+0xc16>
 8002e24:	2310      	movs	r3, #16
 8002e26:	6063      	str	r3, [r4, #4]
 8002e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002e2a:	3310      	adds	r3, #16
 8002e2c:	9323      	str	r3, [sp, #140]	; 0x8c
 8002e2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e30:	3301      	adds	r3, #1
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	9322      	str	r3, [sp, #136]	; 0x88
 8002e36:	dc02      	bgt.n	8002e3e <_svfprintf_r+0xd02>
 8002e38:	3408      	adds	r4, #8
 8002e3a:	3e10      	subs	r6, #16
 8002e3c:	e791      	b.n	8002d62 <_svfprintf_r+0xc26>
 8002e3e:	aa21      	add	r2, sp, #132	; 0x84
 8002e40:	4649      	mov	r1, r9
 8002e42:	4650      	mov	r0, sl
 8002e44:	f001 fcd6 	bl	80047f4 <__ssprint_r>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	f040 80d4 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002e4e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002e50:	e7f3      	b.n	8002e3a <_svfprintf_r+0xcfe>
 8002e52:	aa21      	add	r2, sp, #132	; 0x84
 8002e54:	4649      	mov	r1, r9
 8002e56:	4650      	mov	r0, sl
 8002e58:	f001 fccc 	bl	80047f4 <__ssprint_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	f040 80ca 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002e62:	ac2e      	add	r4, sp, #184	; 0xb8
 8002e64:	e78b      	b.n	8002d7e <_svfprintf_r+0xc42>
 8002e66:	aa21      	add	r2, sp, #132	; 0x84
 8002e68:	4649      	mov	r1, r9
 8002e6a:	4650      	mov	r0, sl
 8002e6c:	f001 fcc2 	bl	80047f4 <__ssprint_r>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f040 80c0 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002e76:	ac2e      	add	r4, sp, #184	; 0xb8
 8002e78:	e795      	b.n	8002da6 <_svfprintf_r+0xc6a>
 8002e7a:	aa21      	add	r2, sp, #132	; 0x84
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	4650      	mov	r0, sl
 8002e80:	f001 fcb8 	bl	80047f4 <__ssprint_r>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	f040 80b6 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002e8a:	ac2e      	add	r4, sp, #184	; 0xb8
 8002e8c:	e7a1      	b.n	8002dd2 <_svfprintf_r+0xc96>
 8002e8e:	aa21      	add	r2, sp, #132	; 0x84
 8002e90:	4649      	mov	r1, r9
 8002e92:	4650      	mov	r0, sl
 8002e94:	f001 fcae 	bl	80047f4 <__ssprint_r>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	f040 80ac 	bne.w	8002ff6 <_svfprintf_r+0xeba>
 8002e9e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ea0:	e7b4      	b.n	8002e0c <_svfprintf_r+0xcd0>
 8002ea2:	bf00      	nop
 8002ea4:	08004fe2 	.word	0x08004fe2
 8002ea8:	08004ff4 	.word	0x08004ff4
 8002eac:	9b07      	ldr	r3, [sp, #28]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	dc01      	bgt.n	8002eb6 <_svfprintf_r+0xd7a>
 8002eb2:	07ea      	lsls	r2, r5, #31
 8002eb4:	d576      	bpl.n	8002fa4 <_svfprintf_r+0xe68>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	6063      	str	r3, [r4, #4]
 8002eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ebc:	f8c4 8000 	str.w	r8, [r4]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	2b07      	cmp	r3, #7
 8002eca:	9322      	str	r3, [sp, #136]	; 0x88
 8002ecc:	dc36      	bgt.n	8002f3c <_svfprintf_r+0xe00>
 8002ece:	3408      	adds	r4, #8
 8002ed0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ed8:	6063      	str	r3, [r4, #4]
 8002eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002edc:	4413      	add	r3, r2
 8002ede:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	2b07      	cmp	r3, #7
 8002ee6:	9322      	str	r3, [sp, #136]	; 0x88
 8002ee8:	dc31      	bgt.n	8002f4e <_svfprintf_r+0xe12>
 8002eea:	3408      	adds	r4, #8
 8002eec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002ef0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ef2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ef4:	f7fd fd54 	bl	80009a0 <__aeabi_dcmpeq>
 8002ef8:	9b07      	ldr	r3, [sp, #28]
 8002efa:	1e5e      	subs	r6, r3, #1
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d12f      	bne.n	8002f60 <_svfprintf_r+0xe24>
 8002f00:	f108 0301 	add.w	r3, r8, #1
 8002f04:	e884 0048 	stmia.w	r4, {r3, r6}
 8002f08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f0a:	9a07      	ldr	r2, [sp, #28]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	9323      	str	r3, [sp, #140]	; 0x8c
 8002f12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f14:	3301      	adds	r3, #1
 8002f16:	2b07      	cmp	r3, #7
 8002f18:	9322      	str	r3, [sp, #136]	; 0x88
 8002f1a:	dd4a      	ble.n	8002fb2 <_svfprintf_r+0xe76>
 8002f1c:	aa21      	add	r2, sp, #132	; 0x84
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4650      	mov	r0, sl
 8002f22:	f001 fc67 	bl	80047f4 <__ssprint_r>
 8002f26:	2800      	cmp	r0, #0
 8002f28:	d165      	bne.n	8002ff6 <_svfprintf_r+0xeba>
 8002f2a:	ac2e      	add	r4, sp, #184	; 0xb8
 8002f2c:	ab1d      	add	r3, sp, #116	; 0x74
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002f32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002f34:	6063      	str	r3, [r4, #4]
 8002f36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f38:	4413      	add	r3, r2
 8002f3a:	e41c      	b.n	8002776 <_svfprintf_r+0x63a>
 8002f3c:	aa21      	add	r2, sp, #132	; 0x84
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4650      	mov	r0, sl
 8002f42:	f001 fc57 	bl	80047f4 <__ssprint_r>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d155      	bne.n	8002ff6 <_svfprintf_r+0xeba>
 8002f4a:	ac2e      	add	r4, sp, #184	; 0xb8
 8002f4c:	e7c0      	b.n	8002ed0 <_svfprintf_r+0xd94>
 8002f4e:	aa21      	add	r2, sp, #132	; 0x84
 8002f50:	4649      	mov	r1, r9
 8002f52:	4650      	mov	r0, sl
 8002f54:	f001 fc4e 	bl	80047f4 <__ssprint_r>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d14c      	bne.n	8002ff6 <_svfprintf_r+0xeba>
 8002f5c:	ac2e      	add	r4, sp, #184	; 0xb8
 8002f5e:	e7c5      	b.n	8002eec <_svfprintf_r+0xdb0>
 8002f60:	2e00      	cmp	r6, #0
 8002f62:	dde3      	ble.n	8002f2c <_svfprintf_r+0xdf0>
 8002f64:	f04f 0810 	mov.w	r8, #16
 8002f68:	4f58      	ldr	r7, [pc, #352]	; (80030cc <_svfprintf_r+0xf90>)
 8002f6a:	2e10      	cmp	r6, #16
 8002f6c:	6027      	str	r7, [r4, #0]
 8002f6e:	dc04      	bgt.n	8002f7a <_svfprintf_r+0xe3e>
 8002f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f72:	6066      	str	r6, [r4, #4]
 8002f74:	441e      	add	r6, r3
 8002f76:	9623      	str	r6, [sp, #140]	; 0x8c
 8002f78:	e7cb      	b.n	8002f12 <_svfprintf_r+0xdd6>
 8002f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002f7c:	f8c4 8004 	str.w	r8, [r4, #4]
 8002f80:	3310      	adds	r3, #16
 8002f82:	9323      	str	r3, [sp, #140]	; 0x8c
 8002f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f86:	3301      	adds	r3, #1
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	9322      	str	r3, [sp, #136]	; 0x88
 8002f8c:	dc02      	bgt.n	8002f94 <_svfprintf_r+0xe58>
 8002f8e:	3408      	adds	r4, #8
 8002f90:	3e10      	subs	r6, #16
 8002f92:	e7ea      	b.n	8002f6a <_svfprintf_r+0xe2e>
 8002f94:	aa21      	add	r2, sp, #132	; 0x84
 8002f96:	4649      	mov	r1, r9
 8002f98:	4650      	mov	r0, sl
 8002f9a:	f001 fc2b 	bl	80047f4 <__ssprint_r>
 8002f9e:	bb50      	cbnz	r0, 8002ff6 <_svfprintf_r+0xeba>
 8002fa0:	ac2e      	add	r4, sp, #184	; 0xb8
 8002fa2:	e7f5      	b.n	8002f90 <_svfprintf_r+0xe54>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	6063      	str	r3, [r4, #4]
 8002fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002faa:	f8c4 8000 	str.w	r8, [r4]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	e7ae      	b.n	8002f10 <_svfprintf_r+0xdd4>
 8002fb2:	3408      	adds	r4, #8
 8002fb4:	e7ba      	b.n	8002f2c <_svfprintf_r+0xdf0>
 8002fb6:	3408      	adds	r4, #8
 8002fb8:	f7ff bbed 	b.w	8002796 <_svfprintf_r+0x65a>
 8002fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002fc0:	1a9d      	subs	r5, r3, r2
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	f77f abea 	ble.w	800279c <_svfprintf_r+0x660>
 8002fc8:	2610      	movs	r6, #16
 8002fca:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <_svfprintf_r+0xf94>)
 8002fcc:	2d10      	cmp	r5, #16
 8002fce:	6023      	str	r3, [r4, #0]
 8002fd0:	dc1b      	bgt.n	800300a <_svfprintf_r+0xece>
 8002fd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fd4:	6065      	str	r5, [r4, #4]
 8002fd6:	441d      	add	r5, r3
 8002fd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fda:	9523      	str	r5, [sp, #140]	; 0x8c
 8002fdc:	3301      	adds	r3, #1
 8002fde:	2b07      	cmp	r3, #7
 8002fe0:	9322      	str	r3, [sp, #136]	; 0x88
 8002fe2:	f77f abdb 	ble.w	800279c <_svfprintf_r+0x660>
 8002fe6:	aa21      	add	r2, sp, #132	; 0x84
 8002fe8:	4649      	mov	r1, r9
 8002fea:	4650      	mov	r0, sl
 8002fec:	f001 fc02 	bl	80047f4 <__ssprint_r>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	f43f abd3 	beq.w	800279c <_svfprintf_r+0x660>
 8002ff6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002ffa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003000:	bf18      	it	ne
 8003002:	f04f 33ff 	movne.w	r3, #4294967295
 8003006:	f7ff b8bd 	b.w	8002184 <_svfprintf_r+0x48>
 800300a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800300c:	6066      	str	r6, [r4, #4]
 800300e:	3310      	adds	r3, #16
 8003010:	9323      	str	r3, [sp, #140]	; 0x8c
 8003012:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003014:	3301      	adds	r3, #1
 8003016:	2b07      	cmp	r3, #7
 8003018:	9322      	str	r3, [sp, #136]	; 0x88
 800301a:	dc02      	bgt.n	8003022 <_svfprintf_r+0xee6>
 800301c:	3408      	adds	r4, #8
 800301e:	3d10      	subs	r5, #16
 8003020:	e7d3      	b.n	8002fca <_svfprintf_r+0xe8e>
 8003022:	aa21      	add	r2, sp, #132	; 0x84
 8003024:	4649      	mov	r1, r9
 8003026:	4650      	mov	r0, sl
 8003028:	f001 fbe4 	bl	80047f4 <__ssprint_r>
 800302c:	2800      	cmp	r0, #0
 800302e:	d1e2      	bne.n	8002ff6 <_svfprintf_r+0xeba>
 8003030:	ac2e      	add	r4, sp, #184	; 0xb8
 8003032:	e7f4      	b.n	800301e <_svfprintf_r+0xee2>
 8003034:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0dd      	beq.n	8002ff6 <_svfprintf_r+0xeba>
 800303a:	aa21      	add	r2, sp, #132	; 0x84
 800303c:	4649      	mov	r1, r9
 800303e:	4650      	mov	r0, sl
 8003040:	f001 fbd8 	bl	80047f4 <__ssprint_r>
 8003044:	e7d7      	b.n	8002ff6 <_svfprintf_r+0xeba>
 8003046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800304a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800304c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800304e:	f7fd fcd9 	bl	8000a04 <__aeabi_dcmpun>
 8003052:	2800      	cmp	r0, #0
 8003054:	f43f aa3d 	beq.w	80024d2 <_svfprintf_r+0x396>
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <_svfprintf_r+0xf98>)
 800305a:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <_svfprintf_r+0xf9c>)
 800305c:	f7ff ba2d 	b.w	80024ba <_svfprintf_r+0x37e>
 8003060:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003062:	eba3 0308 	sub.w	r3, r3, r8
 8003066:	9307      	str	r3, [sp, #28]
 8003068:	f7ff baaf 	b.w	80025ca <_svfprintf_r+0x48e>
 800306c:	ea56 0207 	orrs.w	r2, r6, r7
 8003070:	950f      	str	r5, [sp, #60]	; 0x3c
 8003072:	f43f ac2b 	beq.w	80028cc <_svfprintf_r+0x790>
 8003076:	2b01      	cmp	r3, #1
 8003078:	f43f ac9d 	beq.w	80029b6 <_svfprintf_r+0x87a>
 800307c:	2b02      	cmp	r3, #2
 800307e:	f43f acbd 	beq.w	80029fc <_svfprintf_r+0x8c0>
 8003082:	ab2e      	add	r3, sp, #184	; 0xb8
 8003084:	08f1      	lsrs	r1, r6, #3
 8003086:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800308a:	08f8      	lsrs	r0, r7, #3
 800308c:	f006 0207 	and.w	r2, r6, #7
 8003090:	4607      	mov	r7, r0
 8003092:	460e      	mov	r6, r1
 8003094:	3230      	adds	r2, #48	; 0x30
 8003096:	ea56 0107 	orrs.w	r1, r6, r7
 800309a:	f103 38ff 	add.w	r8, r3, #4294967295
 800309e:	f803 2c01 	strb.w	r2, [r3, #-1]
 80030a2:	f47f ac86 	bne.w	80029b2 <_svfprintf_r+0x876>
 80030a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030a8:	07c9      	lsls	r1, r1, #31
 80030aa:	d506      	bpl.n	80030ba <_svfprintf_r+0xf7e>
 80030ac:	2a30      	cmp	r2, #48	; 0x30
 80030ae:	d004      	beq.n	80030ba <_svfprintf_r+0xf7e>
 80030b0:	2230      	movs	r2, #48	; 0x30
 80030b2:	f808 2c01 	strb.w	r2, [r8, #-1]
 80030b6:	f1a3 0802 	sub.w	r8, r3, #2
 80030ba:	ab2e      	add	r3, sp, #184	; 0xb8
 80030bc:	465e      	mov	r6, fp
 80030be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80030c0:	eba3 0b08 	sub.w	fp, r3, r8
 80030c4:	2700      	movs	r7, #0
 80030c6:	f7ff bace 	b.w	8002666 <_svfprintf_r+0x52a>
 80030ca:	bf00      	nop
 80030cc:	08004ff4 	.word	0x08004ff4
 80030d0:	08004fe4 	.word	0x08004fe4
 80030d4:	08004fb8 	.word	0x08004fb8
 80030d8:	08004fbc 	.word	0x08004fbc

080030dc <quorem>:
 80030dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e0:	6903      	ldr	r3, [r0, #16]
 80030e2:	690c      	ldr	r4, [r1, #16]
 80030e4:	4680      	mov	r8, r0
 80030e6:	429c      	cmp	r4, r3
 80030e8:	f300 8082 	bgt.w	80031f0 <quorem+0x114>
 80030ec:	3c01      	subs	r4, #1
 80030ee:	f101 0714 	add.w	r7, r1, #20
 80030f2:	f100 0614 	add.w	r6, r0, #20
 80030f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80030fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80030fe:	3501      	adds	r5, #1
 8003100:	fbb0 f5f5 	udiv	r5, r0, r5
 8003104:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003108:	eb06 030e 	add.w	r3, r6, lr
 800310c:	eb07 090e 	add.w	r9, r7, lr
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	b38d      	cbz	r5, 8003178 <quorem+0x9c>
 8003114:	f04f 0a00 	mov.w	sl, #0
 8003118:	4638      	mov	r0, r7
 800311a:	46b4      	mov	ip, r6
 800311c:	46d3      	mov	fp, sl
 800311e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003122:	b293      	uxth	r3, r2
 8003124:	fb05 a303 	mla	r3, r5, r3, sl
 8003128:	0c12      	lsrs	r2, r2, #16
 800312a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800312e:	fb05 a202 	mla	r2, r5, r2, sl
 8003132:	b29b      	uxth	r3, r3
 8003134:	ebab 0303 	sub.w	r3, fp, r3
 8003138:	f8bc b000 	ldrh.w	fp, [ip]
 800313c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003140:	445b      	add	r3, fp
 8003142:	fa1f fb82 	uxth.w	fp, r2
 8003146:	f8dc 2000 	ldr.w	r2, [ip]
 800314a:	4581      	cmp	r9, r0
 800314c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003154:	b29b      	uxth	r3, r3
 8003156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800315a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800315e:	f84c 3b04 	str.w	r3, [ip], #4
 8003162:	d2dc      	bcs.n	800311e <quorem+0x42>
 8003164:	f856 300e 	ldr.w	r3, [r6, lr]
 8003168:	b933      	cbnz	r3, 8003178 <quorem+0x9c>
 800316a:	9b01      	ldr	r3, [sp, #4]
 800316c:	3b04      	subs	r3, #4
 800316e:	429e      	cmp	r6, r3
 8003170:	461a      	mov	r2, r3
 8003172:	d331      	bcc.n	80031d8 <quorem+0xfc>
 8003174:	f8c8 4010 	str.w	r4, [r8, #16]
 8003178:	4640      	mov	r0, r8
 800317a:	f001 fa62 	bl	8004642 <__mcmp>
 800317e:	2800      	cmp	r0, #0
 8003180:	db26      	blt.n	80031d0 <quorem+0xf4>
 8003182:	4630      	mov	r0, r6
 8003184:	f04f 0e00 	mov.w	lr, #0
 8003188:	3501      	adds	r5, #1
 800318a:	f857 1b04 	ldr.w	r1, [r7], #4
 800318e:	f8d0 c000 	ldr.w	ip, [r0]
 8003192:	b28b      	uxth	r3, r1
 8003194:	ebae 0303 	sub.w	r3, lr, r3
 8003198:	fa1f f28c 	uxth.w	r2, ip
 800319c:	4413      	add	r3, r2
 800319e:	0c0a      	lsrs	r2, r1, #16
 80031a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80031a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ae:	45b9      	cmp	r9, r7
 80031b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80031b4:	f840 3b04 	str.w	r3, [r0], #4
 80031b8:	d2e7      	bcs.n	800318a <quorem+0xae>
 80031ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80031be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80031c2:	b92a      	cbnz	r2, 80031d0 <quorem+0xf4>
 80031c4:	3b04      	subs	r3, #4
 80031c6:	429e      	cmp	r6, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	d30b      	bcc.n	80031e4 <quorem+0x108>
 80031cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80031d0:	4628      	mov	r0, r5
 80031d2:	b003      	add	sp, #12
 80031d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	3b04      	subs	r3, #4
 80031dc:	2a00      	cmp	r2, #0
 80031de:	d1c9      	bne.n	8003174 <quorem+0x98>
 80031e0:	3c01      	subs	r4, #1
 80031e2:	e7c4      	b.n	800316e <quorem+0x92>
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	3b04      	subs	r3, #4
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d1ef      	bne.n	80031cc <quorem+0xf0>
 80031ec:	3c01      	subs	r4, #1
 80031ee:	e7ea      	b.n	80031c6 <quorem+0xea>
 80031f0:	2000      	movs	r0, #0
 80031f2:	e7ee      	b.n	80031d2 <quorem+0xf6>
 80031f4:	0000      	movs	r0, r0
	...

080031f8 <_dtoa_r>:
 80031f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80031fe:	b095      	sub	sp, #84	; 0x54
 8003200:	4604      	mov	r4, r0
 8003202:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003208:	b93e      	cbnz	r6, 800321a <_dtoa_r+0x22>
 800320a:	2010      	movs	r0, #16
 800320c:	f000 fdd6 	bl	8003dbc <malloc>
 8003210:	6260      	str	r0, [r4, #36]	; 0x24
 8003212:	6046      	str	r6, [r0, #4]
 8003214:	6086      	str	r6, [r0, #8]
 8003216:	6006      	str	r6, [r0, #0]
 8003218:	60c6      	str	r6, [r0, #12]
 800321a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800321c:	6819      	ldr	r1, [r3, #0]
 800321e:	b151      	cbz	r1, 8003236 <_dtoa_r+0x3e>
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	2301      	movs	r3, #1
 8003224:	4093      	lsls	r3, r2
 8003226:	604a      	str	r2, [r1, #4]
 8003228:	608b      	str	r3, [r1, #8]
 800322a:	4620      	mov	r0, r4
 800322c:	f001 f834 	bl	8004298 <_Bfree>
 8003230:	2200      	movs	r2, #0
 8003232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	9b03      	ldr	r3, [sp, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	bfb7      	itett	lt
 800323c:	2301      	movlt	r3, #1
 800323e:	2300      	movge	r3, #0
 8003240:	602b      	strlt	r3, [r5, #0]
 8003242:	9b03      	ldrlt	r3, [sp, #12]
 8003244:	bfae      	itee	ge
 8003246:	602b      	strge	r3, [r5, #0]
 8003248:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800324c:	9303      	strlt	r3, [sp, #12]
 800324e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003252:	4bab      	ldr	r3, [pc, #684]	; (8003500 <_dtoa_r+0x308>)
 8003254:	ea33 0309 	bics.w	r3, r3, r9
 8003258:	d11b      	bne.n	8003292 <_dtoa_r+0x9a>
 800325a:	f242 730f 	movw	r3, #9999	; 0x270f
 800325e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	9b02      	ldr	r3, [sp, #8]
 8003264:	b923      	cbnz	r3, 8003270 <_dtoa_r+0x78>
 8003266:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800326a:	2800      	cmp	r0, #0
 800326c:	f000 8583 	beq.w	8003d76 <_dtoa_r+0xb7e>
 8003270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003272:	b953      	cbnz	r3, 800328a <_dtoa_r+0x92>
 8003274:	4ba3      	ldr	r3, [pc, #652]	; (8003504 <_dtoa_r+0x30c>)
 8003276:	e021      	b.n	80032bc <_dtoa_r+0xc4>
 8003278:	4ba3      	ldr	r3, [pc, #652]	; (8003508 <_dtoa_r+0x310>)
 800327a:	9306      	str	r3, [sp, #24]
 800327c:	3308      	adds	r3, #8
 800327e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	9806      	ldr	r0, [sp, #24]
 8003284:	b015      	add	sp, #84	; 0x54
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	4b9e      	ldr	r3, [pc, #632]	; (8003504 <_dtoa_r+0x30c>)
 800328c:	9306      	str	r3, [sp, #24]
 800328e:	3303      	adds	r3, #3
 8003290:	e7f5      	b.n	800327e <_dtoa_r+0x86>
 8003292:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	2300      	movs	r3, #0
 800329a:	4630      	mov	r0, r6
 800329c:	4639      	mov	r1, r7
 800329e:	f7fd fb7f 	bl	80009a0 <__aeabi_dcmpeq>
 80032a2:	4680      	mov	r8, r0
 80032a4:	b160      	cbz	r0, 80032c0 <_dtoa_r+0xc8>
 80032a6:	2301      	movs	r3, #1
 80032a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 855e 	beq.w	8003d70 <_dtoa_r+0xb78>
 80032b4:	4b95      	ldr	r3, [pc, #596]	; (800350c <_dtoa_r+0x314>)
 80032b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	9306      	str	r3, [sp, #24]
 80032be:	e7e0      	b.n	8003282 <_dtoa_r+0x8a>
 80032c0:	ab12      	add	r3, sp, #72	; 0x48
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	ab13      	add	r3, sp, #76	; 0x4c
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	4632      	mov	r2, r6
 80032ca:	463b      	mov	r3, r7
 80032cc:	4620      	mov	r0, r4
 80032ce:	f001 fa31 	bl	8004734 <__d2b>
 80032d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80032d6:	4682      	mov	sl, r0
 80032d8:	2d00      	cmp	r5, #0
 80032da:	d07d      	beq.n	80033d8 <_dtoa_r+0x1e0>
 80032dc:	4630      	mov	r0, r6
 80032de:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80032e2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80032e6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80032ea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80032ee:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80032f2:	2200      	movs	r2, #0
 80032f4:	4b86      	ldr	r3, [pc, #536]	; (8003510 <_dtoa_r+0x318>)
 80032f6:	f7fc ff37 	bl	8000168 <__aeabi_dsub>
 80032fa:	a37b      	add	r3, pc, #492	; (adr r3, 80034e8 <_dtoa_r+0x2f0>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fd f8e6 	bl	80004d0 <__aeabi_dmul>
 8003304:	a37a      	add	r3, pc, #488	; (adr r3, 80034f0 <_dtoa_r+0x2f8>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fc ff2f 	bl	800016c <__adddf3>
 800330e:	4606      	mov	r6, r0
 8003310:	4628      	mov	r0, r5
 8003312:	460f      	mov	r7, r1
 8003314:	f7fd f876 	bl	8000404 <__aeabi_i2d>
 8003318:	a377      	add	r3, pc, #476	; (adr r3, 80034f8 <_dtoa_r+0x300>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f7fd f8d7 	bl	80004d0 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4630      	mov	r0, r6
 8003328:	4639      	mov	r1, r7
 800332a:	f7fc ff1f 	bl	800016c <__adddf3>
 800332e:	4606      	mov	r6, r0
 8003330:	460f      	mov	r7, r1
 8003332:	f7fd fb7d 	bl	8000a30 <__aeabi_d2iz>
 8003336:	2200      	movs	r2, #0
 8003338:	4683      	mov	fp, r0
 800333a:	2300      	movs	r3, #0
 800333c:	4630      	mov	r0, r6
 800333e:	4639      	mov	r1, r7
 8003340:	f7fd fb38 	bl	80009b4 <__aeabi_dcmplt>
 8003344:	b158      	cbz	r0, 800335e <_dtoa_r+0x166>
 8003346:	4658      	mov	r0, fp
 8003348:	f7fd f85c 	bl	8000404 <__aeabi_i2d>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4630      	mov	r0, r6
 8003352:	4639      	mov	r1, r7
 8003354:	f7fd fb24 	bl	80009a0 <__aeabi_dcmpeq>
 8003358:	b908      	cbnz	r0, 800335e <_dtoa_r+0x166>
 800335a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800335e:	f1bb 0f16 	cmp.w	fp, #22
 8003362:	d858      	bhi.n	8003416 <_dtoa_r+0x21e>
 8003364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003368:	496a      	ldr	r1, [pc, #424]	; (8003514 <_dtoa_r+0x31c>)
 800336a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800336e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003372:	f7fd fb3d 	bl	80009f0 <__aeabi_dcmpgt>
 8003376:	2800      	cmp	r0, #0
 8003378:	d04f      	beq.n	800341a <_dtoa_r+0x222>
 800337a:	2300      	movs	r3, #0
 800337c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003380:	930d      	str	r3, [sp, #52]	; 0x34
 8003382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003384:	1b5d      	subs	r5, r3, r5
 8003386:	1e6b      	subs	r3, r5, #1
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	bf43      	ittte	mi
 800338c:	2300      	movmi	r3, #0
 800338e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003392:	9307      	strmi	r3, [sp, #28]
 8003394:	f04f 0800 	movpl.w	r8, #0
 8003398:	f1bb 0f00 	cmp.w	fp, #0
 800339c:	db3f      	blt.n	800341e <_dtoa_r+0x226>
 800339e:	9b07      	ldr	r3, [sp, #28]
 80033a0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80033a4:	445b      	add	r3, fp
 80033a6:	9307      	str	r3, [sp, #28]
 80033a8:	2300      	movs	r3, #0
 80033aa:	9308      	str	r3, [sp, #32]
 80033ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	f200 80b4 	bhi.w	800351c <_dtoa_r+0x324>
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	bfc4      	itt	gt
 80033b8:	3b04      	subgt	r3, #4
 80033ba:	931e      	strgt	r3, [sp, #120]	; 0x78
 80033bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033be:	bfc8      	it	gt
 80033c0:	2600      	movgt	r6, #0
 80033c2:	f1a3 0302 	sub.w	r3, r3, #2
 80033c6:	bfd8      	it	le
 80033c8:	2601      	movle	r6, #1
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	f200 80b2 	bhi.w	8003534 <_dtoa_r+0x33c>
 80033d0:	e8df f003 	tbb	[pc, r3]
 80033d4:	782d8684 	.word	0x782d8684
 80033d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80033da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80033dc:	441d      	add	r5, r3
 80033de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	dd11      	ble.n	800340a <_dtoa_r+0x212>
 80033e6:	9a02      	ldr	r2, [sp, #8]
 80033e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80033ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80033f0:	fa22 f000 	lsr.w	r0, r2, r0
 80033f4:	fa09 f303 	lsl.w	r3, r9, r3
 80033f8:	4318      	orrs	r0, r3
 80033fa:	f7fc fff3 	bl	80003e4 <__aeabi_ui2d>
 80033fe:	2301      	movs	r3, #1
 8003400:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003404:	3d01      	subs	r5, #1
 8003406:	9310      	str	r3, [sp, #64]	; 0x40
 8003408:	e773      	b.n	80032f2 <_dtoa_r+0xfa>
 800340a:	f1c3 0020 	rsb	r0, r3, #32
 800340e:	9b02      	ldr	r3, [sp, #8]
 8003410:	fa03 f000 	lsl.w	r0, r3, r0
 8003414:	e7f1      	b.n	80033fa <_dtoa_r+0x202>
 8003416:	2301      	movs	r3, #1
 8003418:	e7b2      	b.n	8003380 <_dtoa_r+0x188>
 800341a:	900d      	str	r0, [sp, #52]	; 0x34
 800341c:	e7b1      	b.n	8003382 <_dtoa_r+0x18a>
 800341e:	f1cb 0300 	rsb	r3, fp, #0
 8003422:	9308      	str	r3, [sp, #32]
 8003424:	2300      	movs	r3, #0
 8003426:	eba8 080b 	sub.w	r8, r8, fp
 800342a:	930c      	str	r3, [sp, #48]	; 0x30
 800342c:	e7be      	b.n	80033ac <_dtoa_r+0x1b4>
 800342e:	2301      	movs	r3, #1
 8003430:	9309      	str	r3, [sp, #36]	; 0x24
 8003432:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003434:	2b00      	cmp	r3, #0
 8003436:	f340 8080 	ble.w	800353a <_dtoa_r+0x342>
 800343a:	4699      	mov	r9, r3
 800343c:	9304      	str	r3, [sp, #16]
 800343e:	2200      	movs	r2, #0
 8003440:	2104      	movs	r1, #4
 8003442:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003444:	606a      	str	r2, [r5, #4]
 8003446:	f101 0214 	add.w	r2, r1, #20
 800344a:	429a      	cmp	r2, r3
 800344c:	d97a      	bls.n	8003544 <_dtoa_r+0x34c>
 800344e:	6869      	ldr	r1, [r5, #4]
 8003450:	4620      	mov	r0, r4
 8003452:	f000 feed 	bl	8004230 <_Balloc>
 8003456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003458:	6028      	str	r0, [r5, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b9 0f0e 	cmp.w	r9, #14
 8003460:	9306      	str	r3, [sp, #24]
 8003462:	f200 80f0 	bhi.w	8003646 <_dtoa_r+0x44e>
 8003466:	2e00      	cmp	r6, #0
 8003468:	f000 80ed 	beq.w	8003646 <_dtoa_r+0x44e>
 800346c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003470:	f1bb 0f00 	cmp.w	fp, #0
 8003474:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003478:	dd79      	ble.n	800356e <_dtoa_r+0x376>
 800347a:	4a26      	ldr	r2, [pc, #152]	; (8003514 <_dtoa_r+0x31c>)
 800347c:	f00b 030f 	and.w	r3, fp, #15
 8003480:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003488:	06f0      	lsls	r0, r6, #27
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003492:	d55c      	bpl.n	800354e <_dtoa_r+0x356>
 8003494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <_dtoa_r+0x320>)
 800349a:	2503      	movs	r5, #3
 800349c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034a0:	f7fd f940 	bl	8000724 <__aeabi_ddiv>
 80034a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034a8:	f006 060f 	and.w	r6, r6, #15
 80034ac:	4f1a      	ldr	r7, [pc, #104]	; (8003518 <_dtoa_r+0x320>)
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	d14f      	bne.n	8003552 <_dtoa_r+0x35a>
 80034b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80034b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034ba:	f7fd f933 	bl	8000724 <__aeabi_ddiv>
 80034be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034c2:	e06e      	b.n	80035a2 <_dtoa_r+0x3aa>
 80034c4:	2301      	movs	r3, #1
 80034c6:	9309      	str	r3, [sp, #36]	; 0x24
 80034c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80034ca:	445b      	add	r3, fp
 80034cc:	f103 0901 	add.w	r9, r3, #1
 80034d0:	9304      	str	r3, [sp, #16]
 80034d2:	464b      	mov	r3, r9
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	bfb8      	it	lt
 80034d8:	2301      	movlt	r3, #1
 80034da:	e7b0      	b.n	800343e <_dtoa_r+0x246>
 80034dc:	2300      	movs	r3, #0
 80034de:	e7a7      	b.n	8003430 <_dtoa_r+0x238>
 80034e0:	2300      	movs	r3, #0
 80034e2:	e7f0      	b.n	80034c6 <_dtoa_r+0x2ce>
 80034e4:	f3af 8000 	nop.w
 80034e8:	636f4361 	.word	0x636f4361
 80034ec:	3fd287a7 	.word	0x3fd287a7
 80034f0:	8b60c8b3 	.word	0x8b60c8b3
 80034f4:	3fc68a28 	.word	0x3fc68a28
 80034f8:	509f79fb 	.word	0x509f79fb
 80034fc:	3fd34413 	.word	0x3fd34413
 8003500:	7ff00000 	.word	0x7ff00000
 8003504:	0800500d 	.word	0x0800500d
 8003508:	08005004 	.word	0x08005004
 800350c:	08004fe3 	.word	0x08004fe3
 8003510:	3ff80000 	.word	0x3ff80000
 8003514:	08005040 	.word	0x08005040
 8003518:	08005018 	.word	0x08005018
 800351c:	2601      	movs	r6, #1
 800351e:	2300      	movs	r3, #0
 8003520:	9609      	str	r6, [sp, #36]	; 0x24
 8003522:	931e      	str	r3, [sp, #120]	; 0x78
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	2200      	movs	r2, #0
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	4699      	mov	r9, r3
 800352e:	2312      	movs	r3, #18
 8003530:	921f      	str	r2, [sp, #124]	; 0x7c
 8003532:	e784      	b.n	800343e <_dtoa_r+0x246>
 8003534:	2301      	movs	r3, #1
 8003536:	9309      	str	r3, [sp, #36]	; 0x24
 8003538:	e7f4      	b.n	8003524 <_dtoa_r+0x32c>
 800353a:	2301      	movs	r3, #1
 800353c:	9304      	str	r3, [sp, #16]
 800353e:	4699      	mov	r9, r3
 8003540:	461a      	mov	r2, r3
 8003542:	e7f5      	b.n	8003530 <_dtoa_r+0x338>
 8003544:	686a      	ldr	r2, [r5, #4]
 8003546:	0049      	lsls	r1, r1, #1
 8003548:	3201      	adds	r2, #1
 800354a:	606a      	str	r2, [r5, #4]
 800354c:	e77b      	b.n	8003446 <_dtoa_r+0x24e>
 800354e:	2502      	movs	r5, #2
 8003550:	e7ac      	b.n	80034ac <_dtoa_r+0x2b4>
 8003552:	07f1      	lsls	r1, r6, #31
 8003554:	d508      	bpl.n	8003568 <_dtoa_r+0x370>
 8003556:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800355a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800355e:	f7fc ffb7 	bl	80004d0 <__aeabi_dmul>
 8003562:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003566:	3501      	adds	r5, #1
 8003568:	1076      	asrs	r6, r6, #1
 800356a:	3708      	adds	r7, #8
 800356c:	e79f      	b.n	80034ae <_dtoa_r+0x2b6>
 800356e:	f000 80a5 	beq.w	80036bc <_dtoa_r+0x4c4>
 8003572:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003576:	f1cb 0600 	rsb	r6, fp, #0
 800357a:	4ba2      	ldr	r3, [pc, #648]	; (8003804 <_dtoa_r+0x60c>)
 800357c:	f006 020f 	and.w	r2, r6, #15
 8003580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f7fc ffa2 	bl	80004d0 <__aeabi_dmul>
 800358c:	2502      	movs	r5, #2
 800358e:	2300      	movs	r3, #0
 8003590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003594:	4f9c      	ldr	r7, [pc, #624]	; (8003808 <_dtoa_r+0x610>)
 8003596:	1136      	asrs	r6, r6, #4
 8003598:	2e00      	cmp	r6, #0
 800359a:	f040 8084 	bne.w	80036a6 <_dtoa_r+0x4ae>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d18d      	bne.n	80034be <_dtoa_r+0x2c6>
 80035a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 808b 	beq.w	80036c0 <_dtoa_r+0x4c8>
 80035aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80035b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80035b6:	2200      	movs	r2, #0
 80035b8:	4b94      	ldr	r3, [pc, #592]	; (800380c <_dtoa_r+0x614>)
 80035ba:	f7fd f9fb 	bl	80009b4 <__aeabi_dcmplt>
 80035be:	2800      	cmp	r0, #0
 80035c0:	d07e      	beq.n	80036c0 <_dtoa_r+0x4c8>
 80035c2:	f1b9 0f00 	cmp.w	r9, #0
 80035c6:	d07b      	beq.n	80036c0 <_dtoa_r+0x4c8>
 80035c8:	9b04      	ldr	r3, [sp, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	dd37      	ble.n	800363e <_dtoa_r+0x446>
 80035ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80035d2:	2200      	movs	r2, #0
 80035d4:	4b8e      	ldr	r3, [pc, #568]	; (8003810 <_dtoa_r+0x618>)
 80035d6:	f7fc ff7b 	bl	80004d0 <__aeabi_dmul>
 80035da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035de:	9e04      	ldr	r6, [sp, #16]
 80035e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80035e4:	3501      	adds	r5, #1
 80035e6:	4628      	mov	r0, r5
 80035e8:	f7fc ff0c 	bl	8000404 <__aeabi_i2d>
 80035ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035f0:	f7fc ff6e 	bl	80004d0 <__aeabi_dmul>
 80035f4:	4b87      	ldr	r3, [pc, #540]	; (8003814 <_dtoa_r+0x61c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	f7fc fdb8 	bl	800016c <__adddf3>
 80035fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003602:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003606:	950b      	str	r5, [sp, #44]	; 0x2c
 8003608:	2e00      	cmp	r6, #0
 800360a:	d15c      	bne.n	80036c6 <_dtoa_r+0x4ce>
 800360c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003610:	2200      	movs	r2, #0
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <_dtoa_r+0x620>)
 8003614:	f7fc fda8 	bl	8000168 <__aeabi_dsub>
 8003618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800361a:	462b      	mov	r3, r5
 800361c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003620:	f7fd f9e6 	bl	80009f0 <__aeabi_dcmpgt>
 8003624:	2800      	cmp	r0, #0
 8003626:	f040 82f7 	bne.w	8003c18 <_dtoa_r+0xa20>
 800362a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800362e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003630:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003634:	f7fd f9be 	bl	80009b4 <__aeabi_dcmplt>
 8003638:	2800      	cmp	r0, #0
 800363a:	f040 82eb 	bne.w	8003c14 <_dtoa_r+0xa1c>
 800363e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003642:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003648:	2b00      	cmp	r3, #0
 800364a:	f2c0 8150 	blt.w	80038ee <_dtoa_r+0x6f6>
 800364e:	f1bb 0f0e 	cmp.w	fp, #14
 8003652:	f300 814c 	bgt.w	80038ee <_dtoa_r+0x6f6>
 8003656:	4b6b      	ldr	r3, [pc, #428]	; (8003804 <_dtoa_r+0x60c>)
 8003658:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003664:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003666:	2b00      	cmp	r3, #0
 8003668:	f280 80da 	bge.w	8003820 <_dtoa_r+0x628>
 800366c:	f1b9 0f00 	cmp.w	r9, #0
 8003670:	f300 80d6 	bgt.w	8003820 <_dtoa_r+0x628>
 8003674:	f040 82cd 	bne.w	8003c12 <_dtoa_r+0xa1a>
 8003678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800367c:	2200      	movs	r2, #0
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <_dtoa_r+0x620>)
 8003680:	f7fc ff26 	bl	80004d0 <__aeabi_dmul>
 8003684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003688:	f7fd f9a8 	bl	80009dc <__aeabi_dcmpge>
 800368c:	464e      	mov	r6, r9
 800368e:	464f      	mov	r7, r9
 8003690:	2800      	cmp	r0, #0
 8003692:	f040 82a4 	bne.w	8003bde <_dtoa_r+0x9e6>
 8003696:	9b06      	ldr	r3, [sp, #24]
 8003698:	9a06      	ldr	r2, [sp, #24]
 800369a:	1c5d      	adds	r5, r3, #1
 800369c:	2331      	movs	r3, #49	; 0x31
 800369e:	f10b 0b01 	add.w	fp, fp, #1
 80036a2:	7013      	strb	r3, [r2, #0]
 80036a4:	e29f      	b.n	8003be6 <_dtoa_r+0x9ee>
 80036a6:	07f2      	lsls	r2, r6, #31
 80036a8:	d505      	bpl.n	80036b6 <_dtoa_r+0x4be>
 80036aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ae:	f7fc ff0f 	bl	80004d0 <__aeabi_dmul>
 80036b2:	2301      	movs	r3, #1
 80036b4:	3501      	adds	r5, #1
 80036b6:	1076      	asrs	r6, r6, #1
 80036b8:	3708      	adds	r7, #8
 80036ba:	e76d      	b.n	8003598 <_dtoa_r+0x3a0>
 80036bc:	2502      	movs	r5, #2
 80036be:	e770      	b.n	80035a2 <_dtoa_r+0x3aa>
 80036c0:	465f      	mov	r7, fp
 80036c2:	464e      	mov	r6, r9
 80036c4:	e78f      	b.n	80035e6 <_dtoa_r+0x3ee>
 80036c6:	9a06      	ldr	r2, [sp, #24]
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <_dtoa_r+0x60c>)
 80036ca:	4432      	add	r2, r6
 80036cc:	9211      	str	r2, [sp, #68]	; 0x44
 80036ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d0:	1e71      	subs	r1, r6, #1
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	d048      	beq.n	8003768 <_dtoa_r+0x570>
 80036d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	2000      	movs	r0, #0
 80036e0:	494e      	ldr	r1, [pc, #312]	; (800381c <_dtoa_r+0x624>)
 80036e2:	f7fd f81f 	bl	8000724 <__aeabi_ddiv>
 80036e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80036ea:	f7fc fd3d 	bl	8000168 <__aeabi_dsub>
 80036ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80036f2:	9d06      	ldr	r5, [sp, #24]
 80036f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036f8:	f7fd f99a 	bl	8000a30 <__aeabi_d2iz>
 80036fc:	4606      	mov	r6, r0
 80036fe:	f7fc fe81 	bl	8000404 <__aeabi_i2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800370a:	f7fc fd2d 	bl	8000168 <__aeabi_dsub>
 800370e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003712:	3630      	adds	r6, #48	; 0x30
 8003714:	f805 6b01 	strb.w	r6, [r5], #1
 8003718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800371c:	f7fd f94a 	bl	80009b4 <__aeabi_dcmplt>
 8003720:	2800      	cmp	r0, #0
 8003722:	d164      	bne.n	80037ee <_dtoa_r+0x5f6>
 8003724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003728:	2000      	movs	r0, #0
 800372a:	4938      	ldr	r1, [pc, #224]	; (800380c <_dtoa_r+0x614>)
 800372c:	f7fc fd1c 	bl	8000168 <__aeabi_dsub>
 8003730:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003734:	f7fd f93e 	bl	80009b4 <__aeabi_dcmplt>
 8003738:	2800      	cmp	r0, #0
 800373a:	f040 80b9 	bne.w	80038b0 <_dtoa_r+0x6b8>
 800373e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003740:	429d      	cmp	r5, r3
 8003742:	f43f af7c 	beq.w	800363e <_dtoa_r+0x446>
 8003746:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800374a:	2200      	movs	r2, #0
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <_dtoa_r+0x618>)
 800374e:	f7fc febf 	bl	80004d0 <__aeabi_dmul>
 8003752:	2200      	movs	r2, #0
 8003754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <_dtoa_r+0x618>)
 800375e:	f7fc feb7 	bl	80004d0 <__aeabi_dmul>
 8003762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003766:	e7c5      	b.n	80036f4 <_dtoa_r+0x4fc>
 8003768:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800376c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003770:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003774:	f7fc feac 	bl	80004d0 <__aeabi_dmul>
 8003778:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800377c:	9d06      	ldr	r5, [sp, #24]
 800377e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003782:	f7fd f955 	bl	8000a30 <__aeabi_d2iz>
 8003786:	4606      	mov	r6, r0
 8003788:	f7fc fe3c 	bl	8000404 <__aeabi_i2d>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003794:	f7fc fce8 	bl	8000168 <__aeabi_dsub>
 8003798:	3630      	adds	r6, #48	; 0x30
 800379a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800379c:	f805 6b01 	strb.w	r6, [r5], #1
 80037a0:	42ab      	cmp	r3, r5
 80037a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	d124      	bne.n	80037f6 <_dtoa_r+0x5fe>
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <_dtoa_r+0x624>)
 80037ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037b2:	f7fc fcdb 	bl	800016c <__adddf3>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037be:	f7fd f917 	bl	80009f0 <__aeabi_dcmpgt>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d174      	bne.n	80038b0 <_dtoa_r+0x6b8>
 80037c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80037ca:	2000      	movs	r0, #0
 80037cc:	4913      	ldr	r1, [pc, #76]	; (800381c <_dtoa_r+0x624>)
 80037ce:	f7fc fccb 	bl	8000168 <__aeabi_dsub>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037da:	f7fd f8eb 	bl	80009b4 <__aeabi_dcmplt>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f43f af2d 	beq.w	800363e <_dtoa_r+0x446>
 80037e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80037e8:	1e6a      	subs	r2, r5, #1
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d001      	beq.n	80037f2 <_dtoa_r+0x5fa>
 80037ee:	46bb      	mov	fp, r7
 80037f0:	e04d      	b.n	800388e <_dtoa_r+0x696>
 80037f2:	4615      	mov	r5, r2
 80037f4:	e7f6      	b.n	80037e4 <_dtoa_r+0x5ec>
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <_dtoa_r+0x618>)
 80037f8:	f7fc fe6a 	bl	80004d0 <__aeabi_dmul>
 80037fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003800:	e7bd      	b.n	800377e <_dtoa_r+0x586>
 8003802:	bf00      	nop
 8003804:	08005040 	.word	0x08005040
 8003808:	08005018 	.word	0x08005018
 800380c:	3ff00000 	.word	0x3ff00000
 8003810:	40240000 	.word	0x40240000
 8003814:	401c0000 	.word	0x401c0000
 8003818:	40140000 	.word	0x40140000
 800381c:	3fe00000 	.word	0x3fe00000
 8003820:	9d06      	ldr	r5, [sp, #24]
 8003822:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003826:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800382a:	4630      	mov	r0, r6
 800382c:	4639      	mov	r1, r7
 800382e:	f7fc ff79 	bl	8000724 <__aeabi_ddiv>
 8003832:	f7fd f8fd 	bl	8000a30 <__aeabi_d2iz>
 8003836:	4680      	mov	r8, r0
 8003838:	f7fc fde4 	bl	8000404 <__aeabi_i2d>
 800383c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003840:	f7fc fe46 	bl	80004d0 <__aeabi_dmul>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4630      	mov	r0, r6
 800384a:	4639      	mov	r1, r7
 800384c:	f7fc fc8c 	bl	8000168 <__aeabi_dsub>
 8003850:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003854:	f805 6b01 	strb.w	r6, [r5], #1
 8003858:	9e06      	ldr	r6, [sp, #24]
 800385a:	4602      	mov	r2, r0
 800385c:	1bae      	subs	r6, r5, r6
 800385e:	45b1      	cmp	r9, r6
 8003860:	460b      	mov	r3, r1
 8003862:	d137      	bne.n	80038d4 <_dtoa_r+0x6dc>
 8003864:	f7fc fc82 	bl	800016c <__adddf3>
 8003868:	4606      	mov	r6, r0
 800386a:	460f      	mov	r7, r1
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003874:	f7fd f89e 	bl	80009b4 <__aeabi_dcmplt>
 8003878:	b9c8      	cbnz	r0, 80038ae <_dtoa_r+0x6b6>
 800387a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800387e:	4632      	mov	r2, r6
 8003880:	463b      	mov	r3, r7
 8003882:	f7fd f88d 	bl	80009a0 <__aeabi_dcmpeq>
 8003886:	b110      	cbz	r0, 800388e <_dtoa_r+0x696>
 8003888:	f018 0f01 	tst.w	r8, #1
 800388c:	d10f      	bne.n	80038ae <_dtoa_r+0x6b6>
 800388e:	4651      	mov	r1, sl
 8003890:	4620      	mov	r0, r4
 8003892:	f000 fd01 	bl	8004298 <_Bfree>
 8003896:	2300      	movs	r3, #0
 8003898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800389a:	702b      	strb	r3, [r5, #0]
 800389c:	f10b 0301 	add.w	r3, fp, #1
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f43f acec 	beq.w	8003282 <_dtoa_r+0x8a>
 80038aa:	601d      	str	r5, [r3, #0]
 80038ac:	e4e9      	b.n	8003282 <_dtoa_r+0x8a>
 80038ae:	465f      	mov	r7, fp
 80038b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80038b4:	1e6b      	subs	r3, r5, #1
 80038b6:	2a39      	cmp	r2, #57	; 0x39
 80038b8:	d106      	bne.n	80038c8 <_dtoa_r+0x6d0>
 80038ba:	9a06      	ldr	r2, [sp, #24]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <_dtoa_r+0x6d8>
 80038c0:	2330      	movs	r3, #48	; 0x30
 80038c2:	7013      	strb	r3, [r2, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	3701      	adds	r7, #1
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	3201      	adds	r2, #1
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e78e      	b.n	80037ee <_dtoa_r+0x5f6>
 80038d0:	461d      	mov	r5, r3
 80038d2:	e7ed      	b.n	80038b0 <_dtoa_r+0x6b8>
 80038d4:	2200      	movs	r2, #0
 80038d6:	4bb5      	ldr	r3, [pc, #724]	; (8003bac <_dtoa_r+0x9b4>)
 80038d8:	f7fc fdfa 	bl	80004d0 <__aeabi_dmul>
 80038dc:	2200      	movs	r2, #0
 80038de:	2300      	movs	r3, #0
 80038e0:	4606      	mov	r6, r0
 80038e2:	460f      	mov	r7, r1
 80038e4:	f7fd f85c 	bl	80009a0 <__aeabi_dcmpeq>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d09c      	beq.n	8003826 <_dtoa_r+0x62e>
 80038ec:	e7cf      	b.n	800388e <_dtoa_r+0x696>
 80038ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	f000 8129 	beq.w	8003b48 <_dtoa_r+0x950>
 80038f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80038f8:	2a01      	cmp	r2, #1
 80038fa:	f300 810e 	bgt.w	8003b1a <_dtoa_r+0x922>
 80038fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003900:	2a00      	cmp	r2, #0
 8003902:	f000 8106 	beq.w	8003b12 <_dtoa_r+0x91a>
 8003906:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800390a:	4645      	mov	r5, r8
 800390c:	9e08      	ldr	r6, [sp, #32]
 800390e:	9a07      	ldr	r2, [sp, #28]
 8003910:	2101      	movs	r1, #1
 8003912:	441a      	add	r2, r3
 8003914:	4620      	mov	r0, r4
 8003916:	4498      	add	r8, r3
 8003918:	9207      	str	r2, [sp, #28]
 800391a:	f000 fd5d 	bl	80043d8 <__i2b>
 800391e:	4607      	mov	r7, r0
 8003920:	2d00      	cmp	r5, #0
 8003922:	dd0b      	ble.n	800393c <_dtoa_r+0x744>
 8003924:	9b07      	ldr	r3, [sp, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	dd08      	ble.n	800393c <_dtoa_r+0x744>
 800392a:	42ab      	cmp	r3, r5
 800392c:	bfa8      	it	ge
 800392e:	462b      	movge	r3, r5
 8003930:	9a07      	ldr	r2, [sp, #28]
 8003932:	eba8 0803 	sub.w	r8, r8, r3
 8003936:	1aed      	subs	r5, r5, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	9307      	str	r3, [sp, #28]
 800393c:	9b08      	ldr	r3, [sp, #32]
 800393e:	b1fb      	cbz	r3, 8003980 <_dtoa_r+0x788>
 8003940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8104 	beq.w	8003b50 <_dtoa_r+0x958>
 8003948:	2e00      	cmp	r6, #0
 800394a:	dd11      	ble.n	8003970 <_dtoa_r+0x778>
 800394c:	4639      	mov	r1, r7
 800394e:	4632      	mov	r2, r6
 8003950:	4620      	mov	r0, r4
 8003952:	f000 fdd7 	bl	8004504 <__pow5mult>
 8003956:	4652      	mov	r2, sl
 8003958:	4601      	mov	r1, r0
 800395a:	4607      	mov	r7, r0
 800395c:	4620      	mov	r0, r4
 800395e:	f000 fd44 	bl	80043ea <__multiply>
 8003962:	4651      	mov	r1, sl
 8003964:	900a      	str	r0, [sp, #40]	; 0x28
 8003966:	4620      	mov	r0, r4
 8003968:	f000 fc96 	bl	8004298 <_Bfree>
 800396c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800396e:	469a      	mov	sl, r3
 8003970:	9b08      	ldr	r3, [sp, #32]
 8003972:	1b9a      	subs	r2, r3, r6
 8003974:	d004      	beq.n	8003980 <_dtoa_r+0x788>
 8003976:	4651      	mov	r1, sl
 8003978:	4620      	mov	r0, r4
 800397a:	f000 fdc3 	bl	8004504 <__pow5mult>
 800397e:	4682      	mov	sl, r0
 8003980:	2101      	movs	r1, #1
 8003982:	4620      	mov	r0, r4
 8003984:	f000 fd28 	bl	80043d8 <__i2b>
 8003988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800398a:	4606      	mov	r6, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	f340 80e1 	ble.w	8003b54 <_dtoa_r+0x95c>
 8003992:	461a      	mov	r2, r3
 8003994:	4601      	mov	r1, r0
 8003996:	4620      	mov	r0, r4
 8003998:	f000 fdb4 	bl	8004504 <__pow5mult>
 800399c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800399e:	4606      	mov	r6, r0
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f340 80da 	ble.w	8003b5a <_dtoa_r+0x962>
 80039a6:	2300      	movs	r3, #0
 80039a8:	9308      	str	r3, [sp, #32]
 80039aa:	6933      	ldr	r3, [r6, #16]
 80039ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80039b0:	6918      	ldr	r0, [r3, #16]
 80039b2:	f000 fcc3 	bl	800433c <__hi0bits>
 80039b6:	f1c0 0020 	rsb	r0, r0, #32
 80039ba:	9b07      	ldr	r3, [sp, #28]
 80039bc:	4418      	add	r0, r3
 80039be:	f010 001f 	ands.w	r0, r0, #31
 80039c2:	f000 80f0 	beq.w	8003ba6 <_dtoa_r+0x9ae>
 80039c6:	f1c0 0320 	rsb	r3, r0, #32
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	f340 80e2 	ble.w	8003b94 <_dtoa_r+0x99c>
 80039d0:	9b07      	ldr	r3, [sp, #28]
 80039d2:	f1c0 001c 	rsb	r0, r0, #28
 80039d6:	4480      	add	r8, r0
 80039d8:	4405      	add	r5, r0
 80039da:	4403      	add	r3, r0
 80039dc:	9307      	str	r3, [sp, #28]
 80039de:	f1b8 0f00 	cmp.w	r8, #0
 80039e2:	dd05      	ble.n	80039f0 <_dtoa_r+0x7f8>
 80039e4:	4651      	mov	r1, sl
 80039e6:	4642      	mov	r2, r8
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 fdd9 	bl	80045a0 <__lshift>
 80039ee:	4682      	mov	sl, r0
 80039f0:	9b07      	ldr	r3, [sp, #28]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dd05      	ble.n	8003a02 <_dtoa_r+0x80a>
 80039f6:	4631      	mov	r1, r6
 80039f8:	461a      	mov	r2, r3
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fdd0 	bl	80045a0 <__lshift>
 8003a00:	4606      	mov	r6, r0
 8003a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80d3 	beq.w	8003bb0 <_dtoa_r+0x9b8>
 8003a0a:	4631      	mov	r1, r6
 8003a0c:	4650      	mov	r0, sl
 8003a0e:	f000 fe18 	bl	8004642 <__mcmp>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	f280 80cc 	bge.w	8003bb0 <_dtoa_r+0x9b8>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4651      	mov	r1, sl
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 fc51 	bl	80042c6 <__multadd>
 8003a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a2a:	4682      	mov	sl, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 81a9 	beq.w	8003d84 <_dtoa_r+0xb8c>
 8003a32:	2300      	movs	r3, #0
 8003a34:	4639      	mov	r1, r7
 8003a36:	220a      	movs	r2, #10
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 fc44 	bl	80042c6 <__multadd>
 8003a3e:	9b04      	ldr	r3, [sp, #16]
 8003a40:	4607      	mov	r7, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	dc03      	bgt.n	8003a4e <_dtoa_r+0x856>
 8003a46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	f300 80b9 	bgt.w	8003bc0 <_dtoa_r+0x9c8>
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	dd05      	ble.n	8003a5e <_dtoa_r+0x866>
 8003a52:	4639      	mov	r1, r7
 8003a54:	462a      	mov	r2, r5
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 fda2 	bl	80045a0 <__lshift>
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	9b08      	ldr	r3, [sp, #32]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8110 	beq.w	8003c86 <_dtoa_r+0xa8e>
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f000 fbe1 	bl	8004230 <_Balloc>
 8003a6e:	4605      	mov	r5, r0
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	f107 010c 	add.w	r1, r7, #12
 8003a76:	3202      	adds	r2, #2
 8003a78:	0092      	lsls	r2, r2, #2
 8003a7a:	300c      	adds	r0, #12
 8003a7c:	f000 fbc0 	bl	8004200 <memcpy>
 8003a80:	2201      	movs	r2, #1
 8003a82:	4629      	mov	r1, r5
 8003a84:	4620      	mov	r0, r4
 8003a86:	f000 fd8b 	bl	80045a0 <__lshift>
 8003a8a:	9707      	str	r7, [sp, #28]
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	9b02      	ldr	r3, [sp, #8]
 8003a90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	9308      	str	r3, [sp, #32]
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	f7ff fb1d 	bl	80030dc <quorem>
 8003aa2:	9907      	ldr	r1, [sp, #28]
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003aaa:	4650      	mov	r0, sl
 8003aac:	f000 fdc9 	bl	8004642 <__mcmp>
 8003ab0:	463a      	mov	r2, r7
 8003ab2:	9002      	str	r0, [sp, #8]
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f000 fddd 	bl	8004676 <__mdiff>
 8003abc:	68c3      	ldr	r3, [r0, #12]
 8003abe:	4602      	mov	r2, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 80e2 	bne.w	8003c8a <_dtoa_r+0xa92>
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	9009      	str	r0, [sp, #36]	; 0x24
 8003aca:	4650      	mov	r0, sl
 8003acc:	f000 fdb9 	bl	8004642 <__mcmp>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ada:	f000 fbdd 	bl	8004298 <_Bfree>
 8003ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 80d4 	bne.w	8003c8e <_dtoa_r+0xa96>
 8003ae6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ae8:	2a00      	cmp	r2, #0
 8003aea:	f040 80d0 	bne.w	8003c8e <_dtoa_r+0xa96>
 8003aee:	9a08      	ldr	r2, [sp, #32]
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	f040 80cc 	bne.w	8003c8e <_dtoa_r+0xa96>
 8003af6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003afa:	f000 80e8 	beq.w	8003cce <_dtoa_r+0xad6>
 8003afe:	9b02      	ldr	r3, [sp, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	dd01      	ble.n	8003b08 <_dtoa_r+0x910>
 8003b04:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003b08:	f108 0501 	add.w	r5, r8, #1
 8003b0c:	f888 9000 	strb.w	r9, [r8]
 8003b10:	e06b      	b.n	8003bea <_dtoa_r+0x9f2>
 8003b12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b14:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003b18:	e6f7      	b.n	800390a <_dtoa_r+0x712>
 8003b1a:	9b08      	ldr	r3, [sp, #32]
 8003b1c:	f109 36ff 	add.w	r6, r9, #4294967295
 8003b20:	42b3      	cmp	r3, r6
 8003b22:	bfb7      	itett	lt
 8003b24:	9b08      	ldrlt	r3, [sp, #32]
 8003b26:	1b9e      	subge	r6, r3, r6
 8003b28:	1af2      	sublt	r2, r6, r3
 8003b2a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003b2c:	bfbf      	itttt	lt
 8003b2e:	9608      	strlt	r6, [sp, #32]
 8003b30:	189b      	addlt	r3, r3, r2
 8003b32:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003b34:	2600      	movlt	r6, #0
 8003b36:	f1b9 0f00 	cmp.w	r9, #0
 8003b3a:	bfb9      	ittee	lt
 8003b3c:	eba8 0509 	sublt.w	r5, r8, r9
 8003b40:	2300      	movlt	r3, #0
 8003b42:	4645      	movge	r5, r8
 8003b44:	464b      	movge	r3, r9
 8003b46:	e6e2      	b.n	800390e <_dtoa_r+0x716>
 8003b48:	9e08      	ldr	r6, [sp, #32]
 8003b4a:	4645      	mov	r5, r8
 8003b4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003b4e:	e6e7      	b.n	8003920 <_dtoa_r+0x728>
 8003b50:	9a08      	ldr	r2, [sp, #32]
 8003b52:	e710      	b.n	8003976 <_dtoa_r+0x77e>
 8003b54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	dc18      	bgt.n	8003b8c <_dtoa_r+0x994>
 8003b5a:	9b02      	ldr	r3, [sp, #8]
 8003b5c:	b9b3      	cbnz	r3, 8003b8c <_dtoa_r+0x994>
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b64:	b9a3      	cbnz	r3, 8003b90 <_dtoa_r+0x998>
 8003b66:	9b03      	ldr	r3, [sp, #12]
 8003b68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b6c:	0d1b      	lsrs	r3, r3, #20
 8003b6e:	051b      	lsls	r3, r3, #20
 8003b70:	b12b      	cbz	r3, 8003b7e <_dtoa_r+0x986>
 8003b72:	9b07      	ldr	r3, [sp, #28]
 8003b74:	f108 0801 	add.w	r8, r8, #1
 8003b78:	3301      	adds	r3, #1
 8003b7a:	9307      	str	r3, [sp, #28]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	9308      	str	r3, [sp, #32]
 8003b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f47f af11 	bne.w	80039aa <_dtoa_r+0x7b2>
 8003b88:	2001      	movs	r0, #1
 8003b8a:	e716      	b.n	80039ba <_dtoa_r+0x7c2>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e7f6      	b.n	8003b7e <_dtoa_r+0x986>
 8003b90:	9b02      	ldr	r3, [sp, #8]
 8003b92:	e7f4      	b.n	8003b7e <_dtoa_r+0x986>
 8003b94:	f43f af23 	beq.w	80039de <_dtoa_r+0x7e6>
 8003b98:	9a07      	ldr	r2, [sp, #28]
 8003b9a:	331c      	adds	r3, #28
 8003b9c:	441a      	add	r2, r3
 8003b9e:	4498      	add	r8, r3
 8003ba0:	441d      	add	r5, r3
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	e71a      	b.n	80039dc <_dtoa_r+0x7e4>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	e7f6      	b.n	8003b98 <_dtoa_r+0x9a0>
 8003baa:	bf00      	nop
 8003bac:	40240000 	.word	0x40240000
 8003bb0:	f1b9 0f00 	cmp.w	r9, #0
 8003bb4:	dc33      	bgt.n	8003c1e <_dtoa_r+0xa26>
 8003bb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	dd30      	ble.n	8003c1e <_dtoa_r+0xa26>
 8003bbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8003bc0:	9b04      	ldr	r3, [sp, #16]
 8003bc2:	b963      	cbnz	r3, 8003bde <_dtoa_r+0x9e6>
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 fb7c 	bl	80042c6 <__multadd>
 8003bce:	4601      	mov	r1, r0
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	4650      	mov	r0, sl
 8003bd4:	f000 fd35 	bl	8004642 <__mcmp>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f73f ad5c 	bgt.w	8003696 <_dtoa_r+0x49e>
 8003bde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003be0:	9d06      	ldr	r5, [sp, #24]
 8003be2:	ea6f 0b03 	mvn.w	fp, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	9307      	str	r3, [sp, #28]
 8003bea:	4631      	mov	r1, r6
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 fb53 	bl	8004298 <_Bfree>
 8003bf2:	2f00      	cmp	r7, #0
 8003bf4:	f43f ae4b 	beq.w	800388e <_dtoa_r+0x696>
 8003bf8:	9b07      	ldr	r3, [sp, #28]
 8003bfa:	b12b      	cbz	r3, 8003c08 <_dtoa_r+0xa10>
 8003bfc:	42bb      	cmp	r3, r7
 8003bfe:	d003      	beq.n	8003c08 <_dtoa_r+0xa10>
 8003c00:	4619      	mov	r1, r3
 8003c02:	4620      	mov	r0, r4
 8003c04:	f000 fb48 	bl	8004298 <_Bfree>
 8003c08:	4639      	mov	r1, r7
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f000 fb44 	bl	8004298 <_Bfree>
 8003c10:	e63d      	b.n	800388e <_dtoa_r+0x696>
 8003c12:	2600      	movs	r6, #0
 8003c14:	4637      	mov	r7, r6
 8003c16:	e7e2      	b.n	8003bde <_dtoa_r+0x9e6>
 8003c18:	46bb      	mov	fp, r7
 8003c1a:	4637      	mov	r7, r6
 8003c1c:	e53b      	b.n	8003696 <_dtoa_r+0x49e>
 8003c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c20:	f8cd 9010 	str.w	r9, [sp, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f47f af12 	bne.w	8003a4e <_dtoa_r+0x856>
 8003c2a:	9d06      	ldr	r5, [sp, #24]
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4650      	mov	r0, sl
 8003c30:	f7ff fa54 	bl	80030dc <quorem>
 8003c34:	9b06      	ldr	r3, [sp, #24]
 8003c36:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003c3a:	f805 9b01 	strb.w	r9, [r5], #1
 8003c3e:	9a04      	ldr	r2, [sp, #16]
 8003c40:	1aeb      	subs	r3, r5, r3
 8003c42:	429a      	cmp	r2, r3
 8003c44:	f300 8081 	bgt.w	8003d4a <_dtoa_r+0xb52>
 8003c48:	9b06      	ldr	r3, [sp, #24]
 8003c4a:	2a01      	cmp	r2, #1
 8003c4c:	bfac      	ite	ge
 8003c4e:	189b      	addge	r3, r3, r2
 8003c50:	3301      	addlt	r3, #1
 8003c52:	4698      	mov	r8, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	9307      	str	r3, [sp, #28]
 8003c58:	4651      	mov	r1, sl
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 fc9f 	bl	80045a0 <__lshift>
 8003c62:	4631      	mov	r1, r6
 8003c64:	4682      	mov	sl, r0
 8003c66:	f000 fcec 	bl	8004642 <__mcmp>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	dc34      	bgt.n	8003cd8 <_dtoa_r+0xae0>
 8003c6e:	d102      	bne.n	8003c76 <_dtoa_r+0xa7e>
 8003c70:	f019 0f01 	tst.w	r9, #1
 8003c74:	d130      	bne.n	8003cd8 <_dtoa_r+0xae0>
 8003c76:	4645      	mov	r5, r8
 8003c78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c7c:	1e6a      	subs	r2, r5, #1
 8003c7e:	2b30      	cmp	r3, #48	; 0x30
 8003c80:	d1b3      	bne.n	8003bea <_dtoa_r+0x9f2>
 8003c82:	4615      	mov	r5, r2
 8003c84:	e7f8      	b.n	8003c78 <_dtoa_r+0xa80>
 8003c86:	4638      	mov	r0, r7
 8003c88:	e6ff      	b.n	8003a8a <_dtoa_r+0x892>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e722      	b.n	8003ad4 <_dtoa_r+0x8dc>
 8003c8e:	9a02      	ldr	r2, [sp, #8]
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	db04      	blt.n	8003c9e <_dtoa_r+0xaa6>
 8003c94:	d128      	bne.n	8003ce8 <_dtoa_r+0xaf0>
 8003c96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003c98:	bb32      	cbnz	r2, 8003ce8 <_dtoa_r+0xaf0>
 8003c9a:	9a08      	ldr	r2, [sp, #32]
 8003c9c:	bb22      	cbnz	r2, 8003ce8 <_dtoa_r+0xaf0>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f77f af32 	ble.w	8003b08 <_dtoa_r+0x910>
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fc79 	bl	80045a0 <__lshift>
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4682      	mov	sl, r0
 8003cb2:	f000 fcc6 	bl	8004642 <__mcmp>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	dc05      	bgt.n	8003cc6 <_dtoa_r+0xace>
 8003cba:	f47f af25 	bne.w	8003b08 <_dtoa_r+0x910>
 8003cbe:	f019 0f01 	tst.w	r9, #1
 8003cc2:	f43f af21 	beq.w	8003b08 <_dtoa_r+0x910>
 8003cc6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003cca:	f47f af1b 	bne.w	8003b04 <_dtoa_r+0x90c>
 8003cce:	2339      	movs	r3, #57	; 0x39
 8003cd0:	f108 0801 	add.w	r8, r8, #1
 8003cd4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003cd8:	4645      	mov	r5, r8
 8003cda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003cde:	1e6a      	subs	r2, r5, #1
 8003ce0:	2b39      	cmp	r3, #57	; 0x39
 8003ce2:	d03a      	beq.n	8003d5a <_dtoa_r+0xb62>
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	e03f      	b.n	8003d68 <_dtoa_r+0xb70>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f108 0501 	add.w	r5, r8, #1
 8003cee:	dd05      	ble.n	8003cfc <_dtoa_r+0xb04>
 8003cf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003cf4:	d0eb      	beq.n	8003cce <_dtoa_r+0xad6>
 8003cf6:	f109 0901 	add.w	r9, r9, #1
 8003cfa:	e707      	b.n	8003b0c <_dtoa_r+0x914>
 8003cfc:	9b06      	ldr	r3, [sp, #24]
 8003cfe:	9a04      	ldr	r2, [sp, #16]
 8003d00:	1aeb      	subs	r3, r5, r3
 8003d02:	4293      	cmp	r3, r2
 8003d04:	46a8      	mov	r8, r5
 8003d06:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003d0a:	d0a5      	beq.n	8003c58 <_dtoa_r+0xa60>
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	2300      	movs	r3, #0
 8003d10:	220a      	movs	r2, #10
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 fad7 	bl	80042c6 <__multadd>
 8003d18:	9b07      	ldr	r3, [sp, #28]
 8003d1a:	4682      	mov	sl, r0
 8003d1c:	42bb      	cmp	r3, r7
 8003d1e:	f04f 020a 	mov.w	r2, #10
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	9907      	ldr	r1, [sp, #28]
 8003d28:	4620      	mov	r0, r4
 8003d2a:	d104      	bne.n	8003d36 <_dtoa_r+0xb3e>
 8003d2c:	f000 facb 	bl	80042c6 <__multadd>
 8003d30:	9007      	str	r0, [sp, #28]
 8003d32:	4607      	mov	r7, r0
 8003d34:	e6b1      	b.n	8003a9a <_dtoa_r+0x8a2>
 8003d36:	f000 fac6 	bl	80042c6 <__multadd>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9007      	str	r0, [sp, #28]
 8003d3e:	220a      	movs	r2, #10
 8003d40:	4639      	mov	r1, r7
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 fabf 	bl	80042c6 <__multadd>
 8003d48:	e7f3      	b.n	8003d32 <_dtoa_r+0xb3a>
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	220a      	movs	r2, #10
 8003d50:	4620      	mov	r0, r4
 8003d52:	f000 fab8 	bl	80042c6 <__multadd>
 8003d56:	4682      	mov	sl, r0
 8003d58:	e768      	b.n	8003c2c <_dtoa_r+0xa34>
 8003d5a:	9b06      	ldr	r3, [sp, #24]
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d105      	bne.n	8003d6c <_dtoa_r+0xb74>
 8003d60:	2331      	movs	r3, #49	; 0x31
 8003d62:	9a06      	ldr	r2, [sp, #24]
 8003d64:	f10b 0b01 	add.w	fp, fp, #1
 8003d68:	7013      	strb	r3, [r2, #0]
 8003d6a:	e73e      	b.n	8003bea <_dtoa_r+0x9f2>
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	e7b4      	b.n	8003cda <_dtoa_r+0xae2>
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <_dtoa_r+0xba0>)
 8003d72:	f7ff baa3 	b.w	80032bc <_dtoa_r+0xc4>
 8003d76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f47f aa7d 	bne.w	8003278 <_dtoa_r+0x80>
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <_dtoa_r+0xba4>)
 8003d80:	f7ff ba9c 	b.w	80032bc <_dtoa_r+0xc4>
 8003d84:	9b04      	ldr	r3, [sp, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f73f af4f 	bgt.w	8003c2a <_dtoa_r+0xa32>
 8003d8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	f77f af4b 	ble.w	8003c2a <_dtoa_r+0xa32>
 8003d94:	e714      	b.n	8003bc0 <_dtoa_r+0x9c8>
 8003d96:	bf00      	nop
 8003d98:	08004fe2 	.word	0x08004fe2
 8003d9c:	08005004 	.word	0x08005004

08003da0 <_localeconv_r>:
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <_localeconv_r+0x14>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a18      	ldr	r0, [r3, #32]
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <_localeconv_r+0x18>)
 8003da8:	2800      	cmp	r0, #0
 8003daa:	bf08      	it	eq
 8003dac:	4618      	moveq	r0, r3
 8003dae:	30f0      	adds	r0, #240	; 0xf0
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000058 	.word	0x20000058
 8003db8:	2000055c 	.word	0x2000055c

08003dbc <malloc>:
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <malloc+0xc>)
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f000 b803 	b.w	8003dcc <_malloc_r>
 8003dc6:	bf00      	nop
 8003dc8:	20000058 	.word	0x20000058

08003dcc <_malloc_r>:
 8003dcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	f101 040b 	add.w	r4, r1, #11
 8003dd4:	2c16      	cmp	r4, #22
 8003dd6:	4681      	mov	r9, r0
 8003dd8:	d907      	bls.n	8003dea <_malloc_r+0x1e>
 8003dda:	f034 0407 	bics.w	r4, r4, #7
 8003dde:	d505      	bpl.n	8003dec <_malloc_r+0x20>
 8003de0:	230c      	movs	r3, #12
 8003de2:	f8c9 3000 	str.w	r3, [r9]
 8003de6:	2600      	movs	r6, #0
 8003de8:	e131      	b.n	800404e <_malloc_r+0x282>
 8003dea:	2410      	movs	r4, #16
 8003dec:	428c      	cmp	r4, r1
 8003dee:	d3f7      	bcc.n	8003de0 <_malloc_r+0x14>
 8003df0:	4648      	mov	r0, r9
 8003df2:	f000 fa11 	bl	8004218 <__malloc_lock>
 8003df6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003dfa:	4d9b      	ldr	r5, [pc, #620]	; (8004068 <_malloc_r+0x29c>)
 8003dfc:	d236      	bcs.n	8003e6c <_malloc_r+0xa0>
 8003dfe:	f104 0208 	add.w	r2, r4, #8
 8003e02:	442a      	add	r2, r5
 8003e04:	6856      	ldr	r6, [r2, #4]
 8003e06:	f1a2 0108 	sub.w	r1, r2, #8
 8003e0a:	428e      	cmp	r6, r1
 8003e0c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003e10:	d102      	bne.n	8003e18 <_malloc_r+0x4c>
 8003e12:	68d6      	ldr	r6, [r2, #12]
 8003e14:	42b2      	cmp	r2, r6
 8003e16:	d010      	beq.n	8003e3a <_malloc_r+0x6e>
 8003e18:	6873      	ldr	r3, [r6, #4]
 8003e1a:	68f2      	ldr	r2, [r6, #12]
 8003e1c:	68b1      	ldr	r1, [r6, #8]
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	60ca      	str	r2, [r1, #12]
 8003e24:	4433      	add	r3, r6
 8003e26:	6091      	str	r1, [r2, #8]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	4648      	mov	r0, r9
 8003e32:	f000 f9f7 	bl	8004224 <__malloc_unlock>
 8003e36:	3608      	adds	r6, #8
 8003e38:	e109      	b.n	800404e <_malloc_r+0x282>
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	4a8b      	ldr	r2, [pc, #556]	; (800406c <_malloc_r+0x2a0>)
 8003e3e:	692e      	ldr	r6, [r5, #16]
 8003e40:	4611      	mov	r1, r2
 8003e42:	4296      	cmp	r6, r2
 8003e44:	d06d      	beq.n	8003f22 <_malloc_r+0x156>
 8003e46:	6870      	ldr	r0, [r6, #4]
 8003e48:	f020 0003 	bic.w	r0, r0, #3
 8003e4c:	1b07      	subs	r7, r0, r4
 8003e4e:	2f0f      	cmp	r7, #15
 8003e50:	dd47      	ble.n	8003ee2 <_malloc_r+0x116>
 8003e52:	1933      	adds	r3, r6, r4
 8003e54:	f044 0401 	orr.w	r4, r4, #1
 8003e58:	6074      	str	r4, [r6, #4]
 8003e5a:	616b      	str	r3, [r5, #20]
 8003e5c:	612b      	str	r3, [r5, #16]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	f047 0201 	orr.w	r2, r7, #1
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	5037      	str	r7, [r6, r0]
 8003e6a:	e7e1      	b.n	8003e30 <_malloc_r+0x64>
 8003e6c:	0a63      	lsrs	r3, r4, #9
 8003e6e:	d02a      	beq.n	8003ec6 <_malloc_r+0xfa>
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d812      	bhi.n	8003e9a <_malloc_r+0xce>
 8003e74:	09a3      	lsrs	r3, r4, #6
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003e7e:	6856      	ldr	r6, [r2, #4]
 8003e80:	f1a2 0008 	sub.w	r0, r2, #8
 8003e84:	4286      	cmp	r6, r0
 8003e86:	d006      	beq.n	8003e96 <_malloc_r+0xca>
 8003e88:	6872      	ldr	r2, [r6, #4]
 8003e8a:	f022 0203 	bic.w	r2, r2, #3
 8003e8e:	1b11      	subs	r1, r2, r4
 8003e90:	290f      	cmp	r1, #15
 8003e92:	dd1c      	ble.n	8003ece <_malloc_r+0x102>
 8003e94:	3b01      	subs	r3, #1
 8003e96:	3301      	adds	r3, #1
 8003e98:	e7d0      	b.n	8003e3c <_malloc_r+0x70>
 8003e9a:	2b14      	cmp	r3, #20
 8003e9c:	d801      	bhi.n	8003ea2 <_malloc_r+0xd6>
 8003e9e:	335b      	adds	r3, #91	; 0x5b
 8003ea0:	e7ea      	b.n	8003e78 <_malloc_r+0xac>
 8003ea2:	2b54      	cmp	r3, #84	; 0x54
 8003ea4:	d802      	bhi.n	8003eac <_malloc_r+0xe0>
 8003ea6:	0b23      	lsrs	r3, r4, #12
 8003ea8:	336e      	adds	r3, #110	; 0x6e
 8003eaa:	e7e5      	b.n	8003e78 <_malloc_r+0xac>
 8003eac:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003eb0:	d802      	bhi.n	8003eb8 <_malloc_r+0xec>
 8003eb2:	0be3      	lsrs	r3, r4, #15
 8003eb4:	3377      	adds	r3, #119	; 0x77
 8003eb6:	e7df      	b.n	8003e78 <_malloc_r+0xac>
 8003eb8:	f240 5254 	movw	r2, #1364	; 0x554
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d804      	bhi.n	8003eca <_malloc_r+0xfe>
 8003ec0:	0ca3      	lsrs	r3, r4, #18
 8003ec2:	337c      	adds	r3, #124	; 0x7c
 8003ec4:	e7d8      	b.n	8003e78 <_malloc_r+0xac>
 8003ec6:	233f      	movs	r3, #63	; 0x3f
 8003ec8:	e7d6      	b.n	8003e78 <_malloc_r+0xac>
 8003eca:	237e      	movs	r3, #126	; 0x7e
 8003ecc:	e7d4      	b.n	8003e78 <_malloc_r+0xac>
 8003ece:	2900      	cmp	r1, #0
 8003ed0:	68f1      	ldr	r1, [r6, #12]
 8003ed2:	db04      	blt.n	8003ede <_malloc_r+0x112>
 8003ed4:	68b3      	ldr	r3, [r6, #8]
 8003ed6:	60d9      	str	r1, [r3, #12]
 8003ed8:	608b      	str	r3, [r1, #8]
 8003eda:	18b3      	adds	r3, r6, r2
 8003edc:	e7a4      	b.n	8003e28 <_malloc_r+0x5c>
 8003ede:	460e      	mov	r6, r1
 8003ee0:	e7d0      	b.n	8003e84 <_malloc_r+0xb8>
 8003ee2:	2f00      	cmp	r7, #0
 8003ee4:	616a      	str	r2, [r5, #20]
 8003ee6:	612a      	str	r2, [r5, #16]
 8003ee8:	db05      	blt.n	8003ef6 <_malloc_r+0x12a>
 8003eea:	4430      	add	r0, r6
 8003eec:	6843      	ldr	r3, [r0, #4]
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6043      	str	r3, [r0, #4]
 8003ef4:	e79c      	b.n	8003e30 <_malloc_r+0x64>
 8003ef6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003efa:	d244      	bcs.n	8003f86 <_malloc_r+0x1ba>
 8003efc:	2201      	movs	r2, #1
 8003efe:	08c0      	lsrs	r0, r0, #3
 8003f00:	1087      	asrs	r7, r0, #2
 8003f02:	fa02 f707 	lsl.w	r7, r2, r7
 8003f06:	686a      	ldr	r2, [r5, #4]
 8003f08:	3001      	adds	r0, #1
 8003f0a:	433a      	orrs	r2, r7
 8003f0c:	606a      	str	r2, [r5, #4]
 8003f0e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003f12:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003f16:	3a08      	subs	r2, #8
 8003f18:	60f2      	str	r2, [r6, #12]
 8003f1a:	60b7      	str	r7, [r6, #8]
 8003f1c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003f20:	60fe      	str	r6, [r7, #12]
 8003f22:	2001      	movs	r0, #1
 8003f24:	109a      	asrs	r2, r3, #2
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	6868      	ldr	r0, [r5, #4]
 8003f2c:	4282      	cmp	r2, r0
 8003f2e:	f200 809f 	bhi.w	8004070 <_malloc_r+0x2a4>
 8003f32:	4202      	tst	r2, r0
 8003f34:	d106      	bne.n	8003f44 <_malloc_r+0x178>
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	0052      	lsls	r2, r2, #1
 8003f3c:	4202      	tst	r2, r0
 8003f3e:	f103 0304 	add.w	r3, r3, #4
 8003f42:	d0fa      	beq.n	8003f3a <_malloc_r+0x16e>
 8003f44:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003f48:	46e0      	mov	r8, ip
 8003f4a:	469e      	mov	lr, r3
 8003f4c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003f50:	4546      	cmp	r6, r8
 8003f52:	d153      	bne.n	8003ffc <_malloc_r+0x230>
 8003f54:	f10e 0e01 	add.w	lr, lr, #1
 8003f58:	f01e 0f03 	tst.w	lr, #3
 8003f5c:	f108 0808 	add.w	r8, r8, #8
 8003f60:	d1f4      	bne.n	8003f4c <_malloc_r+0x180>
 8003f62:	0798      	lsls	r0, r3, #30
 8003f64:	d179      	bne.n	800405a <_malloc_r+0x28e>
 8003f66:	686b      	ldr	r3, [r5, #4]
 8003f68:	ea23 0302 	bic.w	r3, r3, r2
 8003f6c:	606b      	str	r3, [r5, #4]
 8003f6e:	6868      	ldr	r0, [r5, #4]
 8003f70:	0052      	lsls	r2, r2, #1
 8003f72:	4282      	cmp	r2, r0
 8003f74:	d87c      	bhi.n	8004070 <_malloc_r+0x2a4>
 8003f76:	2a00      	cmp	r2, #0
 8003f78:	d07a      	beq.n	8004070 <_malloc_r+0x2a4>
 8003f7a:	4673      	mov	r3, lr
 8003f7c:	4202      	tst	r2, r0
 8003f7e:	d1e1      	bne.n	8003f44 <_malloc_r+0x178>
 8003f80:	3304      	adds	r3, #4
 8003f82:	0052      	lsls	r2, r2, #1
 8003f84:	e7fa      	b.n	8003f7c <_malloc_r+0x1b0>
 8003f86:	0a42      	lsrs	r2, r0, #9
 8003f88:	2a04      	cmp	r2, #4
 8003f8a:	d815      	bhi.n	8003fb8 <_malloc_r+0x1ec>
 8003f8c:	0982      	lsrs	r2, r0, #6
 8003f8e:	3238      	adds	r2, #56	; 0x38
 8003f90:	1c57      	adds	r7, r2, #1
 8003f92:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003f96:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003f9a:	45be      	cmp	lr, r7
 8003f9c:	d126      	bne.n	8003fec <_malloc_r+0x220>
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	1092      	asrs	r2, r2, #2
 8003fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa6:	6868      	ldr	r0, [r5, #4]
 8003fa8:	4310      	orrs	r0, r2
 8003faa:	6068      	str	r0, [r5, #4]
 8003fac:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003fb0:	60b7      	str	r7, [r6, #8]
 8003fb2:	f8ce 6008 	str.w	r6, [lr, #8]
 8003fb6:	e7b3      	b.n	8003f20 <_malloc_r+0x154>
 8003fb8:	2a14      	cmp	r2, #20
 8003fba:	d801      	bhi.n	8003fc0 <_malloc_r+0x1f4>
 8003fbc:	325b      	adds	r2, #91	; 0x5b
 8003fbe:	e7e7      	b.n	8003f90 <_malloc_r+0x1c4>
 8003fc0:	2a54      	cmp	r2, #84	; 0x54
 8003fc2:	d802      	bhi.n	8003fca <_malloc_r+0x1fe>
 8003fc4:	0b02      	lsrs	r2, r0, #12
 8003fc6:	326e      	adds	r2, #110	; 0x6e
 8003fc8:	e7e2      	b.n	8003f90 <_malloc_r+0x1c4>
 8003fca:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003fce:	d802      	bhi.n	8003fd6 <_malloc_r+0x20a>
 8003fd0:	0bc2      	lsrs	r2, r0, #15
 8003fd2:	3277      	adds	r2, #119	; 0x77
 8003fd4:	e7dc      	b.n	8003f90 <_malloc_r+0x1c4>
 8003fd6:	f240 5754 	movw	r7, #1364	; 0x554
 8003fda:	42ba      	cmp	r2, r7
 8003fdc:	bf9a      	itte	ls
 8003fde:	0c82      	lsrls	r2, r0, #18
 8003fe0:	327c      	addls	r2, #124	; 0x7c
 8003fe2:	227e      	movhi	r2, #126	; 0x7e
 8003fe4:	e7d4      	b.n	8003f90 <_malloc_r+0x1c4>
 8003fe6:	68bf      	ldr	r7, [r7, #8]
 8003fe8:	45be      	cmp	lr, r7
 8003fea:	d004      	beq.n	8003ff6 <_malloc_r+0x22a>
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	f022 0203 	bic.w	r2, r2, #3
 8003ff2:	4290      	cmp	r0, r2
 8003ff4:	d3f7      	bcc.n	8003fe6 <_malloc_r+0x21a>
 8003ff6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003ffa:	e7d7      	b.n	8003fac <_malloc_r+0x1e0>
 8003ffc:	6870      	ldr	r0, [r6, #4]
 8003ffe:	68f7      	ldr	r7, [r6, #12]
 8004000:	f020 0003 	bic.w	r0, r0, #3
 8004004:	eba0 0a04 	sub.w	sl, r0, r4
 8004008:	f1ba 0f0f 	cmp.w	sl, #15
 800400c:	dd10      	ble.n	8004030 <_malloc_r+0x264>
 800400e:	68b2      	ldr	r2, [r6, #8]
 8004010:	1933      	adds	r3, r6, r4
 8004012:	f044 0401 	orr.w	r4, r4, #1
 8004016:	6074      	str	r4, [r6, #4]
 8004018:	60d7      	str	r7, [r2, #12]
 800401a:	60ba      	str	r2, [r7, #8]
 800401c:	f04a 0201 	orr.w	r2, sl, #1
 8004020:	616b      	str	r3, [r5, #20]
 8004022:	612b      	str	r3, [r5, #16]
 8004024:	60d9      	str	r1, [r3, #12]
 8004026:	6099      	str	r1, [r3, #8]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	f846 a000 	str.w	sl, [r6, r0]
 800402e:	e6ff      	b.n	8003e30 <_malloc_r+0x64>
 8004030:	f1ba 0f00 	cmp.w	sl, #0
 8004034:	db0f      	blt.n	8004056 <_malloc_r+0x28a>
 8004036:	4430      	add	r0, r6
 8004038:	6843      	ldr	r3, [r0, #4]
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	6043      	str	r3, [r0, #4]
 8004040:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004044:	4648      	mov	r0, r9
 8004046:	60df      	str	r7, [r3, #12]
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	f000 f8eb 	bl	8004224 <__malloc_unlock>
 800404e:	4630      	mov	r0, r6
 8004050:	b003      	add	sp, #12
 8004052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004056:	463e      	mov	r6, r7
 8004058:	e77a      	b.n	8003f50 <_malloc_r+0x184>
 800405a:	f85c 0908 	ldr.w	r0, [ip], #-8
 800405e:	3b01      	subs	r3, #1
 8004060:	4584      	cmp	ip, r0
 8004062:	f43f af7e 	beq.w	8003f62 <_malloc_r+0x196>
 8004066:	e782      	b.n	8003f6e <_malloc_r+0x1a2>
 8004068:	2000014c 	.word	0x2000014c
 800406c:	20000154 	.word	0x20000154
 8004070:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004074:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004078:	f026 0603 	bic.w	r6, r6, #3
 800407c:	42b4      	cmp	r4, r6
 800407e:	d803      	bhi.n	8004088 <_malloc_r+0x2bc>
 8004080:	1b33      	subs	r3, r6, r4
 8004082:	2b0f      	cmp	r3, #15
 8004084:	f300 8095 	bgt.w	80041b2 <_malloc_r+0x3e6>
 8004088:	4a4f      	ldr	r2, [pc, #316]	; (80041c8 <_malloc_r+0x3fc>)
 800408a:	eb0b 0306 	add.w	r3, fp, r6
 800408e:	6817      	ldr	r7, [r2, #0]
 8004090:	4a4e      	ldr	r2, [pc, #312]	; (80041cc <_malloc_r+0x400>)
 8004092:	3710      	adds	r7, #16
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	4427      	add	r7, r4
 8004098:	3101      	adds	r1, #1
 800409a:	d005      	beq.n	80040a8 <_malloc_r+0x2dc>
 800409c:	494c      	ldr	r1, [pc, #304]	; (80041d0 <_malloc_r+0x404>)
 800409e:	3901      	subs	r1, #1
 80040a0:	440f      	add	r7, r1
 80040a2:	3101      	adds	r1, #1
 80040a4:	4249      	negs	r1, r1
 80040a6:	400f      	ands	r7, r1
 80040a8:	4639      	mov	r1, r7
 80040aa:	4648      	mov	r0, r9
 80040ac:	9201      	str	r2, [sp, #4]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	f000 fb90 	bl	80047d4 <_sbrk_r>
 80040b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040b8:	4680      	mov	r8, r0
 80040ba:	d055      	beq.n	8004168 <_malloc_r+0x39c>
 80040bc:	9b00      	ldr	r3, [sp, #0]
 80040be:	9a01      	ldr	r2, [sp, #4]
 80040c0:	4283      	cmp	r3, r0
 80040c2:	d901      	bls.n	80040c8 <_malloc_r+0x2fc>
 80040c4:	45ab      	cmp	fp, r5
 80040c6:	d14f      	bne.n	8004168 <_malloc_r+0x39c>
 80040c8:	4842      	ldr	r0, [pc, #264]	; (80041d4 <_malloc_r+0x408>)
 80040ca:	4543      	cmp	r3, r8
 80040cc:	6801      	ldr	r1, [r0, #0]
 80040ce:	4682      	mov	sl, r0
 80040d0:	eb07 0e01 	add.w	lr, r7, r1
 80040d4:	f8c0 e000 	str.w	lr, [r0]
 80040d8:	493f      	ldr	r1, [pc, #252]	; (80041d8 <_malloc_r+0x40c>)
 80040da:	d113      	bne.n	8004104 <_malloc_r+0x338>
 80040dc:	420b      	tst	r3, r1
 80040de:	d111      	bne.n	8004104 <_malloc_r+0x338>
 80040e0:	68ab      	ldr	r3, [r5, #8]
 80040e2:	443e      	add	r6, r7
 80040e4:	f046 0601 	orr.w	r6, r6, #1
 80040e8:	605e      	str	r6, [r3, #4]
 80040ea:	4a3c      	ldr	r2, [pc, #240]	; (80041dc <_malloc_r+0x410>)
 80040ec:	f8da 3000 	ldr.w	r3, [sl]
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	428b      	cmp	r3, r1
 80040f4:	bf88      	it	hi
 80040f6:	6013      	strhi	r3, [r2, #0]
 80040f8:	4a39      	ldr	r2, [pc, #228]	; (80041e0 <_malloc_r+0x414>)
 80040fa:	6811      	ldr	r1, [r2, #0]
 80040fc:	428b      	cmp	r3, r1
 80040fe:	bf88      	it	hi
 8004100:	6013      	strhi	r3, [r2, #0]
 8004102:	e031      	b.n	8004168 <_malloc_r+0x39c>
 8004104:	6810      	ldr	r0, [r2, #0]
 8004106:	3001      	adds	r0, #1
 8004108:	bf1b      	ittet	ne
 800410a:	eba8 0303 	subne.w	r3, r8, r3
 800410e:	4473      	addne	r3, lr
 8004110:	f8c2 8000 	streq.w	r8, [r2]
 8004114:	f8ca 3000 	strne.w	r3, [sl]
 8004118:	f018 0007 	ands.w	r0, r8, #7
 800411c:	bf1c      	itt	ne
 800411e:	f1c0 0008 	rsbne	r0, r0, #8
 8004122:	4480      	addne	r8, r0
 8004124:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <_malloc_r+0x404>)
 8004126:	4447      	add	r7, r8
 8004128:	4418      	add	r0, r3
 800412a:	400f      	ands	r7, r1
 800412c:	1bc7      	subs	r7, r0, r7
 800412e:	4639      	mov	r1, r7
 8004130:	4648      	mov	r0, r9
 8004132:	f000 fb4f 	bl	80047d4 <_sbrk_r>
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	bf04      	itt	eq
 800413a:	4640      	moveq	r0, r8
 800413c:	2700      	moveq	r7, #0
 800413e:	f8da 3000 	ldr.w	r3, [sl]
 8004142:	eba0 0008 	sub.w	r0, r0, r8
 8004146:	443b      	add	r3, r7
 8004148:	4407      	add	r7, r0
 800414a:	f047 0701 	orr.w	r7, r7, #1
 800414e:	45ab      	cmp	fp, r5
 8004150:	f8c5 8008 	str.w	r8, [r5, #8]
 8004154:	f8ca 3000 	str.w	r3, [sl]
 8004158:	f8c8 7004 	str.w	r7, [r8, #4]
 800415c:	d0c5      	beq.n	80040ea <_malloc_r+0x31e>
 800415e:	2e0f      	cmp	r6, #15
 8004160:	d810      	bhi.n	8004184 <_malloc_r+0x3b8>
 8004162:	2301      	movs	r3, #1
 8004164:	f8c8 3004 	str.w	r3, [r8, #4]
 8004168:	68ab      	ldr	r3, [r5, #8]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	f022 0203 	bic.w	r2, r2, #3
 8004170:	4294      	cmp	r4, r2
 8004172:	eba2 0304 	sub.w	r3, r2, r4
 8004176:	d801      	bhi.n	800417c <_malloc_r+0x3b0>
 8004178:	2b0f      	cmp	r3, #15
 800417a:	dc1a      	bgt.n	80041b2 <_malloc_r+0x3e6>
 800417c:	4648      	mov	r0, r9
 800417e:	f000 f851 	bl	8004224 <__malloc_unlock>
 8004182:	e630      	b.n	8003de6 <_malloc_r+0x1a>
 8004184:	2205      	movs	r2, #5
 8004186:	f8db 3004 	ldr.w	r3, [fp, #4]
 800418a:	3e0c      	subs	r6, #12
 800418c:	f026 0607 	bic.w	r6, r6, #7
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	4333      	orrs	r3, r6
 8004196:	f8cb 3004 	str.w	r3, [fp, #4]
 800419a:	2e0f      	cmp	r6, #15
 800419c:	eb0b 0306 	add.w	r3, fp, r6
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	d9a1      	bls.n	80040ea <_malloc_r+0x31e>
 80041a6:	f10b 0108 	add.w	r1, fp, #8
 80041aa:	4648      	mov	r0, r9
 80041ac:	f000 fc20 	bl	80049f0 <_free_r>
 80041b0:	e79b      	b.n	80040ea <_malloc_r+0x31e>
 80041b2:	68ae      	ldr	r6, [r5, #8]
 80041b4:	f044 0201 	orr.w	r2, r4, #1
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	4434      	add	r4, r6
 80041be:	6072      	str	r2, [r6, #4]
 80041c0:	60ac      	str	r4, [r5, #8]
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	e634      	b.n	8003e30 <_malloc_r+0x64>
 80041c6:	bf00      	nop
 80041c8:	2000071c 	.word	0x2000071c
 80041cc:	20000554 	.word	0x20000554
 80041d0:	00000080 	.word	0x00000080
 80041d4:	200006ec 	.word	0x200006ec
 80041d8:	0000007f 	.word	0x0000007f
 80041dc:	20000714 	.word	0x20000714
 80041e0:	20000718 	.word	0x20000718

080041e4 <memchr>:
 80041e4:	b510      	push	{r4, lr}
 80041e6:	b2c9      	uxtb	r1, r1
 80041e8:	4402      	add	r2, r0
 80041ea:	4290      	cmp	r0, r2
 80041ec:	4603      	mov	r3, r0
 80041ee:	d101      	bne.n	80041f4 <memchr+0x10>
 80041f0:	2000      	movs	r0, #0
 80041f2:	bd10      	pop	{r4, pc}
 80041f4:	781c      	ldrb	r4, [r3, #0]
 80041f6:	3001      	adds	r0, #1
 80041f8:	428c      	cmp	r4, r1
 80041fa:	d1f6      	bne.n	80041ea <memchr+0x6>
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd10      	pop	{r4, pc}

08004200 <memcpy>:
 8004200:	b510      	push	{r4, lr}
 8004202:	1e43      	subs	r3, r0, #1
 8004204:	440a      	add	r2, r1
 8004206:	4291      	cmp	r1, r2
 8004208:	d100      	bne.n	800420c <memcpy+0xc>
 800420a:	bd10      	pop	{r4, pc}
 800420c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004214:	e7f7      	b.n	8004206 <memcpy+0x6>
	...

08004218 <__malloc_lock>:
 8004218:	4801      	ldr	r0, [pc, #4]	; (8004220 <__malloc_lock+0x8>)
 800421a:	f000 bca5 	b.w	8004b68 <__retarget_lock_acquire_recursive>
 800421e:	bf00      	nop
 8004220:	200007c8 	.word	0x200007c8

08004224 <__malloc_unlock>:
 8004224:	4801      	ldr	r0, [pc, #4]	; (800422c <__malloc_unlock+0x8>)
 8004226:	f000 bca0 	b.w	8004b6a <__retarget_lock_release_recursive>
 800422a:	bf00      	nop
 800422c:	200007c8 	.word	0x200007c8

08004230 <_Balloc>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004234:	4604      	mov	r4, r0
 8004236:	460e      	mov	r6, r1
 8004238:	b93d      	cbnz	r5, 800424a <_Balloc+0x1a>
 800423a:	2010      	movs	r0, #16
 800423c:	f7ff fdbe 	bl	8003dbc <malloc>
 8004240:	6260      	str	r0, [r4, #36]	; 0x24
 8004242:	6045      	str	r5, [r0, #4]
 8004244:	6085      	str	r5, [r0, #8]
 8004246:	6005      	str	r5, [r0, #0]
 8004248:	60c5      	str	r5, [r0, #12]
 800424a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800424c:	68eb      	ldr	r3, [r5, #12]
 800424e:	b183      	cbz	r3, 8004272 <_Balloc+0x42>
 8004250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004258:	b9b8      	cbnz	r0, 800428a <_Balloc+0x5a>
 800425a:	2101      	movs	r1, #1
 800425c:	fa01 f506 	lsl.w	r5, r1, r6
 8004260:	1d6a      	adds	r2, r5, #5
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	4620      	mov	r0, r4
 8004266:	f000 fb3f 	bl	80048e8 <_calloc_r>
 800426a:	b160      	cbz	r0, 8004286 <_Balloc+0x56>
 800426c:	6046      	str	r6, [r0, #4]
 800426e:	6085      	str	r5, [r0, #8]
 8004270:	e00e      	b.n	8004290 <_Balloc+0x60>
 8004272:	2221      	movs	r2, #33	; 0x21
 8004274:	2104      	movs	r1, #4
 8004276:	4620      	mov	r0, r4
 8004278:	f000 fb36 	bl	80048e8 <_calloc_r>
 800427c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800427e:	60e8      	str	r0, [r5, #12]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e4      	bne.n	8004250 <_Balloc+0x20>
 8004286:	2000      	movs	r0, #0
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	6802      	ldr	r2, [r0, #0]
 800428c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004290:	2300      	movs	r3, #0
 8004292:	6103      	str	r3, [r0, #16]
 8004294:	60c3      	str	r3, [r0, #12]
 8004296:	bd70      	pop	{r4, r5, r6, pc}

08004298 <_Bfree>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800429c:	4606      	mov	r6, r0
 800429e:	460d      	mov	r5, r1
 80042a0:	b93c      	cbnz	r4, 80042b2 <_Bfree+0x1a>
 80042a2:	2010      	movs	r0, #16
 80042a4:	f7ff fd8a 	bl	8003dbc <malloc>
 80042a8:	6270      	str	r0, [r6, #36]	; 0x24
 80042aa:	6044      	str	r4, [r0, #4]
 80042ac:	6084      	str	r4, [r0, #8]
 80042ae:	6004      	str	r4, [r0, #0]
 80042b0:	60c4      	str	r4, [r0, #12]
 80042b2:	b13d      	cbz	r5, 80042c4 <_Bfree+0x2c>
 80042b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80042b6:	686a      	ldr	r2, [r5, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80042c4:	bd70      	pop	{r4, r5, r6, pc}

080042c6 <__multadd>:
 80042c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ca:	461f      	mov	r7, r3
 80042cc:	4606      	mov	r6, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	2300      	movs	r3, #0
 80042d2:	690d      	ldr	r5, [r1, #16]
 80042d4:	f101 0e14 	add.w	lr, r1, #20
 80042d8:	f8de 0000 	ldr.w	r0, [lr]
 80042dc:	3301      	adds	r3, #1
 80042de:	b281      	uxth	r1, r0
 80042e0:	fb02 7101 	mla	r1, r2, r1, r7
 80042e4:	0c00      	lsrs	r0, r0, #16
 80042e6:	0c0f      	lsrs	r7, r1, #16
 80042e8:	fb02 7000 	mla	r0, r2, r0, r7
 80042ec:	b289      	uxth	r1, r1
 80042ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80042f2:	429d      	cmp	r5, r3
 80042f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80042f8:	f84e 1b04 	str.w	r1, [lr], #4
 80042fc:	dcec      	bgt.n	80042d8 <__multadd+0x12>
 80042fe:	b1d7      	cbz	r7, 8004336 <__multadd+0x70>
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	429d      	cmp	r5, r3
 8004304:	db12      	blt.n	800432c <__multadd+0x66>
 8004306:	6861      	ldr	r1, [r4, #4]
 8004308:	4630      	mov	r0, r6
 800430a:	3101      	adds	r1, #1
 800430c:	f7ff ff90 	bl	8004230 <_Balloc>
 8004310:	4680      	mov	r8, r0
 8004312:	6922      	ldr	r2, [r4, #16]
 8004314:	f104 010c 	add.w	r1, r4, #12
 8004318:	3202      	adds	r2, #2
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	300c      	adds	r0, #12
 800431e:	f7ff ff6f 	bl	8004200 <memcpy>
 8004322:	4621      	mov	r1, r4
 8004324:	4630      	mov	r0, r6
 8004326:	f7ff ffb7 	bl	8004298 <_Bfree>
 800432a:	4644      	mov	r4, r8
 800432c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004330:	3501      	adds	r5, #1
 8004332:	615f      	str	r7, [r3, #20]
 8004334:	6125      	str	r5, [r4, #16]
 8004336:	4620      	mov	r0, r4
 8004338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800433c <__hi0bits>:
 800433c:	0c02      	lsrs	r2, r0, #16
 800433e:	0412      	lsls	r2, r2, #16
 8004340:	4603      	mov	r3, r0
 8004342:	b9b2      	cbnz	r2, 8004372 <__hi0bits+0x36>
 8004344:	0403      	lsls	r3, r0, #16
 8004346:	2010      	movs	r0, #16
 8004348:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800434c:	bf04      	itt	eq
 800434e:	021b      	lsleq	r3, r3, #8
 8004350:	3008      	addeq	r0, #8
 8004352:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004356:	bf04      	itt	eq
 8004358:	011b      	lsleq	r3, r3, #4
 800435a:	3004      	addeq	r0, #4
 800435c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004360:	bf04      	itt	eq
 8004362:	009b      	lsleq	r3, r3, #2
 8004364:	3002      	addeq	r0, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	db06      	blt.n	8004378 <__hi0bits+0x3c>
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	d503      	bpl.n	8004376 <__hi0bits+0x3a>
 800436e:	3001      	adds	r0, #1
 8004370:	4770      	bx	lr
 8004372:	2000      	movs	r0, #0
 8004374:	e7e8      	b.n	8004348 <__hi0bits+0xc>
 8004376:	2020      	movs	r0, #32
 8004378:	4770      	bx	lr

0800437a <__lo0bits>:
 800437a:	6803      	ldr	r3, [r0, #0]
 800437c:	4601      	mov	r1, r0
 800437e:	f013 0207 	ands.w	r2, r3, #7
 8004382:	d00b      	beq.n	800439c <__lo0bits+0x22>
 8004384:	07da      	lsls	r2, r3, #31
 8004386:	d423      	bmi.n	80043d0 <__lo0bits+0x56>
 8004388:	0798      	lsls	r0, r3, #30
 800438a:	bf49      	itett	mi
 800438c:	085b      	lsrmi	r3, r3, #1
 800438e:	089b      	lsrpl	r3, r3, #2
 8004390:	2001      	movmi	r0, #1
 8004392:	600b      	strmi	r3, [r1, #0]
 8004394:	bf5c      	itt	pl
 8004396:	600b      	strpl	r3, [r1, #0]
 8004398:	2002      	movpl	r0, #2
 800439a:	4770      	bx	lr
 800439c:	b298      	uxth	r0, r3
 800439e:	b9a8      	cbnz	r0, 80043cc <__lo0bits+0x52>
 80043a0:	2010      	movs	r0, #16
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043a8:	bf04      	itt	eq
 80043aa:	0a1b      	lsreq	r3, r3, #8
 80043ac:	3008      	addeq	r0, #8
 80043ae:	071a      	lsls	r2, r3, #28
 80043b0:	bf04      	itt	eq
 80043b2:	091b      	lsreq	r3, r3, #4
 80043b4:	3004      	addeq	r0, #4
 80043b6:	079a      	lsls	r2, r3, #30
 80043b8:	bf04      	itt	eq
 80043ba:	089b      	lsreq	r3, r3, #2
 80043bc:	3002      	addeq	r0, #2
 80043be:	07da      	lsls	r2, r3, #31
 80043c0:	d402      	bmi.n	80043c8 <__lo0bits+0x4e>
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	d006      	beq.n	80043d4 <__lo0bits+0x5a>
 80043c6:	3001      	adds	r0, #1
 80043c8:	600b      	str	r3, [r1, #0]
 80043ca:	4770      	bx	lr
 80043cc:	4610      	mov	r0, r2
 80043ce:	e7e9      	b.n	80043a4 <__lo0bits+0x2a>
 80043d0:	2000      	movs	r0, #0
 80043d2:	4770      	bx	lr
 80043d4:	2020      	movs	r0, #32
 80043d6:	4770      	bx	lr

080043d8 <__i2b>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	460c      	mov	r4, r1
 80043dc:	2101      	movs	r1, #1
 80043de:	f7ff ff27 	bl	8004230 <_Balloc>
 80043e2:	2201      	movs	r2, #1
 80043e4:	6144      	str	r4, [r0, #20]
 80043e6:	6102      	str	r2, [r0, #16]
 80043e8:	bd10      	pop	{r4, pc}

080043ea <__multiply>:
 80043ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ee:	4614      	mov	r4, r2
 80043f0:	690a      	ldr	r2, [r1, #16]
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	4689      	mov	r9, r1
 80043f6:	429a      	cmp	r2, r3
 80043f8:	bfbe      	ittt	lt
 80043fa:	460b      	movlt	r3, r1
 80043fc:	46a1      	movlt	r9, r4
 80043fe:	461c      	movlt	r4, r3
 8004400:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004404:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004408:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800440c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004410:	eb07 060a 	add.w	r6, r7, sl
 8004414:	429e      	cmp	r6, r3
 8004416:	bfc8      	it	gt
 8004418:	3101      	addgt	r1, #1
 800441a:	f7ff ff09 	bl	8004230 <_Balloc>
 800441e:	f100 0514 	add.w	r5, r0, #20
 8004422:	462b      	mov	r3, r5
 8004424:	2200      	movs	r2, #0
 8004426:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800442a:	4543      	cmp	r3, r8
 800442c:	d316      	bcc.n	800445c <__multiply+0x72>
 800442e:	f104 0214 	add.w	r2, r4, #20
 8004432:	f109 0114 	add.w	r1, r9, #20
 8004436:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800443a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	9c01      	ldr	r4, [sp, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	4294      	cmp	r4, r2
 8004446:	d80c      	bhi.n	8004462 <__multiply+0x78>
 8004448:	2e00      	cmp	r6, #0
 800444a:	dd03      	ble.n	8004454 <__multiply+0x6a>
 800444c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004450:	2b00      	cmp	r3, #0
 8004452:	d054      	beq.n	80044fe <__multiply+0x114>
 8004454:	6106      	str	r6, [r0, #16]
 8004456:	b003      	add	sp, #12
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445c:	f843 2b04 	str.w	r2, [r3], #4
 8004460:	e7e3      	b.n	800442a <__multiply+0x40>
 8004462:	f8b3 a000 	ldrh.w	sl, [r3]
 8004466:	3204      	adds	r2, #4
 8004468:	f1ba 0f00 	cmp.w	sl, #0
 800446c:	d020      	beq.n	80044b0 <__multiply+0xc6>
 800446e:	46ae      	mov	lr, r5
 8004470:	4689      	mov	r9, r1
 8004472:	f04f 0c00 	mov.w	ip, #0
 8004476:	f859 4b04 	ldr.w	r4, [r9], #4
 800447a:	f8be b000 	ldrh.w	fp, [lr]
 800447e:	b2a3      	uxth	r3, r4
 8004480:	fb0a b303 	mla	r3, sl, r3, fp
 8004484:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004488:	f8de 4000 	ldr.w	r4, [lr]
 800448c:	4463      	add	r3, ip
 800448e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004492:	fb0a c40b 	mla	r4, sl, fp, ip
 8004496:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800449a:	b29b      	uxth	r3, r3
 800449c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80044a0:	454f      	cmp	r7, r9
 80044a2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80044a6:	f84e 3b04 	str.w	r3, [lr], #4
 80044aa:	d8e4      	bhi.n	8004476 <__multiply+0x8c>
 80044ac:	f8ce c000 	str.w	ip, [lr]
 80044b0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80044b4:	f1b9 0f00 	cmp.w	r9, #0
 80044b8:	d01f      	beq.n	80044fa <__multiply+0x110>
 80044ba:	46ae      	mov	lr, r5
 80044bc:	468c      	mov	ip, r1
 80044be:	f04f 0a00 	mov.w	sl, #0
 80044c2:	682b      	ldr	r3, [r5, #0]
 80044c4:	f8bc 4000 	ldrh.w	r4, [ip]
 80044c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	fb09 b404 	mla	r4, r9, r4, fp
 80044d2:	44a2      	add	sl, r4
 80044d4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80044d8:	f84e 3b04 	str.w	r3, [lr], #4
 80044dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80044e0:	f8be 4000 	ldrh.w	r4, [lr]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	fb09 4303 	mla	r3, r9, r3, r4
 80044ea:	4567      	cmp	r7, ip
 80044ec:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80044f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044f4:	d8e6      	bhi.n	80044c4 <__multiply+0xda>
 80044f6:	f8ce 3000 	str.w	r3, [lr]
 80044fa:	3504      	adds	r5, #4
 80044fc:	e7a0      	b.n	8004440 <__multiply+0x56>
 80044fe:	3e01      	subs	r6, #1
 8004500:	e7a2      	b.n	8004448 <__multiply+0x5e>
	...

08004504 <__pow5mult>:
 8004504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004508:	4615      	mov	r5, r2
 800450a:	f012 0203 	ands.w	r2, r2, #3
 800450e:	4606      	mov	r6, r0
 8004510:	460f      	mov	r7, r1
 8004512:	d007      	beq.n	8004524 <__pow5mult+0x20>
 8004514:	4c21      	ldr	r4, [pc, #132]	; (800459c <__pow5mult+0x98>)
 8004516:	3a01      	subs	r2, #1
 8004518:	2300      	movs	r3, #0
 800451a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800451e:	f7ff fed2 	bl	80042c6 <__multadd>
 8004522:	4607      	mov	r7, r0
 8004524:	10ad      	asrs	r5, r5, #2
 8004526:	d035      	beq.n	8004594 <__pow5mult+0x90>
 8004528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800452a:	b93c      	cbnz	r4, 800453c <__pow5mult+0x38>
 800452c:	2010      	movs	r0, #16
 800452e:	f7ff fc45 	bl	8003dbc <malloc>
 8004532:	6270      	str	r0, [r6, #36]	; 0x24
 8004534:	6044      	str	r4, [r0, #4]
 8004536:	6084      	str	r4, [r0, #8]
 8004538:	6004      	str	r4, [r0, #0]
 800453a:	60c4      	str	r4, [r0, #12]
 800453c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004544:	b94c      	cbnz	r4, 800455a <__pow5mult+0x56>
 8004546:	f240 2171 	movw	r1, #625	; 0x271
 800454a:	4630      	mov	r0, r6
 800454c:	f7ff ff44 	bl	80043d8 <__i2b>
 8004550:	2300      	movs	r3, #0
 8004552:	4604      	mov	r4, r0
 8004554:	f8c8 0008 	str.w	r0, [r8, #8]
 8004558:	6003      	str	r3, [r0, #0]
 800455a:	f04f 0800 	mov.w	r8, #0
 800455e:	07eb      	lsls	r3, r5, #31
 8004560:	d50a      	bpl.n	8004578 <__pow5mult+0x74>
 8004562:	4639      	mov	r1, r7
 8004564:	4622      	mov	r2, r4
 8004566:	4630      	mov	r0, r6
 8004568:	f7ff ff3f 	bl	80043ea <__multiply>
 800456c:	4681      	mov	r9, r0
 800456e:	4639      	mov	r1, r7
 8004570:	4630      	mov	r0, r6
 8004572:	f7ff fe91 	bl	8004298 <_Bfree>
 8004576:	464f      	mov	r7, r9
 8004578:	106d      	asrs	r5, r5, #1
 800457a:	d00b      	beq.n	8004594 <__pow5mult+0x90>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	b938      	cbnz	r0, 8004590 <__pow5mult+0x8c>
 8004580:	4622      	mov	r2, r4
 8004582:	4621      	mov	r1, r4
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff ff30 	bl	80043ea <__multiply>
 800458a:	6020      	str	r0, [r4, #0]
 800458c:	f8c0 8000 	str.w	r8, [r0]
 8004590:	4604      	mov	r4, r0
 8004592:	e7e4      	b.n	800455e <__pow5mult+0x5a>
 8004594:	4638      	mov	r0, r7
 8004596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459a:	bf00      	nop
 800459c:	08005108 	.word	0x08005108

080045a0 <__lshift>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	460c      	mov	r4, r1
 80045a6:	4607      	mov	r7, r0
 80045a8:	4616      	mov	r6, r2
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045b0:	eb0a 0903 	add.w	r9, sl, r3
 80045b4:	6849      	ldr	r1, [r1, #4]
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	f109 0501 	add.w	r5, r9, #1
 80045bc:	42ab      	cmp	r3, r5
 80045be:	db31      	blt.n	8004624 <__lshift+0x84>
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff fe35 	bl	8004230 <_Balloc>
 80045c6:	2200      	movs	r2, #0
 80045c8:	4680      	mov	r8, r0
 80045ca:	4611      	mov	r1, r2
 80045cc:	f100 0314 	add.w	r3, r0, #20
 80045d0:	4552      	cmp	r2, sl
 80045d2:	db2a      	blt.n	800462a <__lshift+0x8a>
 80045d4:	6920      	ldr	r0, [r4, #16]
 80045d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045da:	f104 0114 	add.w	r1, r4, #20
 80045de:	f016 021f 	ands.w	r2, r6, #31
 80045e2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80045e6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80045ea:	d022      	beq.n	8004632 <__lshift+0x92>
 80045ec:	2000      	movs	r0, #0
 80045ee:	f1c2 0c20 	rsb	ip, r2, #32
 80045f2:	680e      	ldr	r6, [r1, #0]
 80045f4:	4096      	lsls	r6, r2
 80045f6:	4330      	orrs	r0, r6
 80045f8:	f843 0b04 	str.w	r0, [r3], #4
 80045fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8004600:	458e      	cmp	lr, r1
 8004602:	fa20 f00c 	lsr.w	r0, r0, ip
 8004606:	d8f4      	bhi.n	80045f2 <__lshift+0x52>
 8004608:	6018      	str	r0, [r3, #0]
 800460a:	b108      	cbz	r0, 8004610 <__lshift+0x70>
 800460c:	f109 0502 	add.w	r5, r9, #2
 8004610:	3d01      	subs	r5, #1
 8004612:	4638      	mov	r0, r7
 8004614:	f8c8 5010 	str.w	r5, [r8, #16]
 8004618:	4621      	mov	r1, r4
 800461a:	f7ff fe3d 	bl	8004298 <_Bfree>
 800461e:	4640      	mov	r0, r8
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	3101      	adds	r1, #1
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	e7c8      	b.n	80045bc <__lshift+0x1c>
 800462a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800462e:	3201      	adds	r2, #1
 8004630:	e7ce      	b.n	80045d0 <__lshift+0x30>
 8004632:	3b04      	subs	r3, #4
 8004634:	f851 2b04 	ldr.w	r2, [r1], #4
 8004638:	458e      	cmp	lr, r1
 800463a:	f843 2f04 	str.w	r2, [r3, #4]!
 800463e:	d8f9      	bhi.n	8004634 <__lshift+0x94>
 8004640:	e7e6      	b.n	8004610 <__lshift+0x70>

08004642 <__mcmp>:
 8004642:	6903      	ldr	r3, [r0, #16]
 8004644:	690a      	ldr	r2, [r1, #16]
 8004646:	b530      	push	{r4, r5, lr}
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	d10c      	bne.n	8004666 <__mcmp+0x24>
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	3014      	adds	r0, #20
 8004650:	3114      	adds	r1, #20
 8004652:	1884      	adds	r4, r0, r2
 8004654:	4411      	add	r1, r2
 8004656:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800465a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800465e:	4295      	cmp	r5, r2
 8004660:	d003      	beq.n	800466a <__mcmp+0x28>
 8004662:	d305      	bcc.n	8004670 <__mcmp+0x2e>
 8004664:	2301      	movs	r3, #1
 8004666:	4618      	mov	r0, r3
 8004668:	bd30      	pop	{r4, r5, pc}
 800466a:	42a0      	cmp	r0, r4
 800466c:	d3f3      	bcc.n	8004656 <__mcmp+0x14>
 800466e:	e7fa      	b.n	8004666 <__mcmp+0x24>
 8004670:	f04f 33ff 	mov.w	r3, #4294967295
 8004674:	e7f7      	b.n	8004666 <__mcmp+0x24>

08004676 <__mdiff>:
 8004676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800467a:	460d      	mov	r5, r1
 800467c:	4607      	mov	r7, r0
 800467e:	4611      	mov	r1, r2
 8004680:	4628      	mov	r0, r5
 8004682:	4614      	mov	r4, r2
 8004684:	f7ff ffdd 	bl	8004642 <__mcmp>
 8004688:	1e06      	subs	r6, r0, #0
 800468a:	d108      	bne.n	800469e <__mdiff+0x28>
 800468c:	4631      	mov	r1, r6
 800468e:	4638      	mov	r0, r7
 8004690:	f7ff fdce 	bl	8004230 <_Balloc>
 8004694:	2301      	movs	r3, #1
 8004696:	6146      	str	r6, [r0, #20]
 8004698:	6103      	str	r3, [r0, #16]
 800469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469e:	bfa4      	itt	ge
 80046a0:	4623      	movge	r3, r4
 80046a2:	462c      	movge	r4, r5
 80046a4:	4638      	mov	r0, r7
 80046a6:	6861      	ldr	r1, [r4, #4]
 80046a8:	bfa6      	itte	ge
 80046aa:	461d      	movge	r5, r3
 80046ac:	2600      	movge	r6, #0
 80046ae:	2601      	movlt	r6, #1
 80046b0:	f7ff fdbe 	bl	8004230 <_Balloc>
 80046b4:	f04f 0c00 	mov.w	ip, #0
 80046b8:	60c6      	str	r6, [r0, #12]
 80046ba:	692b      	ldr	r3, [r5, #16]
 80046bc:	6926      	ldr	r6, [r4, #16]
 80046be:	f104 0214 	add.w	r2, r4, #20
 80046c2:	f105 0914 	add.w	r9, r5, #20
 80046c6:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80046ca:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80046ce:	f100 0114 	add.w	r1, r0, #20
 80046d2:	f852 ab04 	ldr.w	sl, [r2], #4
 80046d6:	f859 5b04 	ldr.w	r5, [r9], #4
 80046da:	fa1f f38a 	uxth.w	r3, sl
 80046de:	4463      	add	r3, ip
 80046e0:	b2ac      	uxth	r4, r5
 80046e2:	1b1b      	subs	r3, r3, r4
 80046e4:	0c2c      	lsrs	r4, r5, #16
 80046e6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80046ea:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80046f4:	45c8      	cmp	r8, r9
 80046f6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80046fa:	4696      	mov	lr, r2
 80046fc:	f841 4b04 	str.w	r4, [r1], #4
 8004700:	d8e7      	bhi.n	80046d2 <__mdiff+0x5c>
 8004702:	45be      	cmp	lr, r7
 8004704:	d305      	bcc.n	8004712 <__mdiff+0x9c>
 8004706:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800470a:	b18b      	cbz	r3, 8004730 <__mdiff+0xba>
 800470c:	6106      	str	r6, [r0, #16]
 800470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004712:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004716:	b2a2      	uxth	r2, r4
 8004718:	4462      	add	r2, ip
 800471a:	1413      	asrs	r3, r2, #16
 800471c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004720:	b292      	uxth	r2, r2
 8004722:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004726:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800472a:	f841 2b04 	str.w	r2, [r1], #4
 800472e:	e7e8      	b.n	8004702 <__mdiff+0x8c>
 8004730:	3e01      	subs	r6, #1
 8004732:	e7e8      	b.n	8004706 <__mdiff+0x90>

08004734 <__d2b>:
 8004734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004738:	461c      	mov	r4, r3
 800473a:	2101      	movs	r1, #1
 800473c:	4690      	mov	r8, r2
 800473e:	9e08      	ldr	r6, [sp, #32]
 8004740:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004742:	f7ff fd75 	bl	8004230 <_Balloc>
 8004746:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800474a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800474e:	4607      	mov	r7, r0
 8004750:	bb34      	cbnz	r4, 80047a0 <__d2b+0x6c>
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	f1b8 0f00 	cmp.w	r8, #0
 8004758:	d027      	beq.n	80047aa <__d2b+0x76>
 800475a:	a802      	add	r0, sp, #8
 800475c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004760:	f7ff fe0b 	bl	800437a <__lo0bits>
 8004764:	9900      	ldr	r1, [sp, #0]
 8004766:	b1f0      	cbz	r0, 80047a6 <__d2b+0x72>
 8004768:	9a01      	ldr	r2, [sp, #4]
 800476a:	f1c0 0320 	rsb	r3, r0, #32
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	430b      	orrs	r3, r1
 8004774:	40c2      	lsrs	r2, r0
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	9201      	str	r2, [sp, #4]
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf14      	ite	ne
 8004780:	2102      	movne	r1, #2
 8004782:	2101      	moveq	r1, #1
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	6139      	str	r1, [r7, #16]
 8004788:	b1c4      	cbz	r4, 80047bc <__d2b+0x88>
 800478a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800478e:	4404      	add	r4, r0
 8004790:	6034      	str	r4, [r6, #0]
 8004792:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004796:	6028      	str	r0, [r5, #0]
 8004798:	4638      	mov	r0, r7
 800479a:	b002      	add	sp, #8
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047a4:	e7d5      	b.n	8004752 <__d2b+0x1e>
 80047a6:	6179      	str	r1, [r7, #20]
 80047a8:	e7e7      	b.n	800477a <__d2b+0x46>
 80047aa:	a801      	add	r0, sp, #4
 80047ac:	f7ff fde5 	bl	800437a <__lo0bits>
 80047b0:	2101      	movs	r1, #1
 80047b2:	9b01      	ldr	r3, [sp, #4]
 80047b4:	6139      	str	r1, [r7, #16]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	3020      	adds	r0, #32
 80047ba:	e7e5      	b.n	8004788 <__d2b+0x54>
 80047bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047c0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80047c4:	6030      	str	r0, [r6, #0]
 80047c6:	6918      	ldr	r0, [r3, #16]
 80047c8:	f7ff fdb8 	bl	800433c <__hi0bits>
 80047cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80047d0:	e7e1      	b.n	8004796 <__d2b+0x62>
	...

080047d4 <_sbrk_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	2300      	movs	r3, #0
 80047d8:	4c05      	ldr	r4, [pc, #20]	; (80047f0 <_sbrk_r+0x1c>)
 80047da:	4605      	mov	r5, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	f000 fb80 	bl	8004ee4 <_sbrk>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_sbrk_r+0x1a>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_sbrk_r+0x1a>
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	200007d0 	.word	0x200007d0

080047f4 <__ssprint_r>:
 80047f4:	6893      	ldr	r3, [r2, #8]
 80047f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047fa:	4681      	mov	r9, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	4617      	mov	r7, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d060      	beq.n	80048c6 <__ssprint_r+0xd2>
 8004804:	f04f 0b00 	mov.w	fp, #0
 8004808:	465e      	mov	r6, fp
 800480a:	f8d2 a000 	ldr.w	sl, [r2]
 800480e:	b356      	cbz	r6, 8004866 <__ssprint_r+0x72>
 8004810:	68a3      	ldr	r3, [r4, #8]
 8004812:	429e      	cmp	r6, r3
 8004814:	d344      	bcc.n	80048a0 <__ssprint_r+0xac>
 8004816:	89a2      	ldrh	r2, [r4, #12]
 8004818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800481c:	d03e      	beq.n	800489c <__ssprint_r+0xa8>
 800481e:	2302      	movs	r3, #2
 8004820:	6825      	ldr	r5, [r4, #0]
 8004822:	6921      	ldr	r1, [r4, #16]
 8004824:	eba5 0801 	sub.w	r8, r5, r1
 8004828:	6965      	ldr	r5, [r4, #20]
 800482a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800482e:	fb95 f5f3 	sdiv	r5, r5, r3
 8004832:	f108 0301 	add.w	r3, r8, #1
 8004836:	4433      	add	r3, r6
 8004838:	429d      	cmp	r5, r3
 800483a:	bf38      	it	cc
 800483c:	461d      	movcc	r5, r3
 800483e:	0553      	lsls	r3, r2, #21
 8004840:	d546      	bpl.n	80048d0 <__ssprint_r+0xdc>
 8004842:	4629      	mov	r1, r5
 8004844:	4648      	mov	r0, r9
 8004846:	f7ff fac1 	bl	8003dcc <_malloc_r>
 800484a:	b998      	cbnz	r0, 8004874 <__ssprint_r+0x80>
 800484c:	230c      	movs	r3, #12
 800484e:	f8c9 3000 	str.w	r3, [r9]
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	e031      	b.n	80048ca <__ssprint_r+0xd6>
 8004866:	f8da b000 	ldr.w	fp, [sl]
 800486a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800486e:	f10a 0a08 	add.w	sl, sl, #8
 8004872:	e7cc      	b.n	800480e <__ssprint_r+0x1a>
 8004874:	4642      	mov	r2, r8
 8004876:	6921      	ldr	r1, [r4, #16]
 8004878:	9001      	str	r0, [sp, #4]
 800487a:	f7ff fcc1 	bl	8004200 <memcpy>
 800487e:	89a2      	ldrh	r2, [r4, #12]
 8004880:	9b01      	ldr	r3, [sp, #4]
 8004882:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800488a:	81a2      	strh	r2, [r4, #12]
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	4443      	add	r3, r8
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	4633      	mov	r3, r6
 8004894:	6165      	str	r5, [r4, #20]
 8004896:	eba5 0508 	sub.w	r5, r5, r8
 800489a:	60a5      	str	r5, [r4, #8]
 800489c:	429e      	cmp	r6, r3
 800489e:	d200      	bcs.n	80048a2 <__ssprint_r+0xae>
 80048a0:	4633      	mov	r3, r6
 80048a2:	461a      	mov	r2, r3
 80048a4:	4659      	mov	r1, fp
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	f000 f971 	bl	8004b90 <memmove>
 80048ae:	68a2      	ldr	r2, [r4, #8]
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	1ad2      	subs	r2, r2, r3
 80048b4:	60a2      	str	r2, [r4, #8]
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	4413      	add	r3, r2
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	1b9e      	subs	r6, r3, r6
 80048c0:	60be      	str	r6, [r7, #8]
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d1cf      	bne.n	8004866 <__ssprint_r+0x72>
 80048c6:	2000      	movs	r0, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	b003      	add	sp, #12
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d0:	462a      	mov	r2, r5
 80048d2:	4648      	mov	r0, r9
 80048d4:	f000 f976 	bl	8004bc4 <_realloc_r>
 80048d8:	4603      	mov	r3, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	d1d6      	bne.n	800488c <__ssprint_r+0x98>
 80048de:	6921      	ldr	r1, [r4, #16]
 80048e0:	4648      	mov	r0, r9
 80048e2:	f000 f885 	bl	80049f0 <_free_r>
 80048e6:	e7b1      	b.n	800484c <__ssprint_r+0x58>

080048e8 <_calloc_r>:
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4351      	muls	r1, r2
 80048ec:	f7ff fa6e 	bl	8003dcc <_malloc_r>
 80048f0:	4604      	mov	r4, r0
 80048f2:	b198      	cbz	r0, 800491c <_calloc_r+0x34>
 80048f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80048f8:	f022 0203 	bic.w	r2, r2, #3
 80048fc:	3a04      	subs	r2, #4
 80048fe:	2a24      	cmp	r2, #36	; 0x24
 8004900:	d81b      	bhi.n	800493a <_calloc_r+0x52>
 8004902:	2a13      	cmp	r2, #19
 8004904:	d917      	bls.n	8004936 <_calloc_r+0x4e>
 8004906:	2100      	movs	r1, #0
 8004908:	2a1b      	cmp	r2, #27
 800490a:	6001      	str	r1, [r0, #0]
 800490c:	6041      	str	r1, [r0, #4]
 800490e:	d807      	bhi.n	8004920 <_calloc_r+0x38>
 8004910:	f100 0308 	add.w	r3, r0, #8
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	4620      	mov	r0, r4
 800491e:	bd10      	pop	{r4, pc}
 8004920:	2a24      	cmp	r2, #36	; 0x24
 8004922:	6081      	str	r1, [r0, #8]
 8004924:	60c1      	str	r1, [r0, #12]
 8004926:	bf11      	iteee	ne
 8004928:	f100 0310 	addne.w	r3, r0, #16
 800492c:	6101      	streq	r1, [r0, #16]
 800492e:	f100 0318 	addeq.w	r3, r0, #24
 8004932:	6141      	streq	r1, [r0, #20]
 8004934:	e7ee      	b.n	8004914 <_calloc_r+0x2c>
 8004936:	4603      	mov	r3, r0
 8004938:	e7ec      	b.n	8004914 <_calloc_r+0x2c>
 800493a:	2100      	movs	r1, #0
 800493c:	f7fd fbbc 	bl	80020b8 <memset>
 8004940:	e7ec      	b.n	800491c <_calloc_r+0x34>
	...

08004944 <_malloc_trim_r>:
 8004944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004948:	4689      	mov	r9, r1
 800494a:	4f25      	ldr	r7, [pc, #148]	; (80049e0 <_malloc_trim_r+0x9c>)
 800494c:	4606      	mov	r6, r0
 800494e:	f7ff fc63 	bl	8004218 <__malloc_lock>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80049ec <_malloc_trim_r+0xa8>
 8004958:	685d      	ldr	r5, [r3, #4]
 800495a:	f1a8 0411 	sub.w	r4, r8, #17
 800495e:	f025 0503 	bic.w	r5, r5, #3
 8004962:	eba4 0409 	sub.w	r4, r4, r9
 8004966:	442c      	add	r4, r5
 8004968:	fbb4 f4f8 	udiv	r4, r4, r8
 800496c:	3c01      	subs	r4, #1
 800496e:	fb08 f404 	mul.w	r4, r8, r4
 8004972:	4544      	cmp	r4, r8
 8004974:	da05      	bge.n	8004982 <_malloc_trim_r+0x3e>
 8004976:	4630      	mov	r0, r6
 8004978:	f7ff fc54 	bl	8004224 <__malloc_unlock>
 800497c:	2000      	movs	r0, #0
 800497e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004982:	2100      	movs	r1, #0
 8004984:	4630      	mov	r0, r6
 8004986:	f7ff ff25 	bl	80047d4 <_sbrk_r>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	442b      	add	r3, r5
 800498e:	4298      	cmp	r0, r3
 8004990:	d1f1      	bne.n	8004976 <_malloc_trim_r+0x32>
 8004992:	4261      	negs	r1, r4
 8004994:	4630      	mov	r0, r6
 8004996:	f7ff ff1d 	bl	80047d4 <_sbrk_r>
 800499a:	3001      	adds	r0, #1
 800499c:	d110      	bne.n	80049c0 <_malloc_trim_r+0x7c>
 800499e:	2100      	movs	r1, #0
 80049a0:	4630      	mov	r0, r6
 80049a2:	f7ff ff17 	bl	80047d4 <_sbrk_r>
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	1a83      	subs	r3, r0, r2
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	dde3      	ble.n	8004976 <_malloc_trim_r+0x32>
 80049ae:	490d      	ldr	r1, [pc, #52]	; (80049e4 <_malloc_trim_r+0xa0>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6809      	ldr	r1, [r1, #0]
 80049b6:	6053      	str	r3, [r2, #4]
 80049b8:	1a40      	subs	r0, r0, r1
 80049ba:	490b      	ldr	r1, [pc, #44]	; (80049e8 <_malloc_trim_r+0xa4>)
 80049bc:	6008      	str	r0, [r1, #0]
 80049be:	e7da      	b.n	8004976 <_malloc_trim_r+0x32>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <_malloc_trim_r+0xa4>)
 80049c4:	1b2d      	subs	r5, r5, r4
 80049c6:	f045 0501 	orr.w	r5, r5, #1
 80049ca:	605d      	str	r5, [r3, #4]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	4630      	mov	r0, r6
 80049d0:	1b1c      	subs	r4, r3, r4
 80049d2:	6014      	str	r4, [r2, #0]
 80049d4:	f7ff fc26 	bl	8004224 <__malloc_unlock>
 80049d8:	2001      	movs	r0, #1
 80049da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049de:	bf00      	nop
 80049e0:	2000014c 	.word	0x2000014c
 80049e4:	20000554 	.word	0x20000554
 80049e8:	200006ec 	.word	0x200006ec
 80049ec:	00000080 	.word	0x00000080

080049f0 <_free_r>:
 80049f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f4:	4604      	mov	r4, r0
 80049f6:	4688      	mov	r8, r1
 80049f8:	2900      	cmp	r1, #0
 80049fa:	f000 80ab 	beq.w	8004b54 <_free_r+0x164>
 80049fe:	f7ff fc0b 	bl	8004218 <__malloc_lock>
 8004a02:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004a06:	4d54      	ldr	r5, [pc, #336]	; (8004b58 <_free_r+0x168>)
 8004a08:	f022 0001 	bic.w	r0, r2, #1
 8004a0c:	f1a8 0308 	sub.w	r3, r8, #8
 8004a10:	181f      	adds	r7, r3, r0
 8004a12:	68a9      	ldr	r1, [r5, #8]
 8004a14:	687e      	ldr	r6, [r7, #4]
 8004a16:	428f      	cmp	r7, r1
 8004a18:	f026 0603 	bic.w	r6, r6, #3
 8004a1c:	f002 0201 	and.w	r2, r2, #1
 8004a20:	d11b      	bne.n	8004a5a <_free_r+0x6a>
 8004a22:	4430      	add	r0, r6
 8004a24:	b93a      	cbnz	r2, 8004a36 <_free_r+0x46>
 8004a26:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	4410      	add	r0, r2
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	60ca      	str	r2, [r1, #12]
 8004a34:	6091      	str	r1, [r2, #8]
 8004a36:	f040 0201 	orr.w	r2, r0, #1
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	60ab      	str	r3, [r5, #8]
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <_free_r+0x16c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4298      	cmp	r0, r3
 8004a44:	d304      	bcc.n	8004a50 <_free_r+0x60>
 8004a46:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <_free_r+0x170>)
 8004a48:	4620      	mov	r0, r4
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	f7ff ff7a 	bl	8004944 <_malloc_trim_r>
 8004a50:	4620      	mov	r0, r4
 8004a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a56:	f7ff bbe5 	b.w	8004224 <__malloc_unlock>
 8004a5a:	607e      	str	r6, [r7, #4]
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	d139      	bne.n	8004ad4 <_free_r+0xe4>
 8004a60:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004a64:	f105 0e08 	add.w	lr, r5, #8
 8004a68:	1a5b      	subs	r3, r3, r1
 8004a6a:	4408      	add	r0, r1
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	4571      	cmp	r1, lr
 8004a70:	d032      	beq.n	8004ad8 <_free_r+0xe8>
 8004a72:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8004a76:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004a7a:	f8ce 1008 	str.w	r1, [lr, #8]
 8004a7e:	19b9      	adds	r1, r7, r6
 8004a80:	6849      	ldr	r1, [r1, #4]
 8004a82:	07c9      	lsls	r1, r1, #31
 8004a84:	d40a      	bmi.n	8004a9c <_free_r+0xac>
 8004a86:	4430      	add	r0, r6
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	bb3a      	cbnz	r2, 8004adc <_free_r+0xec>
 8004a8c:	4e35      	ldr	r6, [pc, #212]	; (8004b64 <_free_r+0x174>)
 8004a8e:	42b1      	cmp	r1, r6
 8004a90:	d124      	bne.n	8004adc <_free_r+0xec>
 8004a92:	2201      	movs	r2, #1
 8004a94:	616b      	str	r3, [r5, #20]
 8004a96:	612b      	str	r3, [r5, #16]
 8004a98:	60d9      	str	r1, [r3, #12]
 8004a9a:	6099      	str	r1, [r3, #8]
 8004a9c:	f040 0101 	orr.w	r1, r0, #1
 8004aa0:	6059      	str	r1, [r3, #4]
 8004aa2:	5018      	str	r0, [r3, r0]
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	d1d3      	bne.n	8004a50 <_free_r+0x60>
 8004aa8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004aac:	d21a      	bcs.n	8004ae4 <_free_r+0xf4>
 8004aae:	2201      	movs	r2, #1
 8004ab0:	08c0      	lsrs	r0, r0, #3
 8004ab2:	1081      	asrs	r1, r0, #2
 8004ab4:	408a      	lsls	r2, r1
 8004ab6:	6869      	ldr	r1, [r5, #4]
 8004ab8:	3001      	adds	r0, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	606a      	str	r2, [r5, #4]
 8004abe:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004ac2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004ac6:	3a08      	subs	r2, #8
 8004ac8:	60da      	str	r2, [r3, #12]
 8004aca:	6099      	str	r1, [r3, #8]
 8004acc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004ad0:	60cb      	str	r3, [r1, #12]
 8004ad2:	e7bd      	b.n	8004a50 <_free_r+0x60>
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	e7d2      	b.n	8004a7e <_free_r+0x8e>
 8004ad8:	2201      	movs	r2, #1
 8004ada:	e7d0      	b.n	8004a7e <_free_r+0x8e>
 8004adc:	68fe      	ldr	r6, [r7, #12]
 8004ade:	60ce      	str	r6, [r1, #12]
 8004ae0:	60b1      	str	r1, [r6, #8]
 8004ae2:	e7db      	b.n	8004a9c <_free_r+0xac>
 8004ae4:	0a42      	lsrs	r2, r0, #9
 8004ae6:	2a04      	cmp	r2, #4
 8004ae8:	d813      	bhi.n	8004b12 <_free_r+0x122>
 8004aea:	0982      	lsrs	r2, r0, #6
 8004aec:	3238      	adds	r2, #56	; 0x38
 8004aee:	1c51      	adds	r1, r2, #1
 8004af0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004af4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004af8:	428e      	cmp	r6, r1
 8004afa:	d124      	bne.n	8004b46 <_free_r+0x156>
 8004afc:	2001      	movs	r0, #1
 8004afe:	1092      	asrs	r2, r2, #2
 8004b00:	fa00 f202 	lsl.w	r2, r0, r2
 8004b04:	6868      	ldr	r0, [r5, #4]
 8004b06:	4302      	orrs	r2, r0
 8004b08:	606a      	str	r2, [r5, #4]
 8004b0a:	60de      	str	r6, [r3, #12]
 8004b0c:	6099      	str	r1, [r3, #8]
 8004b0e:	60b3      	str	r3, [r6, #8]
 8004b10:	e7de      	b.n	8004ad0 <_free_r+0xe0>
 8004b12:	2a14      	cmp	r2, #20
 8004b14:	d801      	bhi.n	8004b1a <_free_r+0x12a>
 8004b16:	325b      	adds	r2, #91	; 0x5b
 8004b18:	e7e9      	b.n	8004aee <_free_r+0xfe>
 8004b1a:	2a54      	cmp	r2, #84	; 0x54
 8004b1c:	d802      	bhi.n	8004b24 <_free_r+0x134>
 8004b1e:	0b02      	lsrs	r2, r0, #12
 8004b20:	326e      	adds	r2, #110	; 0x6e
 8004b22:	e7e4      	b.n	8004aee <_free_r+0xfe>
 8004b24:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004b28:	d802      	bhi.n	8004b30 <_free_r+0x140>
 8004b2a:	0bc2      	lsrs	r2, r0, #15
 8004b2c:	3277      	adds	r2, #119	; 0x77
 8004b2e:	e7de      	b.n	8004aee <_free_r+0xfe>
 8004b30:	f240 5154 	movw	r1, #1364	; 0x554
 8004b34:	428a      	cmp	r2, r1
 8004b36:	bf9a      	itte	ls
 8004b38:	0c82      	lsrls	r2, r0, #18
 8004b3a:	327c      	addls	r2, #124	; 0x7c
 8004b3c:	227e      	movhi	r2, #126	; 0x7e
 8004b3e:	e7d6      	b.n	8004aee <_free_r+0xfe>
 8004b40:	6889      	ldr	r1, [r1, #8]
 8004b42:	428e      	cmp	r6, r1
 8004b44:	d004      	beq.n	8004b50 <_free_r+0x160>
 8004b46:	684a      	ldr	r2, [r1, #4]
 8004b48:	f022 0203 	bic.w	r2, r2, #3
 8004b4c:	4290      	cmp	r0, r2
 8004b4e:	d3f7      	bcc.n	8004b40 <_free_r+0x150>
 8004b50:	68ce      	ldr	r6, [r1, #12]
 8004b52:	e7da      	b.n	8004b0a <_free_r+0x11a>
 8004b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b58:	2000014c 	.word	0x2000014c
 8004b5c:	20000558 	.word	0x20000558
 8004b60:	2000071c 	.word	0x2000071c
 8004b64:	20000154 	.word	0x20000154

08004b68 <__retarget_lock_acquire_recursive>:
 8004b68:	4770      	bx	lr

08004b6a <__retarget_lock_release_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <__ascii_mbtowc>:
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	b901      	cbnz	r1, 8004b72 <__ascii_mbtowc+0x6>
 8004b70:	a901      	add	r1, sp, #4
 8004b72:	b142      	cbz	r2, 8004b86 <__ascii_mbtowc+0x1a>
 8004b74:	b14b      	cbz	r3, 8004b8a <__ascii_mbtowc+0x1e>
 8004b76:	7813      	ldrb	r3, [r2, #0]
 8004b78:	600b      	str	r3, [r1, #0]
 8004b7a:	7812      	ldrb	r2, [r2, #0]
 8004b7c:	1c10      	adds	r0, r2, #0
 8004b7e:	bf18      	it	ne
 8004b80:	2001      	movne	r0, #1
 8004b82:	b002      	add	sp, #8
 8004b84:	4770      	bx	lr
 8004b86:	4610      	mov	r0, r2
 8004b88:	e7fb      	b.n	8004b82 <__ascii_mbtowc+0x16>
 8004b8a:	f06f 0001 	mvn.w	r0, #1
 8004b8e:	e7f8      	b.n	8004b82 <__ascii_mbtowc+0x16>

08004b90 <memmove>:
 8004b90:	4288      	cmp	r0, r1
 8004b92:	b510      	push	{r4, lr}
 8004b94:	eb01 0302 	add.w	r3, r1, r2
 8004b98:	d803      	bhi.n	8004ba2 <memmove+0x12>
 8004b9a:	1e42      	subs	r2, r0, #1
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d10c      	bne.n	8004bba <memmove+0x2a>
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	4298      	cmp	r0, r3
 8004ba4:	d2f9      	bcs.n	8004b9a <memmove+0xa>
 8004ba6:	1881      	adds	r1, r0, r2
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	42d3      	cmn	r3, r2
 8004bac:	d100      	bne.n	8004bb0 <memmove+0x20>
 8004bae:	bd10      	pop	{r4, pc}
 8004bb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004bb8:	e7f7      	b.n	8004baa <memmove+0x1a>
 8004bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bbe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004bc2:	e7eb      	b.n	8004b9c <memmove+0xc>

08004bc4 <_realloc_r>:
 8004bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc8:	4682      	mov	sl, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	b929      	cbnz	r1, 8004bda <_realloc_r+0x16>
 8004bce:	4611      	mov	r1, r2
 8004bd0:	b003      	add	sp, #12
 8004bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd6:	f7ff b8f9 	b.w	8003dcc <_malloc_r>
 8004bda:	9201      	str	r2, [sp, #4]
 8004bdc:	f7ff fb1c 	bl	8004218 <__malloc_lock>
 8004be0:	9a01      	ldr	r2, [sp, #4]
 8004be2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004be6:	f102 080b 	add.w	r8, r2, #11
 8004bea:	f1b8 0f16 	cmp.w	r8, #22
 8004bee:	f1a4 0908 	sub.w	r9, r4, #8
 8004bf2:	f025 0603 	bic.w	r6, r5, #3
 8004bf6:	d90a      	bls.n	8004c0e <_realloc_r+0x4a>
 8004bf8:	f038 0807 	bics.w	r8, r8, #7
 8004bfc:	d509      	bpl.n	8004c12 <_realloc_r+0x4e>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	2700      	movs	r7, #0
 8004c02:	f8ca 3000 	str.w	r3, [sl]
 8004c06:	4638      	mov	r0, r7
 8004c08:	b003      	add	sp, #12
 8004c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c0e:	f04f 0810 	mov.w	r8, #16
 8004c12:	4590      	cmp	r8, r2
 8004c14:	d3f3      	bcc.n	8004bfe <_realloc_r+0x3a>
 8004c16:	45b0      	cmp	r8, r6
 8004c18:	f340 8148 	ble.w	8004eac <_realloc_r+0x2e8>
 8004c1c:	4ba9      	ldr	r3, [pc, #676]	; (8004ec4 <_realloc_r+0x300>)
 8004c1e:	eb09 0106 	add.w	r1, r9, r6
 8004c22:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8004c26:	469b      	mov	fp, r3
 8004c28:	4571      	cmp	r1, lr
 8004c2a:	684b      	ldr	r3, [r1, #4]
 8004c2c:	d005      	beq.n	8004c3a <_realloc_r+0x76>
 8004c2e:	f023 0001 	bic.w	r0, r3, #1
 8004c32:	4408      	add	r0, r1
 8004c34:	6840      	ldr	r0, [r0, #4]
 8004c36:	07c7      	lsls	r7, r0, #31
 8004c38:	d447      	bmi.n	8004cca <_realloc_r+0x106>
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	4571      	cmp	r1, lr
 8004c40:	eb06 0703 	add.w	r7, r6, r3
 8004c44:	d119      	bne.n	8004c7a <_realloc_r+0xb6>
 8004c46:	f108 0010 	add.w	r0, r8, #16
 8004c4a:	4287      	cmp	r7, r0
 8004c4c:	db3f      	blt.n	8004cce <_realloc_r+0x10a>
 8004c4e:	eba7 0708 	sub.w	r7, r7, r8
 8004c52:	eb09 0308 	add.w	r3, r9, r8
 8004c56:	f047 0701 	orr.w	r7, r7, #1
 8004c5a:	f8cb 3008 	str.w	r3, [fp, #8]
 8004c5e:	605f      	str	r7, [r3, #4]
 8004c60:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004c64:	4650      	mov	r0, sl
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	ea43 0308 	orr.w	r3, r3, r8
 8004c6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c72:	f7ff fad7 	bl	8004224 <__malloc_unlock>
 8004c76:	4627      	mov	r7, r4
 8004c78:	e7c5      	b.n	8004c06 <_realloc_r+0x42>
 8004c7a:	45b8      	cmp	r8, r7
 8004c7c:	dc27      	bgt.n	8004cce <_realloc_r+0x10a>
 8004c7e:	68cb      	ldr	r3, [r1, #12]
 8004c80:	688a      	ldr	r2, [r1, #8]
 8004c82:	60d3      	str	r3, [r2, #12]
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	eba7 0008 	sub.w	r0, r7, r8
 8004c8a:	280f      	cmp	r0, #15
 8004c8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004c90:	eb09 0207 	add.w	r2, r9, r7
 8004c94:	f240 810c 	bls.w	8004eb0 <_realloc_r+0x2ec>
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	eb09 0108 	add.w	r1, r9, r8
 8004ca0:	ea43 0308 	orr.w	r3, r3, r8
 8004ca4:	f040 0001 	orr.w	r0, r0, #1
 8004ca8:	f8c9 3004 	str.w	r3, [r9, #4]
 8004cac:	6048      	str	r0, [r1, #4]
 8004cae:	6853      	ldr	r3, [r2, #4]
 8004cb0:	3108      	adds	r1, #8
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6053      	str	r3, [r2, #4]
 8004cb8:	4650      	mov	r0, sl
 8004cba:	f7ff fe99 	bl	80049f0 <_free_r>
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	f7ff fab0 	bl	8004224 <__malloc_unlock>
 8004cc4:	f109 0708 	add.w	r7, r9, #8
 8004cc8:	e79d      	b.n	8004c06 <_realloc_r+0x42>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	07e8      	lsls	r0, r5, #31
 8004cd0:	f100 8085 	bmi.w	8004dde <_realloc_r+0x21a>
 8004cd4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8004cd8:	eba9 0505 	sub.w	r5, r9, r5
 8004cdc:	6868      	ldr	r0, [r5, #4]
 8004cde:	f020 0003 	bic.w	r0, r0, #3
 8004ce2:	4430      	add	r0, r6
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	d077      	beq.n	8004dd8 <_realloc_r+0x214>
 8004ce8:	4571      	cmp	r1, lr
 8004cea:	d151      	bne.n	8004d90 <_realloc_r+0x1cc>
 8004cec:	4403      	add	r3, r0
 8004cee:	f108 0110 	add.w	r1, r8, #16
 8004cf2:	428b      	cmp	r3, r1
 8004cf4:	db70      	blt.n	8004dd8 <_realloc_r+0x214>
 8004cf6:	462f      	mov	r7, r5
 8004cf8:	68ea      	ldr	r2, [r5, #12]
 8004cfa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004cfe:	60ca      	str	r2, [r1, #12]
 8004d00:	6091      	str	r1, [r2, #8]
 8004d02:	1f32      	subs	r2, r6, #4
 8004d04:	2a24      	cmp	r2, #36	; 0x24
 8004d06:	d83c      	bhi.n	8004d82 <_realloc_r+0x1be>
 8004d08:	2a13      	cmp	r2, #19
 8004d0a:	d937      	bls.n	8004d7c <_realloc_r+0x1b8>
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	2a1b      	cmp	r2, #27
 8004d10:	60a9      	str	r1, [r5, #8]
 8004d12:	6861      	ldr	r1, [r4, #4]
 8004d14:	60e9      	str	r1, [r5, #12]
 8004d16:	d81c      	bhi.n	8004d52 <_realloc_r+0x18e>
 8004d18:	f105 0210 	add.w	r2, r5, #16
 8004d1c:	f104 0108 	add.w	r1, r4, #8
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	6010      	str	r0, [r2, #0]
 8004d24:	6848      	ldr	r0, [r1, #4]
 8004d26:	6050      	str	r0, [r2, #4]
 8004d28:	6889      	ldr	r1, [r1, #8]
 8004d2a:	6091      	str	r1, [r2, #8]
 8004d2c:	eba3 0308 	sub.w	r3, r3, r8
 8004d30:	eb05 0208 	add.w	r2, r5, r8
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	f8cb 2008 	str.w	r2, [fp, #8]
 8004d3c:	6053      	str	r3, [r2, #4]
 8004d3e:	686b      	ldr	r3, [r5, #4]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	ea43 0308 	orr.w	r3, r3, r8
 8004d48:	606b      	str	r3, [r5, #4]
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	f7ff fa6a 	bl	8004224 <__malloc_unlock>
 8004d50:	e759      	b.n	8004c06 <_realloc_r+0x42>
 8004d52:	68a1      	ldr	r1, [r4, #8]
 8004d54:	2a24      	cmp	r2, #36	; 0x24
 8004d56:	6129      	str	r1, [r5, #16]
 8004d58:	68e1      	ldr	r1, [r4, #12]
 8004d5a:	bf18      	it	ne
 8004d5c:	f105 0218 	addne.w	r2, r5, #24
 8004d60:	6169      	str	r1, [r5, #20]
 8004d62:	bf09      	itett	eq
 8004d64:	6922      	ldreq	r2, [r4, #16]
 8004d66:	f104 0110 	addne.w	r1, r4, #16
 8004d6a:	61aa      	streq	r2, [r5, #24]
 8004d6c:	6960      	ldreq	r0, [r4, #20]
 8004d6e:	bf02      	ittt	eq
 8004d70:	f105 0220 	addeq.w	r2, r5, #32
 8004d74:	f104 0118 	addeq.w	r1, r4, #24
 8004d78:	61e8      	streq	r0, [r5, #28]
 8004d7a:	e7d1      	b.n	8004d20 <_realloc_r+0x15c>
 8004d7c:	463a      	mov	r2, r7
 8004d7e:	4621      	mov	r1, r4
 8004d80:	e7ce      	b.n	8004d20 <_realloc_r+0x15c>
 8004d82:	4621      	mov	r1, r4
 8004d84:	4638      	mov	r0, r7
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	f7ff ff02 	bl	8004b90 <memmove>
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	e7cd      	b.n	8004d2c <_realloc_r+0x168>
 8004d90:	18c7      	adds	r7, r0, r3
 8004d92:	45b8      	cmp	r8, r7
 8004d94:	dc20      	bgt.n	8004dd8 <_realloc_r+0x214>
 8004d96:	68cb      	ldr	r3, [r1, #12]
 8004d98:	688a      	ldr	r2, [r1, #8]
 8004d9a:	60d3      	str	r3, [r2, #12]
 8004d9c:	609a      	str	r2, [r3, #8]
 8004d9e:	4628      	mov	r0, r5
 8004da0:	68eb      	ldr	r3, [r5, #12]
 8004da2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8004da6:	60d3      	str	r3, [r2, #12]
 8004da8:	609a      	str	r2, [r3, #8]
 8004daa:	1f32      	subs	r2, r6, #4
 8004dac:	2a24      	cmp	r2, #36	; 0x24
 8004dae:	d843      	bhi.n	8004e38 <_realloc_r+0x274>
 8004db0:	2a13      	cmp	r2, #19
 8004db2:	d93f      	bls.n	8004e34 <_realloc_r+0x270>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	2a1b      	cmp	r2, #27
 8004db8:	60ab      	str	r3, [r5, #8]
 8004dba:	6863      	ldr	r3, [r4, #4]
 8004dbc:	60eb      	str	r3, [r5, #12]
 8004dbe:	d824      	bhi.n	8004e0a <_realloc_r+0x246>
 8004dc0:	f105 0010 	add.w	r0, r5, #16
 8004dc4:	f104 0308 	add.w	r3, r4, #8
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	6002      	str	r2, [r0, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	6042      	str	r2, [r0, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	6083      	str	r3, [r0, #8]
 8004dd4:	46a9      	mov	r9, r5
 8004dd6:	e756      	b.n	8004c86 <_realloc_r+0xc2>
 8004dd8:	4580      	cmp	r8, r0
 8004dda:	4607      	mov	r7, r0
 8004ddc:	dddf      	ble.n	8004d9e <_realloc_r+0x1da>
 8004dde:	4611      	mov	r1, r2
 8004de0:	4650      	mov	r0, sl
 8004de2:	f7fe fff3 	bl	8003dcc <_malloc_r>
 8004de6:	4607      	mov	r7, r0
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d0ae      	beq.n	8004d4a <_realloc_r+0x186>
 8004dec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004df0:	f1a0 0208 	sub.w	r2, r0, #8
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	444b      	add	r3, r9
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d120      	bne.n	8004e40 <_realloc_r+0x27c>
 8004dfe:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8004e02:	f027 0703 	bic.w	r7, r7, #3
 8004e06:	4437      	add	r7, r6
 8004e08:	e73d      	b.n	8004c86 <_realloc_r+0xc2>
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	2a24      	cmp	r2, #36	; 0x24
 8004e0e:	612b      	str	r3, [r5, #16]
 8004e10:	68e3      	ldr	r3, [r4, #12]
 8004e12:	bf18      	it	ne
 8004e14:	f105 0018 	addne.w	r0, r5, #24
 8004e18:	616b      	str	r3, [r5, #20]
 8004e1a:	bf09      	itett	eq
 8004e1c:	6923      	ldreq	r3, [r4, #16]
 8004e1e:	f104 0310 	addne.w	r3, r4, #16
 8004e22:	61ab      	streq	r3, [r5, #24]
 8004e24:	6962      	ldreq	r2, [r4, #20]
 8004e26:	bf02      	ittt	eq
 8004e28:	f105 0020 	addeq.w	r0, r5, #32
 8004e2c:	f104 0318 	addeq.w	r3, r4, #24
 8004e30:	61ea      	streq	r2, [r5, #28]
 8004e32:	e7c9      	b.n	8004dc8 <_realloc_r+0x204>
 8004e34:	4623      	mov	r3, r4
 8004e36:	e7c7      	b.n	8004dc8 <_realloc_r+0x204>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	f7ff fea9 	bl	8004b90 <memmove>
 8004e3e:	e7c9      	b.n	8004dd4 <_realloc_r+0x210>
 8004e40:	1f32      	subs	r2, r6, #4
 8004e42:	2a24      	cmp	r2, #36	; 0x24
 8004e44:	d82e      	bhi.n	8004ea4 <_realloc_r+0x2e0>
 8004e46:	2a13      	cmp	r2, #19
 8004e48:	d929      	bls.n	8004e9e <_realloc_r+0x2da>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	2a1b      	cmp	r2, #27
 8004e4e:	6003      	str	r3, [r0, #0]
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	6043      	str	r3, [r0, #4]
 8004e54:	d80e      	bhi.n	8004e74 <_realloc_r+0x2b0>
 8004e56:	f100 0308 	add.w	r3, r0, #8
 8004e5a:	f104 0208 	add.w	r2, r4, #8
 8004e5e:	6811      	ldr	r1, [r2, #0]
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	6851      	ldr	r1, [r2, #4]
 8004e64:	6059      	str	r1, [r3, #4]
 8004e66:	6892      	ldr	r2, [r2, #8]
 8004e68:	609a      	str	r2, [r3, #8]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4650      	mov	r0, sl
 8004e6e:	f7ff fdbf 	bl	80049f0 <_free_r>
 8004e72:	e76a      	b.n	8004d4a <_realloc_r+0x186>
 8004e74:	68a3      	ldr	r3, [r4, #8]
 8004e76:	2a24      	cmp	r2, #36	; 0x24
 8004e78:	6083      	str	r3, [r0, #8]
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	bf18      	it	ne
 8004e7e:	f104 0210 	addne.w	r2, r4, #16
 8004e82:	60c3      	str	r3, [r0, #12]
 8004e84:	bf09      	itett	eq
 8004e86:	6923      	ldreq	r3, [r4, #16]
 8004e88:	f100 0310 	addne.w	r3, r0, #16
 8004e8c:	6103      	streq	r3, [r0, #16]
 8004e8e:	6961      	ldreq	r1, [r4, #20]
 8004e90:	bf02      	ittt	eq
 8004e92:	f100 0318 	addeq.w	r3, r0, #24
 8004e96:	f104 0218 	addeq.w	r2, r4, #24
 8004e9a:	6141      	streq	r1, [r0, #20]
 8004e9c:	e7df      	b.n	8004e5e <_realloc_r+0x29a>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	e7dc      	b.n	8004e5e <_realloc_r+0x29a>
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	f7ff fe73 	bl	8004b90 <memmove>
 8004eaa:	e7de      	b.n	8004e6a <_realloc_r+0x2a6>
 8004eac:	4637      	mov	r7, r6
 8004eae:	e6ea      	b.n	8004c86 <_realloc_r+0xc2>
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	431f      	orrs	r7, r3
 8004eb6:	f8c9 7004 	str.w	r7, [r9, #4]
 8004eba:	6853      	ldr	r3, [r2, #4]
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	e6fc      	b.n	8004cbe <_realloc_r+0xfa>
 8004ec4:	2000014c 	.word	0x2000014c

08004ec8 <__ascii_wctomb>:
 8004ec8:	b149      	cbz	r1, 8004ede <__ascii_wctomb+0x16>
 8004eca:	2aff      	cmp	r2, #255	; 0xff
 8004ecc:	bf8b      	itete	hi
 8004ece:	238a      	movhi	r3, #138	; 0x8a
 8004ed0:	700a      	strbls	r2, [r1, #0]
 8004ed2:	6003      	strhi	r3, [r0, #0]
 8004ed4:	2001      	movls	r0, #1
 8004ed6:	bf88      	it	hi
 8004ed8:	f04f 30ff 	movhi.w	r0, #4294967295
 8004edc:	4770      	bx	lr
 8004ede:	4608      	mov	r0, r1
 8004ee0:	4770      	bx	lr
	...

08004ee4 <_sbrk>:
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <_sbrk+0x14>)
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6819      	ldr	r1, [r3, #0]
 8004eea:	b909      	cbnz	r1, 8004ef0 <_sbrk+0xc>
 8004eec:	4903      	ldr	r1, [pc, #12]	; (8004efc <_sbrk+0x18>)
 8004eee:	6019      	str	r1, [r3, #0]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	4402      	add	r2, r0
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	4770      	bx	lr
 8004ef8:	20000720 	.word	0x20000720
 8004efc:	200007d4 	.word	0x200007d4

08004f00 <_init>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr

08004f0c <_fini>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr
